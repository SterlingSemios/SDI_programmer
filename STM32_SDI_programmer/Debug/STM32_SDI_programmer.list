
STM32_SDI_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08003048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003048  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b074  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd3  00000000  00000000  0002b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002cce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001541d  00000000  00000000  0002dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b325  00000000  00000000  00043005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082056  00000000  00000000  0004e32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e34  00000000  00000000  000d03d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000070 	.word	0x20000070
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08002ed4 	.word	0x08002ed4

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000074 	.word	0x20000074
 80000f8:	08002ed4 	.word	0x08002ed4

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_shi>:
 800010c:	b403      	push	{r0, r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0040      	lsls	r0, r0, #1
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	5e09      	ldrsh	r1, [r1, r0]
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	448e      	add	lr, r1
 800011c:	bc03      	pop	{r0, r1}
 800011e:	4770      	bx	lr

08000120 <__udivsi3>:
 8000120:	2200      	movs	r2, #0
 8000122:	0843      	lsrs	r3, r0, #1
 8000124:	428b      	cmp	r3, r1
 8000126:	d374      	bcc.n	8000212 <__udivsi3+0xf2>
 8000128:	0903      	lsrs	r3, r0, #4
 800012a:	428b      	cmp	r3, r1
 800012c:	d35f      	bcc.n	80001ee <__udivsi3+0xce>
 800012e:	0a03      	lsrs	r3, r0, #8
 8000130:	428b      	cmp	r3, r1
 8000132:	d344      	bcc.n	80001be <__udivsi3+0x9e>
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d328      	bcc.n	800018c <__udivsi3+0x6c>
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d30d      	bcc.n	800015c <__udivsi3+0x3c>
 8000140:	22ff      	movs	r2, #255	; 0xff
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	ba12      	rev	r2, r2
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d302      	bcc.n	8000152 <__udivsi3+0x32>
 800014c:	1212      	asrs	r2, r2, #8
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	d065      	beq.n	800021e <__udivsi3+0xfe>
 8000152:	0b03      	lsrs	r3, r0, #12
 8000154:	428b      	cmp	r3, r1
 8000156:	d319      	bcc.n	800018c <__udivsi3+0x6c>
 8000158:	e000      	b.n	800015c <__udivsi3+0x3c>
 800015a:	0a09      	lsrs	r1, r1, #8
 800015c:	0bc3      	lsrs	r3, r0, #15
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x46>
 8000162:	03cb      	lsls	r3, r1, #15
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b83      	lsrs	r3, r0, #14
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x52>
 800016e:	038b      	lsls	r3, r1, #14
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b43      	lsrs	r3, r0, #13
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x5e>
 800017a:	034b      	lsls	r3, r1, #13
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b03      	lsrs	r3, r0, #12
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x6a>
 8000186:	030b      	lsls	r3, r1, #12
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0ac3      	lsrs	r3, r0, #11
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x76>
 8000192:	02cb      	lsls	r3, r1, #11
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a83      	lsrs	r3, r0, #10
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x82>
 800019e:	028b      	lsls	r3, r1, #10
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a43      	lsrs	r3, r0, #9
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x8e>
 80001aa:	024b      	lsls	r3, r1, #9
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a03      	lsrs	r3, r0, #8
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x9a>
 80001b6:	020b      	lsls	r3, r1, #8
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	d2cd      	bcs.n	800015a <__udivsi3+0x3a>
 80001be:	09c3      	lsrs	r3, r0, #7
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xa8>
 80001c4:	01cb      	lsls	r3, r1, #7
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0983      	lsrs	r3, r0, #6
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xb4>
 80001d0:	018b      	lsls	r3, r1, #6
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0943      	lsrs	r3, r0, #5
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xc0>
 80001dc:	014b      	lsls	r3, r1, #5
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0903      	lsrs	r3, r0, #4
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xcc>
 80001e8:	010b      	lsls	r3, r1, #4
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	08c3      	lsrs	r3, r0, #3
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xd8>
 80001f4:	00cb      	lsls	r3, r1, #3
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0883      	lsrs	r3, r0, #2
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xe4>
 8000200:	008b      	lsls	r3, r1, #2
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0843      	lsrs	r3, r0, #1
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xf0>
 800020c:	004b      	lsls	r3, r1, #1
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	1a41      	subs	r1, r0, r1
 8000214:	d200      	bcs.n	8000218 <__udivsi3+0xf8>
 8000216:	4601      	mov	r1, r0
 8000218:	4152      	adcs	r2, r2
 800021a:	4610      	mov	r0, r2
 800021c:	4770      	bx	lr
 800021e:	e7ff      	b.n	8000220 <__udivsi3+0x100>
 8000220:	b501      	push	{r0, lr}
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8f0 	bl	8000408 <__aeabi_idiv0>
 8000228:	bd02      	pop	{r1, pc}
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uidivmod>:
 800022c:	2900      	cmp	r1, #0
 800022e:	d0f7      	beq.n	8000220 <__udivsi3+0x100>
 8000230:	e776      	b.n	8000120 <__udivsi3>
 8000232:	4770      	bx	lr

08000234 <__divsi3>:
 8000234:	4603      	mov	r3, r0
 8000236:	430b      	orrs	r3, r1
 8000238:	d47f      	bmi.n	800033a <__divsi3+0x106>
 800023a:	2200      	movs	r2, #0
 800023c:	0843      	lsrs	r3, r0, #1
 800023e:	428b      	cmp	r3, r1
 8000240:	d374      	bcc.n	800032c <__divsi3+0xf8>
 8000242:	0903      	lsrs	r3, r0, #4
 8000244:	428b      	cmp	r3, r1
 8000246:	d35f      	bcc.n	8000308 <__divsi3+0xd4>
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d344      	bcc.n	80002d8 <__divsi3+0xa4>
 800024e:	0b03      	lsrs	r3, r0, #12
 8000250:	428b      	cmp	r3, r1
 8000252:	d328      	bcc.n	80002a6 <__divsi3+0x72>
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d30d      	bcc.n	8000276 <__divsi3+0x42>
 800025a:	22ff      	movs	r2, #255	; 0xff
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	ba12      	rev	r2, r2
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d302      	bcc.n	800026c <__divsi3+0x38>
 8000266:	1212      	asrs	r2, r2, #8
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	d065      	beq.n	8000338 <__divsi3+0x104>
 800026c:	0b03      	lsrs	r3, r0, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d319      	bcc.n	80002a6 <__divsi3+0x72>
 8000272:	e000      	b.n	8000276 <__divsi3+0x42>
 8000274:	0a09      	lsrs	r1, r1, #8
 8000276:	0bc3      	lsrs	r3, r0, #15
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x4c>
 800027c:	03cb      	lsls	r3, r1, #15
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b83      	lsrs	r3, r0, #14
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x58>
 8000288:	038b      	lsls	r3, r1, #14
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b43      	lsrs	r3, r0, #13
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x64>
 8000294:	034b      	lsls	r3, r1, #13
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b03      	lsrs	r3, r0, #12
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x70>
 80002a0:	030b      	lsls	r3, r1, #12
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0ac3      	lsrs	r3, r0, #11
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x7c>
 80002ac:	02cb      	lsls	r3, r1, #11
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a83      	lsrs	r3, r0, #10
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x88>
 80002b8:	028b      	lsls	r3, r1, #10
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a43      	lsrs	r3, r0, #9
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x94>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a03      	lsrs	r3, r0, #8
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0xa0>
 80002d0:	020b      	lsls	r3, r1, #8
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	d2cd      	bcs.n	8000274 <__divsi3+0x40>
 80002d8:	09c3      	lsrs	r3, r0, #7
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xae>
 80002de:	01cb      	lsls	r3, r1, #7
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0983      	lsrs	r3, r0, #6
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xba>
 80002ea:	018b      	lsls	r3, r1, #6
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0943      	lsrs	r3, r0, #5
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xc6>
 80002f6:	014b      	lsls	r3, r1, #5
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0903      	lsrs	r3, r0, #4
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xd2>
 8000302:	010b      	lsls	r3, r1, #4
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	08c3      	lsrs	r3, r0, #3
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xde>
 800030e:	00cb      	lsls	r3, r1, #3
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0883      	lsrs	r3, r0, #2
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xea>
 800031a:	008b      	lsls	r3, r1, #2
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0843      	lsrs	r3, r0, #1
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xf6>
 8000326:	004b      	lsls	r3, r1, #1
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	1a41      	subs	r1, r0, r1
 800032e:	d200      	bcs.n	8000332 <__divsi3+0xfe>
 8000330:	4601      	mov	r1, r0
 8000332:	4152      	adcs	r2, r2
 8000334:	4610      	mov	r0, r2
 8000336:	4770      	bx	lr
 8000338:	e05d      	b.n	80003f6 <__divsi3+0x1c2>
 800033a:	0fca      	lsrs	r2, r1, #31
 800033c:	d000      	beq.n	8000340 <__divsi3+0x10c>
 800033e:	4249      	negs	r1, r1
 8000340:	1003      	asrs	r3, r0, #32
 8000342:	d300      	bcc.n	8000346 <__divsi3+0x112>
 8000344:	4240      	negs	r0, r0
 8000346:	4053      	eors	r3, r2
 8000348:	2200      	movs	r2, #0
 800034a:	469c      	mov	ip, r3
 800034c:	0903      	lsrs	r3, r0, #4
 800034e:	428b      	cmp	r3, r1
 8000350:	d32d      	bcc.n	80003ae <__divsi3+0x17a>
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d312      	bcc.n	800037e <__divsi3+0x14a>
 8000358:	22fc      	movs	r2, #252	; 0xfc
 800035a:	0189      	lsls	r1, r1, #6
 800035c:	ba12      	rev	r2, r2
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d30c      	bcc.n	800037e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d308      	bcc.n	800037e <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d304      	bcc.n	800037e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	d03a      	beq.n	80003ee <__divsi3+0x1ba>
 8000378:	1192      	asrs	r2, r2, #6
 800037a:	e000      	b.n	800037e <__divsi3+0x14a>
 800037c:	0989      	lsrs	r1, r1, #6
 800037e:	09c3      	lsrs	r3, r0, #7
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x154>
 8000384:	01cb      	lsls	r3, r1, #7
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0983      	lsrs	r3, r0, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x160>
 8000390:	018b      	lsls	r3, r1, #6
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0943      	lsrs	r3, r0, #5
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x16c>
 800039c:	014b      	lsls	r3, r1, #5
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0903      	lsrs	r3, r0, #4
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x178>
 80003a8:	010b      	lsls	r3, r1, #4
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	08c3      	lsrs	r3, r0, #3
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x184>
 80003b4:	00cb      	lsls	r3, r1, #3
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0883      	lsrs	r3, r0, #2
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x190>
 80003c0:	008b      	lsls	r3, r1, #2
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	d2d9      	bcs.n	800037c <__divsi3+0x148>
 80003c8:	0843      	lsrs	r3, r0, #1
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d301      	bcc.n	80003d2 <__divsi3+0x19e>
 80003ce:	004b      	lsls	r3, r1, #1
 80003d0:	1ac0      	subs	r0, r0, r3
 80003d2:	4152      	adcs	r2, r2
 80003d4:	1a41      	subs	r1, r0, r1
 80003d6:	d200      	bcs.n	80003da <__divsi3+0x1a6>
 80003d8:	4601      	mov	r1, r0
 80003da:	4663      	mov	r3, ip
 80003dc:	4152      	adcs	r2, r2
 80003de:	105b      	asrs	r3, r3, #1
 80003e0:	4610      	mov	r0, r2
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x1b4>
 80003e4:	4240      	negs	r0, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d500      	bpl.n	80003ec <__divsi3+0x1b8>
 80003ea:	4249      	negs	r1, r1
 80003ec:	4770      	bx	lr
 80003ee:	4663      	mov	r3, ip
 80003f0:	105b      	asrs	r3, r3, #1
 80003f2:	d300      	bcc.n	80003f6 <__divsi3+0x1c2>
 80003f4:	4240      	negs	r0, r0
 80003f6:	b501      	push	{r0, lr}
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f805 	bl	8000408 <__aeabi_idiv0>
 80003fe:	bd02      	pop	{r1, pc}

08000400 <__aeabi_idivmod>:
 8000400:	2900      	cmp	r1, #0
 8000402:	d0f8      	beq.n	80003f6 <__divsi3+0x1c2>
 8000404:	e716      	b.n	8000234 <__divsi3>
 8000406:	4770      	bx	lr

08000408 <__aeabi_idiv0>:
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fa8a 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f812 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f000 f8da 	bl	80005d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800041c:	f000 f856 	bl	80004cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000420:	f000 f8a2 	bl	8000568 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printLog("SDI programmer initialized 22");
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <main+0x2c>)
 8000426:	0018      	movs	r0, r3
 8000428:	f000 f8ee 	bl	8000608 <printLog>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(500);
 800042c:	23fa      	movs	r3, #250	; 0xfa
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	0018      	movs	r0, r3
 8000432:	f000 faff 	bl	8000a34 <HAL_Delay>
 8000436:	e7f9      	b.n	800042c <main+0x20>
 8000438:	08002eec 	.word	0x08002eec

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b093      	sub	sp, #76	; 0x4c
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	2414      	movs	r4, #20
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	2334      	movs	r3, #52	; 0x34
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f002 f8cf 	bl	80025f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	0018      	movs	r0, r3
 8000456:	2310      	movs	r3, #16
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f002 f8c8 	bl	80025f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fd21 	bl	8000eac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2202      	movs	r2, #2
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	0052      	lsls	r2, r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2240      	movs	r2, #64	; 0x40
 8000482:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	193b      	adds	r3, r7, r4
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fd59 	bl	8000f44 <HAL_RCC_OscConfig>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000496:	f000 f8b1 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2207      	movs	r2, #7
 800049e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 f854 	bl	8001564 <HAL_RCC_ClockConfig>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004c0:	f000 f89c 	bl	80005fc <Error_Handler>
  }
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b013      	add	sp, #76	; 0x4c
 80004ca:	bd90      	pop	{r4, r7, pc}

080004cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004d2:	4a24      	ldr	r2, [pc, #144]	; (8000564 <MX_USART1_UART_Init+0x98>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004d8:	22e1      	movs	r2, #225	; 0xe1
 80004da:	0252      	lsls	r2, r2, #9
 80004dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_USART1_UART_Init+0x94>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_USART1_UART_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_USART1_UART_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_USART1_UART_Init+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_USART1_UART_Init+0x94>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 faf4 	bl	8001b04 <HAL_UART_Init>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000520:	f000 f86c 	bl	80005fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART1_UART_Init+0x94>)
 8000526:	2100      	movs	r1, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f001 ff57 	bl	80023dc <HAL_UARTEx_SetTxFifoThreshold>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000532:	f000 f863 	bl	80005fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_USART1_UART_Init+0x94>)
 8000538:	2100      	movs	r1, #0
 800053a:	0018      	movs	r0, r3
 800053c:	f001 ff8e 	bl	800245c <HAL_UARTEx_SetRxFifoThreshold>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000544:	f000 f85a 	bl	80005fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_USART1_UART_Init+0x94>)
 800054a:	0018      	movs	r0, r3
 800054c:	f001 ff0c 	bl	8002368 <HAL_UARTEx_DisableFifoMode>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000554:	f000 f852 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	2000008c 	.word	0x2000008c
 8000564:	40013800 	.word	0x40013800

08000568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <MX_USART2_UART_Init+0x64>)
 8000570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 8000574:	22e1      	movs	r2, #225	; 0xe1
 8000576:	0252      	lsls	r2, r2, #9
 8000578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MX_USART2_UART_Init+0x60>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 faa6 	bl	8001b04 <HAL_UART_Init>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005bc:	f000 f81e 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	2000011c 	.word	0x2000011c
 80005cc:	40004400 	.word	0x40004400

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_GPIO_Init+0x28>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <MX_GPIO_Init+0x28>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <MX_GPIO_Init+0x28>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <printLog>:
#include <string.h>

extern UART_HandleTypeDef huart2;

void printLog(char* message)
{
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	b500      	push	{lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
 8000612:	61f8      	str	r0, [r7, #28]
 8000614:	466b      	mov	r3, sp
 8000616:	4698      	mov	r8, r3
    int msgLen = strlen(message);
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff fd6e 	bl	80000fc <strlen>
 8000620:	0003      	movs	r3, r0
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
    char logMessage[msgLen + 3];
 8000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000626:	3303      	adds	r3, #3
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	62ba      	str	r2, [r7, #40]	; 0x28
 800062c:	001a      	movs	r2, r3
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	2200      	movs	r2, #0
 8000632:	60fa      	str	r2, [r7, #12]
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	68f9      	ldr	r1, [r7, #12]
 8000638:	0002      	movs	r2, r0
 800063a:	0f52      	lsrs	r2, r2, #29
 800063c:	000e      	movs	r6, r1
 800063e:	00f6      	lsls	r6, r6, #3
 8000640:	617e      	str	r6, [r7, #20]
 8000642:	697e      	ldr	r6, [r7, #20]
 8000644:	4316      	orrs	r6, r2
 8000646:	617e      	str	r6, [r7, #20]
 8000648:	0002      	movs	r2, r0
 800064a:	00d2      	lsls	r2, r2, #3
 800064c:	613a      	str	r2, [r7, #16]
 800064e:	001a      	movs	r2, r3
 8000650:	603a      	str	r2, [r7, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	6838      	ldr	r0, [r7, #0]
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	0002      	movs	r2, r0
 800065c:	0f52      	lsrs	r2, r2, #29
 800065e:	000e      	movs	r6, r1
 8000660:	00f5      	lsls	r5, r6, #3
 8000662:	4315      	orrs	r5, r2
 8000664:	0002      	movs	r2, r0
 8000666:	00d4      	lsls	r4, r2, #3
 8000668:	3307      	adds	r3, #7
 800066a:	08db      	lsrs	r3, r3, #3
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	466a      	mov	r2, sp
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	469d      	mov	sp, r3
 8000674:	466b      	mov	r3, sp
 8000676:	3300      	adds	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
    sprintf(logMessage, "%s\r\n", message);
 800067a:	69fa      	ldr	r2, [r7, #28]
 800067c:	490b      	ldr	r1, [pc, #44]	; (80006ac <printLog+0xa4>)
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	0018      	movs	r0, r3
 8000682:	f001 ffbd 	bl	8002600 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)logMessage, strlen(logMessage), 100);
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff fd37 	bl	80000fc <strlen>
 800068e:	0003      	movs	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <printLog+0xa8>)
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	f001 fa8a 	bl	8001bb0 <HAL_UART_Transmit>
 800069c:	46c5      	mov	sp, r8
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b00c      	add	sp, #48	; 0x30
 80006a4:	bc80      	pop	{r7}
 80006a6:	46b8      	mov	r8, r7
 80006a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	08002f0c 	.word	0x08002f0c
 80006b0:	2000011c 	.word	0x2000011c

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0549      	lsls	r1, r1, #21
 80006dc:	430a      	orrs	r2, r1
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_MspInit+0x44>)
 80006e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	055b      	lsls	r3, r3, #21
 80006e8:	4013      	ands	r3, r2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b093      	sub	sp, #76	; 0x4c
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	2334      	movs	r3, #52	; 0x34
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f001 ff6e 	bl	80025f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	241c      	movs	r4, #28
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2318      	movs	r3, #24
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f001 ff66 	bl	80025f0 <memset>
  if(huart->Instance==USART1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a3d      	ldr	r2, [pc, #244]	; (8000820 <HAL_UART_MspInit+0x124>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d13d      	bne.n	80007aa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	f001 f8bb 	bl	80018b8 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000746:	f7ff ff59 	bl	80005fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <HAL_UART_MspInit+0x128>)
 800074c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800074e:	4b35      	ldr	r3, [pc, #212]	; (8000824 <HAL_UART_MspInit+0x128>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	01c9      	lsls	r1, r1, #7
 8000754:	430a      	orrs	r2, r1
 8000756:	641a      	str	r2, [r3, #64]	; 0x40
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <HAL_UART_MspInit+0x128>)
 800075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	01db      	lsls	r3, r3, #7
 8000760:	4013      	ands	r3, r2
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <HAL_UART_MspInit+0x128>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <HAL_UART_MspInit+0x128>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <HAL_UART_MspInit+0x128>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800077e:	2134      	movs	r1, #52	; 0x34
 8000780:	187b      	adds	r3, r7, r1
 8000782:	22c0      	movs	r2, #192	; 0xc0
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	187a      	adds	r2, r7, r1
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fa1e 	bl	8000be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007a8:	e035      	b.n	8000816 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <HAL_UART_MspInit+0x12c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d130      	bne.n	8000816 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <HAL_UART_MspInit+0x128>)
 80007b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_UART_MspInit+0x128>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0289      	lsls	r1, r1, #10
 80007be:	430a      	orrs	r2, r1
 80007c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x128>)
 80007c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	029b      	lsls	r3, r3, #10
 80007ca:	4013      	ands	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_UART_MspInit+0x128>)
 80007d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <HAL_UART_MspInit+0x128>)
 80007d6:	2101      	movs	r1, #1
 80007d8:	430a      	orrs	r2, r1
 80007da:	635a      	str	r2, [r3, #52]	; 0x34
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_UART_MspInit+0x128>)
 80007de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e0:	2201      	movs	r2, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007e8:	2134      	movs	r1, #52	; 0x34
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	220c      	movs	r2, #12
 80007ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2202      	movs	r2, #2
 80007f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2201      	movs	r2, #1
 8000806:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	187a      	adds	r2, r7, r1
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f9e7 	bl	8000be4 <HAL_GPIO_Init>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b013      	add	sp, #76	; 0x4c
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40013800 	.word	0x40013800
 8000824:	40021000 	.word	0x40021000
 8000828:	40004400 	.word	0x40004400

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f8d4 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f001 fe86 	bl	800259c <__errno>
 8000890:	0003      	movs	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	2301      	movs	r3, #1
 8000898:	425b      	negs	r3, r3
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	18d2      	adds	r2, r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b006      	add	sp, #24
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20004800 	.word	0x20004800
 80008bc:	00000400 	.word	0x00000400
 80008c0:	200001ac 	.word	0x200001ac
 80008c4:	200001c8 	.word	0x200001c8

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f7ff fff6 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000902:	f001 fe51 	bl	80025a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000906:	f7ff fd81 	bl	800040c <main>

0800090a <LoopForever>:

LoopForever:
  b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000918:	08002fd8 	.word	0x08002fd8
  ldr r2, =_sbss
 800091c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000920:	200001c4 	.word	0x200001c4

08000924 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_IRQHandler>
	...

08000928 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x3c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_Init+0x3c>)
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	0049      	lsls	r1, r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2003      	movs	r0, #3
 8000944:	f000 f810 	bl	8000968 <HAL_InitTick>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d003      	beq.n	8000954 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff feae 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_InitTick+0x88>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d02b      	beq.n	80009d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_InitTick+0x8c>)
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_InitTick+0x88>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	0019      	movs	r1, r3
 800098a:	23fa      	movs	r3, #250	; 0xfa
 800098c:	0098      	lsls	r0, r3, #2
 800098e:	f7ff fbc7 	bl	8000120 <__udivsi3>
 8000992:	0003      	movs	r3, r0
 8000994:	0019      	movs	r1, r3
 8000996:	0020      	movs	r0, r4
 8000998:	f7ff fbc2 	bl	8000120 <__udivsi3>
 800099c:	0003      	movs	r3, r0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f913 	bl	8000bca <HAL_SYSTICK_Config>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d112      	bne.n	80009ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d80a      	bhi.n	80009c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2301      	movs	r3, #1
 80009b2:	425b      	negs	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f8f2 	bl	8000ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_InitTick+0x90>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e00d      	b.n	80009e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e008      	b.n	80009e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	230f      	movs	r3, #15
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b005      	add	sp, #20
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	18d2      	adds	r2, r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200001b0 	.word	0x200001b0

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	200001b0 	.word	0x200001b0

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	0003      	movs	r3, r0
 8000a42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	001a      	movs	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	0002      	movs	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	; 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	; 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	045b      	lsls	r3, r3, #17
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d301      	bcc.n	8000b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SysTick_Config+0x44>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7c 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SysTick_Config+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SysTick_Config+0x44>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ffbf 	bl	8000b58 <SysTick_Config>
 8000bda:	0003      	movs	r3, r0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e147      	b.n	8000e84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	000a      	movs	r2, r1
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d100      	bne.n	8000c0c <HAL_GPIO_Init+0x28>
 8000c0a:	e138      	b.n	8000e7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2203      	movs	r2, #3
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <HAL_GPIO_Init+0x40>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d130      	bne.n	8000c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	409a      	lsls	r2, r3
 8000c32:	0013      	movs	r3, r2
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	2201      	movs	r2, #1
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d017      	beq.n	8000cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d123      	bne.n	8000d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2207      	movs	r2, #7
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	43da      	mvns	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2107      	movs	r1, #7
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	6939      	ldr	r1, [r7, #16]
 8000d14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	43da      	mvns	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2203      	movs	r2, #3
 8000d34:	401a      	ands	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	23c0      	movs	r3, #192	; 0xc0
 8000d50:	029b      	lsls	r3, r3, #10
 8000d52:	4013      	ands	r3, r2
 8000d54:	d100      	bne.n	8000d58 <HAL_GPIO_Init+0x174>
 8000d56:	e092      	b.n	8000e7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d58:	4a50      	ldr	r2, [pc, #320]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3318      	adds	r3, #24
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	589b      	ldr	r3, [r3, r2]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	220f      	movs	r2, #15
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0x1ca>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00d      	beq.n	8000daa <HAL_GPIO_Init+0x1c6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_GPIO_Init+0x2c0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x1c2>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a43      	ldr	r2, [pc, #268]	; (8000ea8 <HAL_GPIO_Init+0x2c4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_GPIO_Init+0x1be>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x1cc>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x1cc>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x1cc>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x1cc>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2103      	movs	r1, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	00d2      	lsls	r2, r2, #3
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000dc0:	4936      	ldr	r1, [pc, #216]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	035b      	lsls	r3, r3, #13
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	039b      	lsls	r3, r3, #14
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000e24:	2384      	movs	r3, #132	; 0x84
 8000e26:	58d3      	ldr	r3, [r2, r3]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e48:	4914      	ldr	r1, [pc, #80]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000e4a:	2284      	movs	r2, #132	; 0x84
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	58d3      	ldr	r3, [r2, r3]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e76:	4909      	ldr	r1, [pc, #36]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	40da      	lsrs	r2, r3
 8000e8c:	1e13      	subs	r3, r2, #0
 8000e8e:	d000      	beq.n	8000e92 <HAL_GPIO_Init+0x2ae>
 8000e90:	e6b0      	b.n	8000bf4 <HAL_GPIO_Init+0x10>
  }
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b006      	add	sp, #24
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	50000400 	.word	0x50000400
 8000ea4:	50000800 	.word	0x50000800
 8000ea8:	50000c00 	.word	0x50000c00

08000eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d11f      	bne.n	8000f10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	189b      	adds	r3, r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4912      	ldr	r1, [pc, #72]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff f91e 	bl	8000120 <__udivsi3>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eea:	e008      	b.n	8000efe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e001      	b.n	8000efe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e009      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	401a      	ands	r2, r3
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d0ed      	beq.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b004      	add	sp, #16
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	fffff9ff 	.word	0xfffff9ff
 8000f24:	20000000 	.word	0x20000000
 8000f28:	000f4240 	.word	0x000f4240

08000f2c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	23e0      	movs	r3, #224	; 0xe0
 8000f36:	01db      	lsls	r3, r3, #7
 8000f38:	4013      	ands	r3, r2
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e2f3      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x1e>
 8000f60:	e07c      	b.n	800105c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f62:	4bc3      	ldr	r3, [pc, #780]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2238      	movs	r2, #56	; 0x38
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f6c:	4bc0      	ldr	r3, [pc, #768]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b10      	cmp	r3, #16
 8000f7a:	d102      	bne.n	8000f82 <HAL_RCC_OscConfig+0x3e>
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d002      	beq.n	8000f88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d10b      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4bb9      	ldr	r3, [pc, #740]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	d062      	beq.n	800105a <HAL_RCC_OscConfig+0x116>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d15e      	bne.n	800105a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e2ce      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d107      	bne.n	8000fbc <HAL_RCC_OscConfig+0x78>
 8000fac:	4bb0      	ldr	r3, [pc, #704]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4baf      	ldr	r3, [pc, #700]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	0249      	lsls	r1, r1, #9
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e020      	b.n	8000ffe <HAL_RCC_OscConfig+0xba>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	23a0      	movs	r3, #160	; 0xa0
 8000fc2:	02db      	lsls	r3, r3, #11
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d10e      	bne.n	8000fe6 <HAL_RCC_OscConfig+0xa2>
 8000fc8:	4ba9      	ldr	r3, [pc, #676]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4ba8      	ldr	r3, [pc, #672]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	02c9      	lsls	r1, r1, #11
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	4ba6      	ldr	r3, [pc, #664]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4ba5      	ldr	r3, [pc, #660]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0249      	lsls	r1, r1, #9
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	e00b      	b.n	8000ffe <HAL_RCC_OscConfig+0xba>
 8000fe6:	4ba2      	ldr	r3, [pc, #648]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4ba1      	ldr	r3, [pc, #644]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	49a1      	ldr	r1, [pc, #644]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8000fee:	400a      	ands	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b9e      	ldr	r3, [pc, #632]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8000ff8:	499f      	ldr	r1, [pc, #636]	; (8001278 <HAL_RCC_OscConfig+0x334>)
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d014      	beq.n	8001030 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fd0b 	bl	8000a20 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fd06 	bl	8000a20 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e28d      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001022:	4b93      	ldr	r3, [pc, #588]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0xcc>
 800102e:	e015      	b.n	800105c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fcf6 	bl	8000a20 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103a:	f7ff fcf1 	bl	8000a20 <HAL_GetTick>
 800103e:	0002      	movs	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b64      	cmp	r3, #100	; 0x64
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e278      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104c:	4b88      	ldr	r3, [pc, #544]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	029b      	lsls	r3, r3, #10
 8001054:	4013      	ands	r3, r2
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0xf6>
 8001058:	e000      	b.n	800105c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d100      	bne.n	8001068 <HAL_RCC_OscConfig+0x124>
 8001066:	e099      	b.n	800119c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001068:	4b81      	ldr	r3, [pc, #516]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2238      	movs	r2, #56	; 0x38
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001072:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2203      	movs	r2, #3
 8001078:	4013      	ands	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b10      	cmp	r3, #16
 8001080:	d102      	bne.n	8001088 <HAL_RCC_OscConfig+0x144>
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d002      	beq.n	800108e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d135      	bne.n	80010fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800108e:	4b78      	ldr	r3, [pc, #480]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4013      	ands	r3, r2
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x162>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e24b      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b72      	ldr	r3, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a74      	ldr	r2, [pc, #464]	; (800127c <HAL_RCC_OscConfig+0x338>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	021a      	lsls	r2, r3, #8
 80010b6:	4b6e      	ldr	r3, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80010b8:	430a      	orrs	r2, r1
 80010ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d112      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010c2:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x33c>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	0019      	movs	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010d6:	4b66      	ldr	r3, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0adb      	lsrs	r3, r3, #11
 80010dc:	2207      	movs	r2, #7
 80010de:	4013      	ands	r3, r2
 80010e0:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_RCC_OscConfig+0x340>)
 80010e2:	40da      	lsrs	r2, r3
 80010e4:	4b68      	ldr	r3, [pc, #416]	; (8001288 <HAL_RCC_OscConfig+0x344>)
 80010e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <HAL_RCC_OscConfig+0x348>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fc3b 	bl	8000968 <HAL_InitTick>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d051      	beq.n	800119a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e221      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d030      	beq.n	8001164 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001102:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a5e      	ldr	r2, [pc, #376]	; (8001280 <HAL_RCC_OscConfig+0x33c>)
 8001108:	4013      	ands	r3, r2
 800110a:	0019      	movs	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	4b57      	ldr	r3, [pc, #348]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001116:	4b56      	ldr	r3, [pc, #344]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b55      	ldr	r3, [pc, #340]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0049      	lsls	r1, r1, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fc7c 	bl	8000a20 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fc77 	bl	8000a20 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1fe      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001140:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4013      	ands	r3, r2
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b48      	ldr	r3, [pc, #288]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_RCC_OscConfig+0x338>)
 8001152:	4013      	ands	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	021a      	lsls	r2, r3, #8
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800115e:	430a      	orrs	r2, r1
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	e01b      	b.n	800119c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800116a:	4949      	ldr	r1, [pc, #292]	; (8001290 <HAL_RCC_OscConfig+0x34c>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fc56 	bl	8000a20 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff fc51 	bl	8000a20 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1d8      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4013      	ands	r3, r2
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x236>
 8001198:	e000      	b.n	800119c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800119a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2208      	movs	r2, #8
 80011a2:	4013      	ands	r3, r2
 80011a4:	d047      	beq.n	8001236 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2238      	movs	r2, #56	; 0x38
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b18      	cmp	r3, #24
 80011b0:	d10a      	bne.n	80011c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d03c      	beq.n	8001236 <HAL_RCC_OscConfig+0x2f2>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d138      	bne.n	8001236 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e1ba      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d019      	beq.n	8001204 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc20 	bl	8000a20 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc1b 	bl	8000a20 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1a2      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d0f1      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2a2>
 8001202:	e018      	b.n	8001236 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fc06 	bl	8000a20 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fc01 	bl	8000a20 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e188      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800122e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d1f1      	bne.n	800121a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
 800123e:	d100      	bne.n	8001242 <HAL_RCC_OscConfig+0x2fe>
 8001240:	e0c6      	b.n	80013d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001242:	231f      	movs	r3, #31
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2238      	movs	r2, #56	; 0x38
 8001250:	4013      	ands	r3, r2
 8001252:	2b20      	cmp	r3, #32
 8001254:	d11e      	bne.n	8001294 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_RCC_OscConfig+0x32c>)
 8001258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x31e>
 8001260:	e0b6      	b.n	80013d0 <HAL_RCC_OscConfig+0x48c>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d000      	beq.n	800126c <HAL_RCC_OscConfig+0x328>
 800126a:	e0b1      	b.n	80013d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e166      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
 8001270:	40021000 	.word	0x40021000
 8001274:	fffeffff 	.word	0xfffeffff
 8001278:	fffbffff 	.word	0xfffbffff
 800127c:	ffff80ff 	.word	0xffff80ff
 8001280:	ffffc7ff 	.word	0xffffc7ff
 8001284:	00f42400 	.word	0x00f42400
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004
 8001290:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001294:	4bac      	ldr	r3, [pc, #688]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	4013      	ands	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_OscConfig+0x360>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x362>
 80012a4:	2300      	movs	r3, #0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d011      	beq.n	80012ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4ba7      	ldr	r3, [pc, #668]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80012ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ae:	4ba6      	ldr	r3, [pc, #664]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0549      	lsls	r1, r1, #21
 80012b4:	430a      	orrs	r2, r1
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80012b8:	4ba3      	ldr	r3, [pc, #652]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80012ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	055b      	lsls	r3, r3, #21
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012c6:	231f      	movs	r3, #31
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ce:	4b9f      	ldr	r3, [pc, #636]	; (800154c <HAL_RCC_OscConfig+0x608>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	d11a      	bne.n	8001310 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012da:	4b9c      	ldr	r3, [pc, #624]	; (800154c <HAL_RCC_OscConfig+0x608>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b9b      	ldr	r3, [pc, #620]	; (800154c <HAL_RCC_OscConfig+0x608>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0049      	lsls	r1, r1, #1
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb9a 	bl	8000a20 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fb95 	bl	8000a20 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e11c      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x608>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4013      	ands	r3, r2
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x3e2>
 8001318:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800131a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800131c:	4b8a      	ldr	r3, [pc, #552]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800131e:	2101      	movs	r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	65da      	str	r2, [r3, #92]	; 0x5c
 8001324:	e01c      	b.n	8001360 <HAL_RCC_OscConfig+0x41c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b05      	cmp	r3, #5
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x404>
 800132e:	4b86      	ldr	r3, [pc, #536]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001332:	4b85      	ldr	r3, [pc, #532]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001334:	2104      	movs	r1, #4
 8001336:	430a      	orrs	r2, r1
 8001338:	65da      	str	r2, [r3, #92]	; 0x5c
 800133a:	4b83      	ldr	r3, [pc, #524]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800133c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800133e:	4b82      	ldr	r3, [pc, #520]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001340:	2101      	movs	r1, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	65da      	str	r2, [r3, #92]	; 0x5c
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0x41c>
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800134a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800134c:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800134e:	2101      	movs	r1, #1
 8001350:	438a      	bics	r2, r1
 8001352:	65da      	str	r2, [r3, #92]	; 0x5c
 8001354:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001358:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800135a:	2104      	movs	r1, #4
 800135c:	438a      	bics	r2, r1
 800135e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d014      	beq.n	8001392 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fb5a 	bl	8000a20 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001370:	e009      	b.n	8001386 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fb55 	bl	8000a20 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a74      	ldr	r2, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x60c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e0db      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001386:	4b70      	ldr	r3, [pc, #448]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2202      	movs	r2, #2
 800138c:	4013      	ands	r3, r2
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x42e>
 8001390:	e013      	b.n	80013ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fb45 	bl	8000a20 <HAL_GetTick>
 8001396:	0003      	movs	r3, r0
 8001398:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800139a:	e009      	b.n	80013b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fb40 	bl	8000a20 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	4a6a      	ldr	r2, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x60c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0c6      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013b0:	4b65      	ldr	r3, [pc, #404]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2202      	movs	r2, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013ba:	231f      	movs	r3, #31
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d105      	bne.n	80013d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013c4:	4b60      	ldr	r3, [pc, #384]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80013c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c8:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80013ca:	4962      	ldr	r1, [pc, #392]	; (8001554 <HAL_RCC_OscConfig+0x610>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d100      	bne.n	80013da <HAL_RCC_OscConfig+0x496>
 80013d8:	e0b0      	b.n	800153c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013da:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2238      	movs	r2, #56	; 0x38
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d100      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4a4>
 80013e6:	e078      	b.n	80014da <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d153      	bne.n	8001498 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b54      	ldr	r3, [pc, #336]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80013f6:	4958      	ldr	r1, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x614>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb10 	bl	8000a20 <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fb0b 	bl	8000a20 <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e092      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	049b      	lsls	r3, r3, #18
 8001420:	4013      	ands	r3, r2
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_RCC_OscConfig+0x618>)
 800142a:	4013      	ands	r3, r2
 800142c:	0019      	movs	r1, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1a      	ldr	r2, [r3, #32]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	431a      	orrs	r2, r3
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800144e:	430a      	orrs	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0449      	lsls	r1, r1, #17
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	0549      	lsls	r1, r1, #21
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fad7 	bl	8000a20 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fad2 	bl	8000a20 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e059      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	049b      	lsls	r3, r3, #18
 8001492:	4013      	ands	r3, r2
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x534>
 8001496:	e051      	b.n	800153c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 800149e:	492e      	ldr	r1, [pc, #184]	; (8001558 <HAL_RCC_OscConfig+0x614>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fabc 	bl	8000a20 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fab7 	bl	8000a20 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e03e      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	049b      	lsls	r3, r3, #18
 80014c8:	4013      	ands	r3, r2
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80014d2:	4923      	ldr	r1, [pc, #140]	; (8001560 <HAL_RCC_OscConfig+0x61c>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	e030      	b.n	800153c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e02b      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_RCC_OscConfig+0x604>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2203      	movs	r2, #3
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d11e      	bne.n	8001538 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2270      	movs	r2, #112	; 0x70
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d117      	bne.n	8001538 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	23fe      	movs	r3, #254	; 0xfe
 800150c:	01db      	lsls	r3, r3, #7
 800150e:	401a      	ands	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d10e      	bne.n	8001538 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	23f8      	movs	r3, #248	; 0xf8
 800151e:	039b      	lsls	r3, r3, #14
 8001520:	401a      	ands	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	0f5b      	lsrs	r3, r3, #29
 800152e:	075a      	lsls	r2, r3, #29
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b008      	add	sp, #32
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	40021000 	.word	0x40021000
 800154c:	40007000 	.word	0x40007000
 8001550:	00001388 	.word	0x00001388
 8001554:	efffffff 	.word	0xefffffff
 8001558:	feffffff 	.word	0xfeffffff
 800155c:	1fc1808c 	.word	0x1fc1808c
 8001560:	effefffc 	.word	0xeffefffc

08001564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0e9      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2207      	movs	r2, #7
 800157e:	4013      	ands	r3, r2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d91e      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b73      	ldr	r3, [pc, #460]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2207      	movs	r2, #7
 800158c:	4393      	bics	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	4b70      	ldr	r3, [pc, #448]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001598:	f7ff fa42 	bl	8000a20 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a0:	e009      	b.n	80015b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a2:	f7ff fa3d 	bl	8000a20 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_RCC_ClockConfig+0x1f4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0ca      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2207      	movs	r2, #7
 80015bc:	4013      	ands	r3, r2
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1ee      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d015      	beq.n	80015fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2204      	movs	r2, #4
 80015d4:	4013      	ands	r3, r2
 80015d6:	d006      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4b5f      	ldr	r3, [pc, #380]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 80015de:	21e0      	movs	r1, #224	; 0xe0
 80015e0:	01c9      	lsls	r1, r1, #7
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4a5d      	ldr	r2, [pc, #372]	; (8001760 <HAL_RCC_ClockConfig+0x1fc>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d057      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	d12b      	bne.n	8001670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e097      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d107      	bne.n	8001634 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	049b      	lsls	r3, r3, #18
 800162c:	4013      	ands	r3, r2
 800162e:	d11f      	bne.n	8001670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e08b      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4013      	ands	r3, r2
 8001646:	d113      	bne.n	8001670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e07f      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d106      	bne.n	8001662 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001654:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 8001656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d108      	bne.n	8001670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e074      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e06d      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2207      	movs	r2, #7
 8001676:	4393      	bics	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001684:	f7ff f9cc 	bl	8000a20 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168c:	e009      	b.n	80016a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168e:	f7ff f9c7 	bl	8000a20 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_RCC_ClockConfig+0x1f4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e054      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2238      	movs	r2, #56	; 0x38
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1ec      	bne.n	800168e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d21e      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2207      	movs	r2, #7
 80016c8:	4393      	bics	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016d4:	f7ff f9a4 	bl	8000a20 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff f99f 	bl	8000a20 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_RCC_ClockConfig+0x1f4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e02c      	b.n	800174c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2207      	movs	r2, #7
 80016f8:	4013      	ands	r3, r2
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2204      	movs	r2, #4
 8001706:	4013      	ands	r3, r2
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_RCC_ClockConfig+0x200>)
 8001710:	4013      	ands	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800171e:	f000 f829 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001722:	0001      	movs	r1, r0
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_ClockConfig+0x1f8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	220f      	movs	r2, #15
 800172c:	401a      	ands	r2, r3
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_RCC_ClockConfig+0x204>)
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	58d3      	ldr	r3, [r2, r3]
 8001734:	221f      	movs	r2, #31
 8001736:	4013      	ands	r3, r2
 8001738:	000a      	movs	r2, r1
 800173a:	40da      	lsrs	r2, r3
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x208>)
 800173e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x20c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff f90f 	bl	8000968 <HAL_InitTick>
 800174a:	0003      	movs	r3, r0
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b004      	add	sp, #16
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40022000 	.word	0x40022000
 8001758:	00001388 	.word	0x00001388
 800175c:	40021000 	.word	0x40021000
 8001760:	fffff0ff 	.word	0xfffff0ff
 8001764:	ffff8fff 	.word	0xffff8fff
 8001768:	08002f14 	.word	0x08002f14
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2238      	movs	r2, #56	; 0x38
 8001780:	4013      	ands	r3, r2
 8001782:	d10f      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0adb      	lsrs	r3, r3, #11
 800178a:	2207      	movs	r2, #7
 800178c:	4013      	ands	r3, r2
 800178e:	2201      	movs	r2, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	4835      	ldr	r0, [pc, #212]	; (8001870 <HAL_RCC_GetSysClockFreq+0xfc>)
 800179a:	f7fe fcc1 	bl	8000120 <__udivsi3>
 800179e:	0003      	movs	r3, r0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	e05d      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2238      	movs	r2, #56	; 0x38
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_GetSysClockFreq+0x100>)
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	e054      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2238      	movs	r2, #56	; 0x38
 80017bc:	4013      	ands	r3, r2
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d138      	bne.n	8001834 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2203      	movs	r2, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	2207      	movs	r2, #7
 80017d4:	4013      	ands	r3, r2
 80017d6:	3301      	adds	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d10d      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	4824      	ldr	r0, [pc, #144]	; (8001874 <HAL_RCC_GetSysClockFreq+0x100>)
 80017e4:	f7fe fc9c 	bl	8000120 <__udivsi3>
 80017e8:	0003      	movs	r3, r0
 80017ea:	0019      	movs	r1, r3
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	227f      	movs	r2, #127	; 0x7f
 80017f4:	4013      	ands	r3, r2
 80017f6:	434b      	muls	r3, r1
 80017f8:	617b      	str	r3, [r7, #20]
        break;
 80017fa:	e00d      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001800:	f7fe fc8e 	bl	8000120 <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	0019      	movs	r1, r3
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	227f      	movs	r2, #127	; 0x7f
 8001810:	4013      	ands	r3, r2
 8001812:	434b      	muls	r3, r1
 8001814:	617b      	str	r3, [r7, #20]
        break;
 8001816:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0f5b      	lsrs	r3, r3, #29
 800181e:	2207      	movs	r2, #7
 8001820:	4013      	ands	r3, r2
 8001822:	3301      	adds	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	6978      	ldr	r0, [r7, #20]
 800182a:	f7fe fc79 	bl	8000120 <__udivsi3>
 800182e:	0003      	movs	r3, r0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	e015      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2238      	movs	r2, #56	; 0x38
 800183a:	4013      	ands	r3, r2
 800183c:	2b20      	cmp	r3, #32
 800183e:	d103      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_RCC_GetSysClockFreq+0xf8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2238      	movs	r2, #56	; 0x38
 800184e:	4013      	ands	r3, r2
 8001850:	2b18      	cmp	r3, #24
 8001852:	d103      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001854:	23fa      	movs	r3, #250	; 0xfa
 8001856:	01db      	lsls	r3, r3, #7
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e001      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b006      	add	sp, #24
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	40021000 	.word	0x40021000
 8001870:	00f42400 	.word	0x00f42400
 8001874:	007a1200 	.word	0x007a1200

08001878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_RCC_GetHCLKFreq+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001890:	f7ff fff2 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 8001894:	0004      	movs	r4, r0
 8001896:	f7ff fb49 	bl	8000f2c <LL_RCC_GetAPB1Prescaler>
 800189a:	0003      	movs	r3, r0
 800189c:	0b1a      	lsrs	r2, r3, #12
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	58d3      	ldr	r3, [r2, r3]
 80018a4:	221f      	movs	r2, #31
 80018a6:	4013      	ands	r3, r2
 80018a8:	40dc      	lsrs	r4, r3
 80018aa:	0023      	movs	r3, r4
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	08002f54 	.word	0x08002f54

080018b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80018c0:	2313      	movs	r3, #19
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018c8:	2312      	movs	r3, #18
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	029b      	lsls	r3, r3, #10
 80018d8:	4013      	ands	r3, r2
 80018da:	d100      	bne.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018dc:	e0a3      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2011      	movs	r0, #17
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	4013      	ands	r3, r2
 80018f0:	d110      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0549      	lsls	r1, r1, #21
 80018fc:	430a      	orrs	r2, r1
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001900:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190e:	183b      	adds	r3, r7, r0
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4b74      	ldr	r3, [pc, #464]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0049      	lsls	r1, r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001922:	f7ff f87d 	bl	8000a20 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800192a:	e00b      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff f878 	bl	8000a20 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d904      	bls.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800193a:	2313      	movs	r3, #19
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2203      	movs	r2, #3
 8001940:	701a      	strb	r2, [r3, #0]
        break;
 8001942:	e005      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d0ed      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001950:	2313      	movs	r3, #19
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d154      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800195a:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800195c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4013      	ands	r3, r2
 8001964:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d019      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	429a      	cmp	r2, r3
 8001974:	d014      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800197c:	4013      	ands	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001984:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0249      	lsls	r1, r1, #9
 800198a:	430a      	orrs	r2, r1
 800198c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001994:	4956      	ldr	r1, [pc, #344]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001996:	400a      	ands	r2, r1
 8001998:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800199a:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d016      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f83a 	bl	8000a20 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b0:	e00c      	b.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f835 	bl	8000a20 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d904      	bls.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80019c2:	2313      	movs	r3, #19
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2203      	movs	r2, #3
 80019c8:	701a      	strb	r2, [r3, #0]
            break;
 80019ca:	e004      	b.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d0ed      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80019d6:	2313      	movs	r3, #19
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	4a41      	ldr	r2, [pc, #260]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80019f4:	e00c      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019f6:	2312      	movs	r3, #18
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	2213      	movs	r2, #19
 80019fc:	18ba      	adds	r2, r7, r2
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e005      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a04:	2312      	movs	r3, #18
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2213      	movs	r2, #19
 8001a0a:	18ba      	adds	r2, r7, r2
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a10:	2311      	movs	r3, #17
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a20:	4935      	ldr	r1, [pc, #212]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d009      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	2203      	movs	r2, #3
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	01db      	lsls	r3, r3, #7
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	0899      	lsrs	r1, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	05db      	lsls	r3, r3, #23
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0249      	lsls	r1, r1, #9
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d016      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0249      	lsls	r1, r1, #9
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ad4:	2312      	movs	r3, #18
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b006      	add	sp, #24
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	fffffcff 	.word	0xfffffcff
 8001af0:	fffeffff 	.word	0xfffeffff
 8001af4:	00001388 	.word	0x00001388
 8001af8:	efffffff 	.word	0xefffffff
 8001afc:	ffffcfff 	.word	0xffffcfff
 8001b00:	ffff3fff 	.word	0xffff3fff

08001b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e046      	b.n	8001ba4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2284      	movs	r2, #132	; 0x84
 8001b1a:	589b      	ldr	r3, [r3, r2]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7fe fde6 	bl	80006fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2284      	movs	r2, #132	; 0x84
 8001b34:	2124      	movs	r1, #36	; 0x24
 8001b36:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f8dc 	bl	8001d08 <UART_SetConfig>
 8001b50:	0003      	movs	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e024      	b.n	8001ba4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 fa39 	bl	8001fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	490d      	ldr	r1, [pc, #52]	; (8001bac <HAL_UART_Init+0xa8>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	212a      	movs	r1, #42	; 0x2a
 8001b86:	438a      	bics	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 fad1 	bl	8002144 <UART_CheckIdleState>
 8001ba2:	0003      	movs	r3, r0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	ffffb7ff 	.word	0xffffb7ff

08001bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2284      	movs	r2, #132	; 0x84
 8001bc4:	589b      	ldr	r3, [r3, r2]
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d000      	beq.n	8001bcc <HAL_UART_Transmit+0x1c>
 8001bca:	e097      	b.n	8001cfc <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_UART_Transmit+0x2a>
 8001bd2:	1dbb      	adds	r3, r7, #6
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08f      	b.n	8001cfe <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	015b      	lsls	r3, r3, #5
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d109      	bne.n	8001bfe <HAL_UART_Transmit+0x4e>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_UART_Transmit+0x5c>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e078      	b.n	8001cfe <HAL_UART_Transmit+0x14e>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	228c      	movs	r2, #140	; 0x8c
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2284      	movs	r2, #132	; 0x84
 8001c20:	2121      	movs	r1, #33	; 0x21
 8001c22:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c24:	f7fe fefc 	bl	8000a20 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1dba      	adds	r2, r7, #6
 8001c30:	2154      	movs	r1, #84	; 0x54
 8001c32:	8812      	ldrh	r2, [r2, #0]
 8001c34:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1dba      	adds	r2, r7, #6
 8001c3a:	2156      	movs	r1, #86	; 0x56
 8001c3c:	8812      	ldrh	r2, [r2, #0]
 8001c3e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	015b      	lsls	r3, r3, #5
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d108      	bne.n	8001c5e <HAL_UART_Transmit+0xae>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e003      	b.n	8001c66 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001c6e:	e02c      	b.n	8001cca <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	0013      	movs	r3, r2
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	f000 faab 	bl	80021d8 <UART_WaitOnFlagUntilTimeout>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e039      	b.n	8001cfe <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	001a      	movs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	05d2      	lsls	r2, r2, #23
 8001c9c:	0dd2      	lsrs	r2, r2, #23
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	e007      	b.n	8001cb8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2256      	movs	r2, #86	; 0x56
 8001cbc:	5a9b      	ldrh	r3, [r3, r2]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2256      	movs	r2, #86	; 0x56
 8001cc8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2256      	movs	r2, #86	; 0x56
 8001cce:	5a9b      	ldrh	r3, [r3, r2]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1cc      	bne.n	8001c70 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	0013      	movs	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2140      	movs	r1, #64	; 0x40
 8001ce4:	f000 fa78 	bl	80021d8 <UART_WaitOnFlagUntilTimeout>
 8001ce8:	1e03      	subs	r3, r0, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e006      	b.n	8001cfe <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2284      	movs	r2, #132	; 0x84
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b008      	add	sp, #32
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d10:	231a      	movs	r3, #26
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4aa1      	ldr	r2, [pc, #644]	; (8001fbc <UART_SetConfig+0x2b4>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a9c      	ldr	r2, [pc, #624]	; (8001fc0 <UART_SetConfig+0x2b8>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a93      	ldr	r2, [pc, #588]	; (8001fc4 <UART_SetConfig+0x2bc>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a89      	ldr	r2, [pc, #548]	; (8001fc8 <UART_SetConfig+0x2c0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d127      	bne.n	8001df6 <UART_SetConfig+0xee>
 8001da6:	4b89      	ldr	r3, [pc, #548]	; (8001fcc <UART_SetConfig+0x2c4>)
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	2203      	movs	r2, #3
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d017      	beq.n	8001de2 <UART_SetConfig+0xda>
 8001db2:	d81b      	bhi.n	8001dec <UART_SetConfig+0xe4>
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d00a      	beq.n	8001dce <UART_SetConfig+0xc6>
 8001db8:	d818      	bhi.n	8001dec <UART_SetConfig+0xe4>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <UART_SetConfig+0xbc>
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d00a      	beq.n	8001dd8 <UART_SetConfig+0xd0>
 8001dc2:	e013      	b.n	8001dec <UART_SetConfig+0xe4>
 8001dc4:	231b      	movs	r3, #27
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e021      	b.n	8001e12 <UART_SetConfig+0x10a>
 8001dce:	231b      	movs	r3, #27
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e01c      	b.n	8001e12 <UART_SetConfig+0x10a>
 8001dd8:	231b      	movs	r3, #27
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2204      	movs	r2, #4
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e017      	b.n	8001e12 <UART_SetConfig+0x10a>
 8001de2:	231b      	movs	r3, #27
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2208      	movs	r2, #8
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e012      	b.n	8001e12 <UART_SetConfig+0x10a>
 8001dec:	231b      	movs	r3, #27
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2210      	movs	r2, #16
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e00d      	b.n	8001e12 <UART_SetConfig+0x10a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <UART_SetConfig+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d104      	bne.n	8001e0a <UART_SetConfig+0x102>
 8001e00:	231b      	movs	r3, #27
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e003      	b.n	8001e12 <UART_SetConfig+0x10a>
 8001e0a:	231b      	movs	r3, #27
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2210      	movs	r2, #16
 8001e10:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d000      	beq.n	8001e20 <UART_SetConfig+0x118>
 8001e1e:	e065      	b.n	8001eec <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8001e20:	231b      	movs	r3, #27
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d015      	beq.n	8001e56 <UART_SetConfig+0x14e>
 8001e2a:	dc18      	bgt.n	8001e5e <UART_SetConfig+0x156>
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d00d      	beq.n	8001e4c <UART_SetConfig+0x144>
 8001e30:	dc15      	bgt.n	8001e5e <UART_SetConfig+0x156>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <UART_SetConfig+0x134>
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d005      	beq.n	8001e46 <UART_SetConfig+0x13e>
 8001e3a:	e010      	b.n	8001e5e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e3c:	f7ff fd26 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8001e40:	0003      	movs	r3, r0
 8001e42:	617b      	str	r3, [r7, #20]
        break;
 8001e44:	e012      	b.n	8001e6c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <UART_SetConfig+0x2cc>)
 8001e48:	617b      	str	r3, [r7, #20]
        break;
 8001e4a:	e00f      	b.n	8001e6c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e4c:	f7ff fc92 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001e50:	0003      	movs	r3, r0
 8001e52:	617b      	str	r3, [r7, #20]
        break;
 8001e54:	e00a      	b.n	8001e6c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	617b      	str	r3, [r7, #20]
        break;
 8001e5c:	e006      	b.n	8001e6c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001e62:	231a      	movs	r3, #26
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
        break;
 8001e6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d100      	bne.n	8001e74 <UART_SetConfig+0x16c>
 8001e72:	e08d      	b.n	8001f90 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <UART_SetConfig+0x2d0>)
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	5ad3      	ldrh	r3, [r2, r3]
 8001e7e:	0019      	movs	r1, r3
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f7fe f94d 	bl	8000120 <__udivsi3>
 8001e86:	0003      	movs	r3, r0
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	18d2      	adds	r2, r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0019      	movs	r1, r3
 8001e98:	0010      	movs	r0, r2
 8001e9a:	f7fe f941 	bl	8000120 <__udivsi3>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d91c      	bls.n	8001ee2 <UART_SetConfig+0x1da>
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d217      	bcs.n	8001ee2 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	200e      	movs	r0, #14
 8001eb8:	183b      	adds	r3, r7, r0
 8001eba:	210f      	movs	r1, #15
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	183a      	adds	r2, r7, r0
 8001ed0:	8812      	ldrh	r2, [r2, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	183a      	adds	r2, r7, r0
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	e056      	b.n	8001f90 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001ee2:	231a      	movs	r3, #26
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e051      	b.n	8001f90 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001eec:	231b      	movs	r3, #27
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d015      	beq.n	8001f22 <UART_SetConfig+0x21a>
 8001ef6:	dc18      	bgt.n	8001f2a <UART_SetConfig+0x222>
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d00d      	beq.n	8001f18 <UART_SetConfig+0x210>
 8001efc:	dc15      	bgt.n	8001f2a <UART_SetConfig+0x222>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <UART_SetConfig+0x200>
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d005      	beq.n	8001f12 <UART_SetConfig+0x20a>
 8001f06:	e010      	b.n	8001f2a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f08:	f7ff fcc0 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	617b      	str	r3, [r7, #20]
        break;
 8001f10:	e012      	b.n	8001f38 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <UART_SetConfig+0x2cc>)
 8001f14:	617b      	str	r3, [r7, #20]
        break;
 8001f16:	e00f      	b.n	8001f38 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f18:	f7ff fc2c 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	617b      	str	r3, [r7, #20]
        break;
 8001f20:	e00a      	b.n	8001f38 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	617b      	str	r3, [r7, #20]
        break;
 8001f28:	e006      	b.n	8001f38 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001f2e:	231a      	movs	r3, #26
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
        break;
 8001f36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d028      	beq.n	8001f90 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <UART_SetConfig+0x2d0>)
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	5ad3      	ldrh	r3, [r2, r3]
 8001f48:	0019      	movs	r1, r3
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7fe f8e8 	bl	8000120 <__udivsi3>
 8001f50:	0003      	movs	r3, r0
 8001f52:	001a      	movs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	18d2      	adds	r2, r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0019      	movs	r1, r3
 8001f62:	0010      	movs	r0, r2
 8001f64:	f7fe f8dc 	bl	8000120 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d90a      	bls.n	8001f88 <UART_SetConfig+0x280>
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d205      	bcs.n	8001f88 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	e003      	b.n	8001f90 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001f88:	231a      	movs	r3, #26
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	226a      	movs	r2, #106	; 0x6a
 8001f94:	2101      	movs	r1, #1
 8001f96:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2268      	movs	r2, #104	; 0x68
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8001fac:	231a      	movs	r3, #26
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	cfff69f3 	.word	0xcfff69f3
 8001fc0:	ffffcfff 	.word	0xffffcfff
 8001fc4:	11fff4ff 	.word	0x11fff4ff
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	08002f74 	.word	0x08002f74

08001fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	d00b      	beq.n	8002006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <UART_AdvFeatureConfig+0x144>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d00b      	beq.n	8002028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4a43      	ldr	r2, [pc, #268]	; (8002124 <UART_AdvFeatureConfig+0x148>)
 8002018:	4013      	ands	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2204      	movs	r2, #4
 800202e:	4013      	ands	r3, r2
 8002030:	d00b      	beq.n	800204a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <UART_AdvFeatureConfig+0x14c>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	2208      	movs	r2, #8
 8002050:	4013      	ands	r3, r2
 8002052:	d00b      	beq.n	800206c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a34      	ldr	r2, [pc, #208]	; (800212c <UART_AdvFeatureConfig+0x150>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	2210      	movs	r2, #16
 8002072:	4013      	ands	r3, r2
 8002074:	d00b      	beq.n	800208e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <UART_AdvFeatureConfig+0x154>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	2220      	movs	r2, #32
 8002094:	4013      	ands	r3, r2
 8002096:	d00b      	beq.n	80020b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a25      	ldr	r2, [pc, #148]	; (8002134 <UART_AdvFeatureConfig+0x158>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	4013      	ands	r3, r2
 80020b8:	d01d      	beq.n	80020f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <UART_AdvFeatureConfig+0x15c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	035b      	lsls	r3, r3, #13
 80020da:	429a      	cmp	r2, r3
 80020dc:	d10b      	bne.n	80020f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a15      	ldr	r2, [pc, #84]	; (800213c <UART_AdvFeatureConfig+0x160>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	4013      	ands	r3, r2
 80020fe:	d00b      	beq.n	8002118 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <UART_AdvFeatureConfig+0x164>)
 8002108:	4013      	ands	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]
  }
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}
 8002120:	fffdffff 	.word	0xfffdffff
 8002124:	fffeffff 	.word	0xfffeffff
 8002128:	fffbffff 	.word	0xfffbffff
 800212c:	ffff7fff 	.word	0xffff7fff
 8002130:	ffffefff 	.word	0xffffefff
 8002134:	ffffdfff 	.word	0xffffdfff
 8002138:	ffefffff 	.word	0xffefffff
 800213c:	ff9fffff 	.word	0xff9fffff
 8002140:	fff7ffff 	.word	0xfff7ffff

08002144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	228c      	movs	r2, #140	; 0x8c
 8002150:	2100      	movs	r1, #0
 8002152:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002154:	f7fe fc64 	bl	8000a20 <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2208      	movs	r2, #8
 8002164:	4013      	ands	r3, r2
 8002166:	2b08      	cmp	r3, #8
 8002168:	d10c      	bne.n	8002184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	0391      	lsls	r1, r2, #14
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <UART_CheckIdleState+0x90>)
 8002174:	9200      	str	r2, [sp, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	f000 f82e 	bl	80021d8 <UART_WaitOnFlagUntilTimeout>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d001      	beq.n	8002184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e023      	b.n	80021cc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2204      	movs	r2, #4
 800218c:	4013      	ands	r3, r2
 800218e:	2b04      	cmp	r3, #4
 8002190:	d10c      	bne.n	80021ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	03d1      	lsls	r1, r2, #15
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <UART_CheckIdleState+0x90>)
 800219c:	9200      	str	r2, [sp, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	f000 f81a 	bl	80021d8 <UART_WaitOnFlagUntilTimeout>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e00f      	b.n	80021cc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2284      	movs	r2, #132	; 0x84
 80021b0:	2120      	movs	r1, #32
 80021b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2288      	movs	r2, #136	; 0x88
 80021b8:	2120      	movs	r1, #32
 80021ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	01ffffff 	.word	0x01ffffff

080021d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b094      	sub	sp, #80	; 0x50
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e8:	e0a7      	b.n	800233a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ec:	3301      	adds	r3, #1
 80021ee:	d100      	bne.n	80021f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80021f0:	e0a3      	b.n	800233a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7fe fc15 	bl	8000a20 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <UART_WaitOnFlagUntilTimeout+0x30>
 8002202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002204:	2b00      	cmp	r3, #0
 8002206:	d13f      	bne.n	8002288 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002208:	f3ef 8310 	mrs	r3, PRIMASK
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
 8002212:	2301      	movs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	f383 8810 	msr	PRIMASK, r3
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	494e      	ldr	r1, [pc, #312]	; (8002364 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800222a:	400a      	ands	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	f383 8810 	msr	PRIMASK, r3
}
 8002238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800223a:	f3ef 8310 	mrs	r3, PRIMASK
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
 8002244:	2301      	movs	r3, #1
 8002246:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	f383 8810 	msr	PRIMASK, r3
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	438a      	bics	r2, r1
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002266:	f383 8810 	msr	PRIMASK, r3
}
 800226a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2284      	movs	r2, #132	; 0x84
 8002270:	2120      	movs	r1, #32
 8002272:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2288      	movs	r2, #136	; 0x88
 8002278:	2120      	movs	r1, #32
 800227a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e069      	b.n	800235c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d052      	beq.n	800233a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	401a      	ands	r2, r3
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d148      	bne.n	800233a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8310 	mrs	r3, PRIMASK
 80022b6:	613b      	str	r3, [r7, #16]
  return(result);
 80022b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80022ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f383 8810 	msr	PRIMASK, r3
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4924      	ldr	r1, [pc, #144]	; (8002364 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f383 8810 	msr	PRIMASK, r3
}
 80022e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e4:	f3ef 8310 	mrs	r3, PRIMASK
 80022e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ee:	2301      	movs	r3, #1
 80022f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f383 8810 	msr	PRIMASK, r3
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	438a      	bics	r2, r1
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f383 8810 	msr	PRIMASK, r3
}
 8002314:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2284      	movs	r2, #132	; 0x84
 800231a:	2120      	movs	r1, #32
 800231c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2288      	movs	r2, #136	; 0x88
 8002322:	2120      	movs	r1, #32
 8002324:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	228c      	movs	r2, #140	; 0x8c
 800232a:	2120      	movs	r1, #32
 800232c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e010      	b.n	800235c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	4013      	ands	r3, r2
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	425a      	negs	r2, r3
 800234a:	4153      	adcs	r3, r2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	001a      	movs	r2, r3
 8002350:	1dfb      	adds	r3, r7, #7
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d100      	bne.n	800235a <UART_WaitOnFlagUntilTimeout+0x182>
 8002358:	e747      	b.n	80021ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b014      	add	sp, #80	; 0x50
 8002362:	bd80      	pop	{r7, pc}
 8002364:	fffffe5f 	.word	0xfffffe5f

08002368 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_UARTEx_DisableFifoMode+0x16>
 800237a:	2302      	movs	r3, #2
 800237c:	e027      	b.n	80023ce <HAL_UARTEx_DisableFifoMode+0x66>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2284      	movs	r2, #132	; 0x84
 800238a:	2124      	movs	r1, #36	; 0x24
 800238c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	438a      	bics	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2284      	movs	r2, #132	; 0x84
 80023c0:	2120      	movs	r1, #32
 80023c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	dfffffff 	.word	0xdfffffff

080023dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e02e      	b.n	8002452 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2284      	movs	r2, #132	; 0x84
 8002400:	2124      	movs	r1, #36	; 0x24
 8002402:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	08d9      	lsrs	r1, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f854 	bl	80024e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2284      	movs	r2, #132	; 0x84
 8002444:	2120      	movs	r1, #32
 8002446:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002470:	2302      	movs	r3, #2
 8002472:	e02f      	b.n	80024d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2284      	movs	r2, #132	; 0x84
 8002480:	2124      	movs	r1, #36	; 0x24
 8002482:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f813 	bl	80024e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2284      	movs	r2, #132	; 0x84
 80024c6:	2120      	movs	r1, #32
 80024c8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	f1ffffff 	.word	0xf1ffffff

080024e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	226a      	movs	r2, #106	; 0x6a
 80024f4:	2101      	movs	r1, #1
 80024f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2268      	movs	r2, #104	; 0x68
 80024fc:	2101      	movs	r1, #1
 80024fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002500:	e043      	b.n	800258a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002502:	260f      	movs	r6, #15
 8002504:	19bb      	adds	r3, r7, r6
 8002506:	2208      	movs	r2, #8
 8002508:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800250a:	200e      	movs	r0, #14
 800250c:	183b      	adds	r3, r7, r0
 800250e:	2208      	movs	r2, #8
 8002510:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	0e5b      	lsrs	r3, r3, #25
 800251a:	b2da      	uxtb	r2, r3
 800251c:	240d      	movs	r4, #13
 800251e:	193b      	adds	r3, r7, r4
 8002520:	2107      	movs	r1, #7
 8002522:	400a      	ands	r2, r1
 8002524:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	0f5b      	lsrs	r3, r3, #29
 800252e:	b2da      	uxtb	r2, r3
 8002530:	250c      	movs	r5, #12
 8002532:	197b      	adds	r3, r7, r5
 8002534:	2107      	movs	r1, #7
 8002536:	400a      	ands	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800253a:	183b      	adds	r3, r7, r0
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	197a      	adds	r2, r7, r5
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	4914      	ldr	r1, [pc, #80]	; (8002594 <UARTEx_SetNbDataToProcess+0xb4>)
 8002544:	5c8a      	ldrb	r2, [r1, r2]
 8002546:	435a      	muls	r2, r3
 8002548:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800254a:	197b      	adds	r3, r7, r5
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <UARTEx_SetNbDataToProcess+0xb8>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002552:	0019      	movs	r1, r3
 8002554:	f7fd fe6e 	bl	8000234 <__divsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	b299      	uxth	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	226a      	movs	r2, #106	; 0x6a
 8002560:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002562:	19bb      	adds	r3, r7, r6
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	193a      	adds	r2, r7, r4
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	490a      	ldr	r1, [pc, #40]	; (8002594 <UARTEx_SetNbDataToProcess+0xb4>)
 800256c:	5c8a      	ldrb	r2, [r1, r2]
 800256e:	435a      	muls	r2, r3
 8002570:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002572:	193b      	adds	r3, r7, r4
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <UARTEx_SetNbDataToProcess+0xb8>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800257a:	0019      	movs	r1, r3
 800257c:	f7fd fe5a 	bl	8000234 <__divsi3>
 8002580:	0003      	movs	r3, r0
 8002582:	b299      	uxth	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2268      	movs	r2, #104	; 0x68
 8002588:	5299      	strh	r1, [r3, r2]
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b005      	add	sp, #20
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	08002f8c 	.word	0x08002f8c
 8002598:	08002f94 	.word	0x08002f94

0800259c <__errno>:
 800259c:	4b01      	ldr	r3, [pc, #4]	; (80025a4 <__errno+0x8>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	4770      	bx	lr
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	2000000c 	.word	0x2000000c

080025a8 <__libc_init_array>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	2600      	movs	r6, #0
 80025ac:	4d0c      	ldr	r5, [pc, #48]	; (80025e0 <__libc_init_array+0x38>)
 80025ae:	4c0d      	ldr	r4, [pc, #52]	; (80025e4 <__libc_init_array+0x3c>)
 80025b0:	1b64      	subs	r4, r4, r5
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	42a6      	cmp	r6, r4
 80025b6:	d109      	bne.n	80025cc <__libc_init_array+0x24>
 80025b8:	2600      	movs	r6, #0
 80025ba:	f000 fc8b 	bl	8002ed4 <_init>
 80025be:	4d0a      	ldr	r5, [pc, #40]	; (80025e8 <__libc_init_array+0x40>)
 80025c0:	4c0a      	ldr	r4, [pc, #40]	; (80025ec <__libc_init_array+0x44>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	42a6      	cmp	r6, r4
 80025c8:	d105      	bne.n	80025d6 <__libc_init_array+0x2e>
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	00b3      	lsls	r3, r6, #2
 80025ce:	58eb      	ldr	r3, [r5, r3]
 80025d0:	4798      	blx	r3
 80025d2:	3601      	adds	r6, #1
 80025d4:	e7ee      	b.n	80025b4 <__libc_init_array+0xc>
 80025d6:	00b3      	lsls	r3, r6, #2
 80025d8:	58eb      	ldr	r3, [r5, r3]
 80025da:	4798      	blx	r3
 80025dc:	3601      	adds	r6, #1
 80025de:	e7f2      	b.n	80025c6 <__libc_init_array+0x1e>
 80025e0:	08002fd0 	.word	0x08002fd0
 80025e4:	08002fd0 	.word	0x08002fd0
 80025e8:	08002fd0 	.word	0x08002fd0
 80025ec:	08002fd4 	.word	0x08002fd4

080025f0 <memset>:
 80025f0:	0003      	movs	r3, r0
 80025f2:	1882      	adds	r2, r0, r2
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d100      	bne.n	80025fa <memset+0xa>
 80025f8:	4770      	bx	lr
 80025fa:	7019      	strb	r1, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	e7f9      	b.n	80025f4 <memset+0x4>

08002600 <siprintf>:
 8002600:	b40e      	push	{r1, r2, r3}
 8002602:	b500      	push	{lr}
 8002604:	490b      	ldr	r1, [pc, #44]	; (8002634 <siprintf+0x34>)
 8002606:	b09c      	sub	sp, #112	; 0x70
 8002608:	ab1d      	add	r3, sp, #116	; 0x74
 800260a:	9002      	str	r0, [sp, #8]
 800260c:	9006      	str	r0, [sp, #24]
 800260e:	9107      	str	r1, [sp, #28]
 8002610:	9104      	str	r1, [sp, #16]
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <siprintf+0x38>)
 8002614:	4909      	ldr	r1, [pc, #36]	; (800263c <siprintf+0x3c>)
 8002616:	cb04      	ldmia	r3!, {r2}
 8002618:	9105      	str	r1, [sp, #20]
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	a902      	add	r1, sp, #8
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	f000 f870 	bl	8002704 <_svfiprintf_r>
 8002624:	2300      	movs	r3, #0
 8002626:	9a02      	ldr	r2, [sp, #8]
 8002628:	7013      	strb	r3, [r2, #0]
 800262a:	b01c      	add	sp, #112	; 0x70
 800262c:	bc08      	pop	{r3}
 800262e:	b003      	add	sp, #12
 8002630:	4718      	bx	r3
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	7fffffff 	.word	0x7fffffff
 8002638:	2000000c 	.word	0x2000000c
 800263c:	ffff0208 	.word	0xffff0208

08002640 <__ssputs_r>:
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	688e      	ldr	r6, [r1, #8]
 8002644:	b085      	sub	sp, #20
 8002646:	0007      	movs	r7, r0
 8002648:	000c      	movs	r4, r1
 800264a:	9203      	str	r2, [sp, #12]
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	429e      	cmp	r6, r3
 8002650:	d83c      	bhi.n	80026cc <__ssputs_r+0x8c>
 8002652:	2390      	movs	r3, #144	; 0x90
 8002654:	898a      	ldrh	r2, [r1, #12]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	421a      	tst	r2, r3
 800265a:	d034      	beq.n	80026c6 <__ssputs_r+0x86>
 800265c:	6909      	ldr	r1, [r1, #16]
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	6960      	ldr	r0, [r4, #20]
 8002662:	1a5b      	subs	r3, r3, r1
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	2303      	movs	r3, #3
 8002668:	4343      	muls	r3, r0
 800266a:	0fdd      	lsrs	r5, r3, #31
 800266c:	18ed      	adds	r5, r5, r3
 800266e:	9b01      	ldr	r3, [sp, #4]
 8002670:	9802      	ldr	r0, [sp, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	181b      	adds	r3, r3, r0
 8002676:	106d      	asrs	r5, r5, #1
 8002678:	42ab      	cmp	r3, r5
 800267a:	d900      	bls.n	800267e <__ssputs_r+0x3e>
 800267c:	001d      	movs	r5, r3
 800267e:	0553      	lsls	r3, r2, #21
 8002680:	d532      	bpl.n	80026e8 <__ssputs_r+0xa8>
 8002682:	0029      	movs	r1, r5
 8002684:	0038      	movs	r0, r7
 8002686:	f000 fb53 	bl	8002d30 <_malloc_r>
 800268a:	1e06      	subs	r6, r0, #0
 800268c:	d109      	bne.n	80026a2 <__ssputs_r+0x62>
 800268e:	230c      	movs	r3, #12
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	2340      	movs	r3, #64	; 0x40
 8002694:	2001      	movs	r0, #1
 8002696:	89a2      	ldrh	r2, [r4, #12]
 8002698:	4240      	negs	r0, r0
 800269a:	4313      	orrs	r3, r2
 800269c:	81a3      	strh	r3, [r4, #12]
 800269e:	b005      	add	sp, #20
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	9a02      	ldr	r2, [sp, #8]
 80026a4:	6921      	ldr	r1, [r4, #16]
 80026a6:	f000 faba 	bl	8002c1e <memcpy>
 80026aa:	89a3      	ldrh	r3, [r4, #12]
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <__ssputs_r+0xc0>)
 80026ae:	401a      	ands	r2, r3
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	4313      	orrs	r3, r2
 80026b4:	81a3      	strh	r3, [r4, #12]
 80026b6:	9b02      	ldr	r3, [sp, #8]
 80026b8:	6126      	str	r6, [r4, #16]
 80026ba:	18f6      	adds	r6, r6, r3
 80026bc:	6026      	str	r6, [r4, #0]
 80026be:	6165      	str	r5, [r4, #20]
 80026c0:	9e01      	ldr	r6, [sp, #4]
 80026c2:	1aed      	subs	r5, r5, r3
 80026c4:	60a5      	str	r5, [r4, #8]
 80026c6:	9b01      	ldr	r3, [sp, #4]
 80026c8:	429e      	cmp	r6, r3
 80026ca:	d900      	bls.n	80026ce <__ssputs_r+0x8e>
 80026cc:	9e01      	ldr	r6, [sp, #4]
 80026ce:	0032      	movs	r2, r6
 80026d0:	9903      	ldr	r1, [sp, #12]
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	f000 faac 	bl	8002c30 <memmove>
 80026d8:	68a3      	ldr	r3, [r4, #8]
 80026da:	2000      	movs	r0, #0
 80026dc:	1b9b      	subs	r3, r3, r6
 80026de:	60a3      	str	r3, [r4, #8]
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	199e      	adds	r6, r3, r6
 80026e4:	6026      	str	r6, [r4, #0]
 80026e6:	e7da      	b.n	800269e <__ssputs_r+0x5e>
 80026e8:	002a      	movs	r2, r5
 80026ea:	0038      	movs	r0, r7
 80026ec:	f000 fb96 	bl	8002e1c <_realloc_r>
 80026f0:	1e06      	subs	r6, r0, #0
 80026f2:	d1e0      	bne.n	80026b6 <__ssputs_r+0x76>
 80026f4:	0038      	movs	r0, r7
 80026f6:	6921      	ldr	r1, [r4, #16]
 80026f8:	f000 faae 	bl	8002c58 <_free_r>
 80026fc:	e7c7      	b.n	800268e <__ssputs_r+0x4e>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	fffffb7f 	.word	0xfffffb7f

08002704 <_svfiprintf_r>:
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b0a1      	sub	sp, #132	; 0x84
 8002708:	9003      	str	r0, [sp, #12]
 800270a:	001d      	movs	r5, r3
 800270c:	898b      	ldrh	r3, [r1, #12]
 800270e:	000f      	movs	r7, r1
 8002710:	0016      	movs	r6, r2
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	d511      	bpl.n	800273a <_svfiprintf_r+0x36>
 8002716:	690b      	ldr	r3, [r1, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10e      	bne.n	800273a <_svfiprintf_r+0x36>
 800271c:	2140      	movs	r1, #64	; 0x40
 800271e:	f000 fb07 	bl	8002d30 <_malloc_r>
 8002722:	6038      	str	r0, [r7, #0]
 8002724:	6138      	str	r0, [r7, #16]
 8002726:	2800      	cmp	r0, #0
 8002728:	d105      	bne.n	8002736 <_svfiprintf_r+0x32>
 800272a:	230c      	movs	r3, #12
 800272c:	9a03      	ldr	r2, [sp, #12]
 800272e:	3801      	subs	r0, #1
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	b021      	add	sp, #132	; 0x84
 8002734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	2300      	movs	r3, #0
 800273c:	ac08      	add	r4, sp, #32
 800273e:	6163      	str	r3, [r4, #20]
 8002740:	3320      	adds	r3, #32
 8002742:	7663      	strb	r3, [r4, #25]
 8002744:	3310      	adds	r3, #16
 8002746:	76a3      	strb	r3, [r4, #26]
 8002748:	9507      	str	r5, [sp, #28]
 800274a:	0035      	movs	r5, r6
 800274c:	782b      	ldrb	r3, [r5, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <_svfiprintf_r+0x52>
 8002752:	2b25      	cmp	r3, #37	; 0x25
 8002754:	d147      	bne.n	80027e6 <_svfiprintf_r+0xe2>
 8002756:	1bab      	subs	r3, r5, r6
 8002758:	9305      	str	r3, [sp, #20]
 800275a:	42b5      	cmp	r5, r6
 800275c:	d00c      	beq.n	8002778 <_svfiprintf_r+0x74>
 800275e:	0032      	movs	r2, r6
 8002760:	0039      	movs	r1, r7
 8002762:	9803      	ldr	r0, [sp, #12]
 8002764:	f7ff ff6c 	bl	8002640 <__ssputs_r>
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d100      	bne.n	800276e <_svfiprintf_r+0x6a>
 800276c:	e0ae      	b.n	80028cc <_svfiprintf_r+0x1c8>
 800276e:	6962      	ldr	r2, [r4, #20]
 8002770:	9b05      	ldr	r3, [sp, #20]
 8002772:	4694      	mov	ip, r2
 8002774:	4463      	add	r3, ip
 8002776:	6163      	str	r3, [r4, #20]
 8002778:	782b      	ldrb	r3, [r5, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d100      	bne.n	8002780 <_svfiprintf_r+0x7c>
 800277e:	e0a5      	b.n	80028cc <_svfiprintf_r+0x1c8>
 8002780:	2201      	movs	r2, #1
 8002782:	2300      	movs	r3, #0
 8002784:	4252      	negs	r2, r2
 8002786:	6062      	str	r2, [r4, #4]
 8002788:	a904      	add	r1, sp, #16
 800278a:	3254      	adds	r2, #84	; 0x54
 800278c:	1852      	adds	r2, r2, r1
 800278e:	1c6e      	adds	r6, r5, #1
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	60e3      	str	r3, [r4, #12]
 8002794:	60a3      	str	r3, [r4, #8]
 8002796:	7013      	strb	r3, [r2, #0]
 8002798:	65a3      	str	r3, [r4, #88]	; 0x58
 800279a:	2205      	movs	r2, #5
 800279c:	7831      	ldrb	r1, [r6, #0]
 800279e:	4854      	ldr	r0, [pc, #336]	; (80028f0 <_svfiprintf_r+0x1ec>)
 80027a0:	f000 fa32 	bl	8002c08 <memchr>
 80027a4:	1c75      	adds	r5, r6, #1
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d11f      	bne.n	80027ea <_svfiprintf_r+0xe6>
 80027aa:	6822      	ldr	r2, [r4, #0]
 80027ac:	06d3      	lsls	r3, r2, #27
 80027ae:	d504      	bpl.n	80027ba <_svfiprintf_r+0xb6>
 80027b0:	2353      	movs	r3, #83	; 0x53
 80027b2:	a904      	add	r1, sp, #16
 80027b4:	185b      	adds	r3, r3, r1
 80027b6:	2120      	movs	r1, #32
 80027b8:	7019      	strb	r1, [r3, #0]
 80027ba:	0713      	lsls	r3, r2, #28
 80027bc:	d504      	bpl.n	80027c8 <_svfiprintf_r+0xc4>
 80027be:	2353      	movs	r3, #83	; 0x53
 80027c0:	a904      	add	r1, sp, #16
 80027c2:	185b      	adds	r3, r3, r1
 80027c4:	212b      	movs	r1, #43	; 0x2b
 80027c6:	7019      	strb	r1, [r3, #0]
 80027c8:	7833      	ldrb	r3, [r6, #0]
 80027ca:	2b2a      	cmp	r3, #42	; 0x2a
 80027cc:	d016      	beq.n	80027fc <_svfiprintf_r+0xf8>
 80027ce:	0035      	movs	r5, r6
 80027d0:	2100      	movs	r1, #0
 80027d2:	200a      	movs	r0, #10
 80027d4:	68e3      	ldr	r3, [r4, #12]
 80027d6:	782a      	ldrb	r2, [r5, #0]
 80027d8:	1c6e      	adds	r6, r5, #1
 80027da:	3a30      	subs	r2, #48	; 0x30
 80027dc:	2a09      	cmp	r2, #9
 80027de:	d94e      	bls.n	800287e <_svfiprintf_r+0x17a>
 80027e0:	2900      	cmp	r1, #0
 80027e2:	d111      	bne.n	8002808 <_svfiprintf_r+0x104>
 80027e4:	e017      	b.n	8002816 <_svfiprintf_r+0x112>
 80027e6:	3501      	adds	r5, #1
 80027e8:	e7b0      	b.n	800274c <_svfiprintf_r+0x48>
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <_svfiprintf_r+0x1ec>)
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	1ac0      	subs	r0, r0, r3
 80027f0:	2301      	movs	r3, #1
 80027f2:	4083      	lsls	r3, r0
 80027f4:	4313      	orrs	r3, r2
 80027f6:	002e      	movs	r6, r5
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	e7ce      	b.n	800279a <_svfiprintf_r+0x96>
 80027fc:	9b07      	ldr	r3, [sp, #28]
 80027fe:	1d19      	adds	r1, r3, #4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	9107      	str	r1, [sp, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db01      	blt.n	800280c <_svfiprintf_r+0x108>
 8002808:	930b      	str	r3, [sp, #44]	; 0x2c
 800280a:	e004      	b.n	8002816 <_svfiprintf_r+0x112>
 800280c:	425b      	negs	r3, r3
 800280e:	60e3      	str	r3, [r4, #12]
 8002810:	2302      	movs	r3, #2
 8002812:	4313      	orrs	r3, r2
 8002814:	6023      	str	r3, [r4, #0]
 8002816:	782b      	ldrb	r3, [r5, #0]
 8002818:	2b2e      	cmp	r3, #46	; 0x2e
 800281a:	d10a      	bne.n	8002832 <_svfiprintf_r+0x12e>
 800281c:	786b      	ldrb	r3, [r5, #1]
 800281e:	2b2a      	cmp	r3, #42	; 0x2a
 8002820:	d135      	bne.n	800288e <_svfiprintf_r+0x18a>
 8002822:	9b07      	ldr	r3, [sp, #28]
 8002824:	3502      	adds	r5, #2
 8002826:	1d1a      	adds	r2, r3, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	9207      	str	r2, [sp, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db2b      	blt.n	8002888 <_svfiprintf_r+0x184>
 8002830:	9309      	str	r3, [sp, #36]	; 0x24
 8002832:	4e30      	ldr	r6, [pc, #192]	; (80028f4 <_svfiprintf_r+0x1f0>)
 8002834:	2203      	movs	r2, #3
 8002836:	0030      	movs	r0, r6
 8002838:	7829      	ldrb	r1, [r5, #0]
 800283a:	f000 f9e5 	bl	8002c08 <memchr>
 800283e:	2800      	cmp	r0, #0
 8002840:	d006      	beq.n	8002850 <_svfiprintf_r+0x14c>
 8002842:	2340      	movs	r3, #64	; 0x40
 8002844:	1b80      	subs	r0, r0, r6
 8002846:	4083      	lsls	r3, r0
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	3501      	adds	r5, #1
 800284c:	4313      	orrs	r3, r2
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	7829      	ldrb	r1, [r5, #0]
 8002852:	2206      	movs	r2, #6
 8002854:	4828      	ldr	r0, [pc, #160]	; (80028f8 <_svfiprintf_r+0x1f4>)
 8002856:	1c6e      	adds	r6, r5, #1
 8002858:	7621      	strb	r1, [r4, #24]
 800285a:	f000 f9d5 	bl	8002c08 <memchr>
 800285e:	2800      	cmp	r0, #0
 8002860:	d03c      	beq.n	80028dc <_svfiprintf_r+0x1d8>
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <_svfiprintf_r+0x1f8>)
 8002864:	2b00      	cmp	r3, #0
 8002866:	d125      	bne.n	80028b4 <_svfiprintf_r+0x1b0>
 8002868:	2207      	movs	r2, #7
 800286a:	9b07      	ldr	r3, [sp, #28]
 800286c:	3307      	adds	r3, #7
 800286e:	4393      	bics	r3, r2
 8002870:	3308      	adds	r3, #8
 8002872:	9307      	str	r3, [sp, #28]
 8002874:	6963      	ldr	r3, [r4, #20]
 8002876:	9a04      	ldr	r2, [sp, #16]
 8002878:	189b      	adds	r3, r3, r2
 800287a:	6163      	str	r3, [r4, #20]
 800287c:	e765      	b.n	800274a <_svfiprintf_r+0x46>
 800287e:	4343      	muls	r3, r0
 8002880:	0035      	movs	r5, r6
 8002882:	2101      	movs	r1, #1
 8002884:	189b      	adds	r3, r3, r2
 8002886:	e7a6      	b.n	80027d6 <_svfiprintf_r+0xd2>
 8002888:	2301      	movs	r3, #1
 800288a:	425b      	negs	r3, r3
 800288c:	e7d0      	b.n	8002830 <_svfiprintf_r+0x12c>
 800288e:	2300      	movs	r3, #0
 8002890:	200a      	movs	r0, #10
 8002892:	001a      	movs	r2, r3
 8002894:	3501      	adds	r5, #1
 8002896:	6063      	str	r3, [r4, #4]
 8002898:	7829      	ldrb	r1, [r5, #0]
 800289a:	1c6e      	adds	r6, r5, #1
 800289c:	3930      	subs	r1, #48	; 0x30
 800289e:	2909      	cmp	r1, #9
 80028a0:	d903      	bls.n	80028aa <_svfiprintf_r+0x1a6>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0c5      	beq.n	8002832 <_svfiprintf_r+0x12e>
 80028a6:	9209      	str	r2, [sp, #36]	; 0x24
 80028a8:	e7c3      	b.n	8002832 <_svfiprintf_r+0x12e>
 80028aa:	4342      	muls	r2, r0
 80028ac:	0035      	movs	r5, r6
 80028ae:	2301      	movs	r3, #1
 80028b0:	1852      	adds	r2, r2, r1
 80028b2:	e7f1      	b.n	8002898 <_svfiprintf_r+0x194>
 80028b4:	ab07      	add	r3, sp, #28
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	003a      	movs	r2, r7
 80028ba:	0021      	movs	r1, r4
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_svfiprintf_r+0x1fc>)
 80028be:	9803      	ldr	r0, [sp, #12]
 80028c0:	e000      	b.n	80028c4 <_svfiprintf_r+0x1c0>
 80028c2:	bf00      	nop
 80028c4:	9004      	str	r0, [sp, #16]
 80028c6:	9b04      	ldr	r3, [sp, #16]
 80028c8:	3301      	adds	r3, #1
 80028ca:	d1d3      	bne.n	8002874 <_svfiprintf_r+0x170>
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80028d0:	065b      	lsls	r3, r3, #25
 80028d2:	d400      	bmi.n	80028d6 <_svfiprintf_r+0x1d2>
 80028d4:	e72d      	b.n	8002732 <_svfiprintf_r+0x2e>
 80028d6:	2001      	movs	r0, #1
 80028d8:	4240      	negs	r0, r0
 80028da:	e72a      	b.n	8002732 <_svfiprintf_r+0x2e>
 80028dc:	ab07      	add	r3, sp, #28
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	003a      	movs	r2, r7
 80028e2:	0021      	movs	r1, r4
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <_svfiprintf_r+0x1fc>)
 80028e6:	9803      	ldr	r0, [sp, #12]
 80028e8:	f000 f87c 	bl	80029e4 <_printf_i>
 80028ec:	e7ea      	b.n	80028c4 <_svfiprintf_r+0x1c0>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	08002f9c 	.word	0x08002f9c
 80028f4:	08002fa2 	.word	0x08002fa2
 80028f8:	08002fa6 	.word	0x08002fa6
 80028fc:	00000000 	.word	0x00000000
 8002900:	08002641 	.word	0x08002641

08002904 <_printf_common>:
 8002904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002906:	0015      	movs	r5, r2
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	688a      	ldr	r2, [r1, #8]
 800290c:	690b      	ldr	r3, [r1, #16]
 800290e:	000c      	movs	r4, r1
 8002910:	9000      	str	r0, [sp, #0]
 8002912:	4293      	cmp	r3, r2
 8002914:	da00      	bge.n	8002918 <_printf_common+0x14>
 8002916:	0013      	movs	r3, r2
 8002918:	0022      	movs	r2, r4
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	3243      	adds	r2, #67	; 0x43
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	2a00      	cmp	r2, #0
 8002922:	d001      	beq.n	8002928 <_printf_common+0x24>
 8002924:	3301      	adds	r3, #1
 8002926:	602b      	str	r3, [r5, #0]
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	d502      	bpl.n	8002934 <_printf_common+0x30>
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	3302      	adds	r3, #2
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	2306      	movs	r3, #6
 8002938:	0017      	movs	r7, r2
 800293a:	401f      	ands	r7, r3
 800293c:	421a      	tst	r2, r3
 800293e:	d027      	beq.n	8002990 <_printf_common+0x8c>
 8002940:	0023      	movs	r3, r4
 8002942:	3343      	adds	r3, #67	; 0x43
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	4193      	sbcs	r3, r2
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	0692      	lsls	r2, r2, #26
 800294e:	d430      	bmi.n	80029b2 <_printf_common+0xae>
 8002950:	0022      	movs	r2, r4
 8002952:	9901      	ldr	r1, [sp, #4]
 8002954:	9800      	ldr	r0, [sp, #0]
 8002956:	9e08      	ldr	r6, [sp, #32]
 8002958:	3243      	adds	r2, #67	; 0x43
 800295a:	47b0      	blx	r6
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d025      	beq.n	80029ac <_printf_common+0xa8>
 8002960:	2306      	movs	r3, #6
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	682a      	ldr	r2, [r5, #0]
 8002966:	68e1      	ldr	r1, [r4, #12]
 8002968:	2500      	movs	r5, #0
 800296a:	4003      	ands	r3, r0
 800296c:	2b04      	cmp	r3, #4
 800296e:	d103      	bne.n	8002978 <_printf_common+0x74>
 8002970:	1a8d      	subs	r5, r1, r2
 8002972:	43eb      	mvns	r3, r5
 8002974:	17db      	asrs	r3, r3, #31
 8002976:	401d      	ands	r5, r3
 8002978:	68a3      	ldr	r3, [r4, #8]
 800297a:	6922      	ldr	r2, [r4, #16]
 800297c:	4293      	cmp	r3, r2
 800297e:	dd01      	ble.n	8002984 <_printf_common+0x80>
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	18ed      	adds	r5, r5, r3
 8002984:	2700      	movs	r7, #0
 8002986:	42bd      	cmp	r5, r7
 8002988:	d120      	bne.n	80029cc <_printf_common+0xc8>
 800298a:	2000      	movs	r0, #0
 800298c:	e010      	b.n	80029b0 <_printf_common+0xac>
 800298e:	3701      	adds	r7, #1
 8002990:	68e3      	ldr	r3, [r4, #12]
 8002992:	682a      	ldr	r2, [r5, #0]
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	42bb      	cmp	r3, r7
 8002998:	ddd2      	ble.n	8002940 <_printf_common+0x3c>
 800299a:	0022      	movs	r2, r4
 800299c:	2301      	movs	r3, #1
 800299e:	9901      	ldr	r1, [sp, #4]
 80029a0:	9800      	ldr	r0, [sp, #0]
 80029a2:	9e08      	ldr	r6, [sp, #32]
 80029a4:	3219      	adds	r2, #25
 80029a6:	47b0      	blx	r6
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d1f0      	bne.n	800298e <_printf_common+0x8a>
 80029ac:	2001      	movs	r0, #1
 80029ae:	4240      	negs	r0, r0
 80029b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029b2:	2030      	movs	r0, #48	; 0x30
 80029b4:	18e1      	adds	r1, r4, r3
 80029b6:	3143      	adds	r1, #67	; 0x43
 80029b8:	7008      	strb	r0, [r1, #0]
 80029ba:	0021      	movs	r1, r4
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	3145      	adds	r1, #69	; 0x45
 80029c0:	7809      	ldrb	r1, [r1, #0]
 80029c2:	18a2      	adds	r2, r4, r2
 80029c4:	3243      	adds	r2, #67	; 0x43
 80029c6:	3302      	adds	r3, #2
 80029c8:	7011      	strb	r1, [r2, #0]
 80029ca:	e7c1      	b.n	8002950 <_printf_common+0x4c>
 80029cc:	0022      	movs	r2, r4
 80029ce:	2301      	movs	r3, #1
 80029d0:	9901      	ldr	r1, [sp, #4]
 80029d2:	9800      	ldr	r0, [sp, #0]
 80029d4:	9e08      	ldr	r6, [sp, #32]
 80029d6:	321a      	adds	r2, #26
 80029d8:	47b0      	blx	r6
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	d0e6      	beq.n	80029ac <_printf_common+0xa8>
 80029de:	3701      	adds	r7, #1
 80029e0:	e7d1      	b.n	8002986 <_printf_common+0x82>
	...

080029e4 <_printf_i>:
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e6:	b08b      	sub	sp, #44	; 0x2c
 80029e8:	9206      	str	r2, [sp, #24]
 80029ea:	000a      	movs	r2, r1
 80029ec:	3243      	adds	r2, #67	; 0x43
 80029ee:	9307      	str	r3, [sp, #28]
 80029f0:	9005      	str	r0, [sp, #20]
 80029f2:	9204      	str	r2, [sp, #16]
 80029f4:	7e0a      	ldrb	r2, [r1, #24]
 80029f6:	000c      	movs	r4, r1
 80029f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80029fa:	2a78      	cmp	r2, #120	; 0x78
 80029fc:	d807      	bhi.n	8002a0e <_printf_i+0x2a>
 80029fe:	2a62      	cmp	r2, #98	; 0x62
 8002a00:	d809      	bhi.n	8002a16 <_printf_i+0x32>
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	d100      	bne.n	8002a08 <_printf_i+0x24>
 8002a06:	e0c1      	b.n	8002b8c <_printf_i+0x1a8>
 8002a08:	2a58      	cmp	r2, #88	; 0x58
 8002a0a:	d100      	bne.n	8002a0e <_printf_i+0x2a>
 8002a0c:	e08c      	b.n	8002b28 <_printf_i+0x144>
 8002a0e:	0026      	movs	r6, r4
 8002a10:	3642      	adds	r6, #66	; 0x42
 8002a12:	7032      	strb	r2, [r6, #0]
 8002a14:	e022      	b.n	8002a5c <_printf_i+0x78>
 8002a16:	0010      	movs	r0, r2
 8002a18:	3863      	subs	r0, #99	; 0x63
 8002a1a:	2815      	cmp	r0, #21
 8002a1c:	d8f7      	bhi.n	8002a0e <_printf_i+0x2a>
 8002a1e:	f7fd fb75 	bl	800010c <__gnu_thumb1_case_shi>
 8002a22:	0016      	.short	0x0016
 8002a24:	fff6001f 	.word	0xfff6001f
 8002a28:	fff6fff6 	.word	0xfff6fff6
 8002a2c:	001ffff6 	.word	0x001ffff6
 8002a30:	fff6fff6 	.word	0xfff6fff6
 8002a34:	fff6fff6 	.word	0xfff6fff6
 8002a38:	003600a8 	.word	0x003600a8
 8002a3c:	fff6009a 	.word	0xfff6009a
 8002a40:	00b9fff6 	.word	0x00b9fff6
 8002a44:	0036fff6 	.word	0x0036fff6
 8002a48:	fff6fff6 	.word	0xfff6fff6
 8002a4c:	009e      	.short	0x009e
 8002a4e:	0026      	movs	r6, r4
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	3642      	adds	r6, #66	; 0x42
 8002a54:	1d11      	adds	r1, r2, #4
 8002a56:	6019      	str	r1, [r3, #0]
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	7033      	strb	r3, [r6, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0a7      	b.n	8002bb0 <_printf_i+0x1cc>
 8002a60:	6808      	ldr	r0, [r1, #0]
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	1d0a      	adds	r2, r1, #4
 8002a66:	0605      	lsls	r5, r0, #24
 8002a68:	d50b      	bpl.n	8002a82 <_printf_i+0x9e>
 8002a6a:	680d      	ldr	r5, [r1, #0]
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	da03      	bge.n	8002a7a <_printf_i+0x96>
 8002a72:	232d      	movs	r3, #45	; 0x2d
 8002a74:	9a04      	ldr	r2, [sp, #16]
 8002a76:	426d      	negs	r5, r5
 8002a78:	7013      	strb	r3, [r2, #0]
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <_printf_i+0x21c>)
 8002a7c:	270a      	movs	r7, #10
 8002a7e:	9303      	str	r3, [sp, #12]
 8002a80:	e01b      	b.n	8002aba <_printf_i+0xd6>
 8002a82:	680d      	ldr	r5, [r1, #0]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	0641      	lsls	r1, r0, #25
 8002a88:	d5f1      	bpl.n	8002a6e <_printf_i+0x8a>
 8002a8a:	b22d      	sxth	r5, r5
 8002a8c:	e7ef      	b.n	8002a6e <_printf_i+0x8a>
 8002a8e:	680d      	ldr	r5, [r1, #0]
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	1d08      	adds	r0, r1, #4
 8002a94:	6018      	str	r0, [r3, #0]
 8002a96:	062e      	lsls	r6, r5, #24
 8002a98:	d501      	bpl.n	8002a9e <_printf_i+0xba>
 8002a9a:	680d      	ldr	r5, [r1, #0]
 8002a9c:	e003      	b.n	8002aa6 <_printf_i+0xc2>
 8002a9e:	066d      	lsls	r5, r5, #25
 8002aa0:	d5fb      	bpl.n	8002a9a <_printf_i+0xb6>
 8002aa2:	680d      	ldr	r5, [r1, #0]
 8002aa4:	b2ad      	uxth	r5, r5
 8002aa6:	4b56      	ldr	r3, [pc, #344]	; (8002c00 <_printf_i+0x21c>)
 8002aa8:	2708      	movs	r7, #8
 8002aaa:	9303      	str	r3, [sp, #12]
 8002aac:	2a6f      	cmp	r2, #111	; 0x6f
 8002aae:	d000      	beq.n	8002ab2 <_printf_i+0xce>
 8002ab0:	3702      	adds	r7, #2
 8002ab2:	0023      	movs	r3, r4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	3343      	adds	r3, #67	; 0x43
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	60a3      	str	r3, [r4, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db03      	blt.n	8002aca <_printf_i+0xe6>
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	6821      	ldr	r1, [r4, #0]
 8002ac6:	4391      	bics	r1, r2
 8002ac8:	6021      	str	r1, [r4, #0]
 8002aca:	2d00      	cmp	r5, #0
 8002acc:	d102      	bne.n	8002ad4 <_printf_i+0xf0>
 8002ace:	9e04      	ldr	r6, [sp, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00c      	beq.n	8002aee <_printf_i+0x10a>
 8002ad4:	9e04      	ldr	r6, [sp, #16]
 8002ad6:	0028      	movs	r0, r5
 8002ad8:	0039      	movs	r1, r7
 8002ada:	f7fd fba7 	bl	800022c <__aeabi_uidivmod>
 8002ade:	9b03      	ldr	r3, [sp, #12]
 8002ae0:	3e01      	subs	r6, #1
 8002ae2:	5c5b      	ldrb	r3, [r3, r1]
 8002ae4:	7033      	strb	r3, [r6, #0]
 8002ae6:	002b      	movs	r3, r5
 8002ae8:	0005      	movs	r5, r0
 8002aea:	429f      	cmp	r7, r3
 8002aec:	d9f3      	bls.n	8002ad6 <_printf_i+0xf2>
 8002aee:	2f08      	cmp	r7, #8
 8002af0:	d109      	bne.n	8002b06 <_printf_i+0x122>
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	07db      	lsls	r3, r3, #31
 8002af6:	d506      	bpl.n	8002b06 <_printf_i+0x122>
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	6922      	ldr	r2, [r4, #16]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	dc02      	bgt.n	8002b06 <_printf_i+0x122>
 8002b00:	2330      	movs	r3, #48	; 0x30
 8002b02:	3e01      	subs	r6, #1
 8002b04:	7033      	strb	r3, [r6, #0]
 8002b06:	9b04      	ldr	r3, [sp, #16]
 8002b08:	1b9b      	subs	r3, r3, r6
 8002b0a:	6123      	str	r3, [r4, #16]
 8002b0c:	9b07      	ldr	r3, [sp, #28]
 8002b0e:	0021      	movs	r1, r4
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	9805      	ldr	r0, [sp, #20]
 8002b14:	9b06      	ldr	r3, [sp, #24]
 8002b16:	aa09      	add	r2, sp, #36	; 0x24
 8002b18:	f7ff fef4 	bl	8002904 <_printf_common>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d14c      	bne.n	8002bba <_printf_i+0x1d6>
 8002b20:	2001      	movs	r0, #1
 8002b22:	4240      	negs	r0, r0
 8002b24:	b00b      	add	sp, #44	; 0x2c
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b28:	3145      	adds	r1, #69	; 0x45
 8002b2a:	700a      	strb	r2, [r1, #0]
 8002b2c:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <_printf_i+0x21c>)
 8002b2e:	9203      	str	r2, [sp, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	6821      	ldr	r1, [r4, #0]
 8002b34:	ca20      	ldmia	r2!, {r5}
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	0608      	lsls	r0, r1, #24
 8002b3a:	d516      	bpl.n	8002b6a <_printf_i+0x186>
 8002b3c:	07cb      	lsls	r3, r1, #31
 8002b3e:	d502      	bpl.n	8002b46 <_printf_i+0x162>
 8002b40:	2320      	movs	r3, #32
 8002b42:	4319      	orrs	r1, r3
 8002b44:	6021      	str	r1, [r4, #0]
 8002b46:	2710      	movs	r7, #16
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	d1b2      	bne.n	8002ab2 <_printf_i+0xce>
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	439a      	bics	r2, r3
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	e7ad      	b.n	8002ab2 <_printf_i+0xce>
 8002b56:	2220      	movs	r2, #32
 8002b58:	6809      	ldr	r1, [r1, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	6022      	str	r2, [r4, #0]
 8002b5e:	0022      	movs	r2, r4
 8002b60:	2178      	movs	r1, #120	; 0x78
 8002b62:	3245      	adds	r2, #69	; 0x45
 8002b64:	7011      	strb	r1, [r2, #0]
 8002b66:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <_printf_i+0x220>)
 8002b68:	e7e1      	b.n	8002b2e <_printf_i+0x14a>
 8002b6a:	0648      	lsls	r0, r1, #25
 8002b6c:	d5e6      	bpl.n	8002b3c <_printf_i+0x158>
 8002b6e:	b2ad      	uxth	r5, r5
 8002b70:	e7e4      	b.n	8002b3c <_printf_i+0x158>
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	680d      	ldr	r5, [r1, #0]
 8002b76:	1d10      	adds	r0, r2, #4
 8002b78:	6949      	ldr	r1, [r1, #20]
 8002b7a:	6018      	str	r0, [r3, #0]
 8002b7c:	6813      	ldr	r3, [r2, #0]
 8002b7e:	062e      	lsls	r6, r5, #24
 8002b80:	d501      	bpl.n	8002b86 <_printf_i+0x1a2>
 8002b82:	6019      	str	r1, [r3, #0]
 8002b84:	e002      	b.n	8002b8c <_printf_i+0x1a8>
 8002b86:	066d      	lsls	r5, r5, #25
 8002b88:	d5fb      	bpl.n	8002b82 <_printf_i+0x19e>
 8002b8a:	8019      	strh	r1, [r3, #0]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9e04      	ldr	r6, [sp, #16]
 8002b90:	6123      	str	r3, [r4, #16]
 8002b92:	e7bb      	b.n	8002b0c <_printf_i+0x128>
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	1d11      	adds	r1, r2, #4
 8002b98:	6019      	str	r1, [r3, #0]
 8002b9a:	6816      	ldr	r6, [r2, #0]
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	0030      	movs	r0, r6
 8002ba0:	6862      	ldr	r2, [r4, #4]
 8002ba2:	f000 f831 	bl	8002c08 <memchr>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d001      	beq.n	8002bae <_printf_i+0x1ca>
 8002baa:	1b80      	subs	r0, r0, r6
 8002bac:	6060      	str	r0, [r4, #4]
 8002bae:	6863      	ldr	r3, [r4, #4]
 8002bb0:	6123      	str	r3, [r4, #16]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9a04      	ldr	r2, [sp, #16]
 8002bb6:	7013      	strb	r3, [r2, #0]
 8002bb8:	e7a8      	b.n	8002b0c <_printf_i+0x128>
 8002bba:	6923      	ldr	r3, [r4, #16]
 8002bbc:	0032      	movs	r2, r6
 8002bbe:	9906      	ldr	r1, [sp, #24]
 8002bc0:	9805      	ldr	r0, [sp, #20]
 8002bc2:	9d07      	ldr	r5, [sp, #28]
 8002bc4:	47a8      	blx	r5
 8002bc6:	1c43      	adds	r3, r0, #1
 8002bc8:	d0aa      	beq.n	8002b20 <_printf_i+0x13c>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	079b      	lsls	r3, r3, #30
 8002bce:	d415      	bmi.n	8002bfc <_printf_i+0x218>
 8002bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd2:	68e0      	ldr	r0, [r4, #12]
 8002bd4:	4298      	cmp	r0, r3
 8002bd6:	daa5      	bge.n	8002b24 <_printf_i+0x140>
 8002bd8:	0018      	movs	r0, r3
 8002bda:	e7a3      	b.n	8002b24 <_printf_i+0x140>
 8002bdc:	0022      	movs	r2, r4
 8002bde:	2301      	movs	r3, #1
 8002be0:	9906      	ldr	r1, [sp, #24]
 8002be2:	9805      	ldr	r0, [sp, #20]
 8002be4:	9e07      	ldr	r6, [sp, #28]
 8002be6:	3219      	adds	r2, #25
 8002be8:	47b0      	blx	r6
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	d098      	beq.n	8002b20 <_printf_i+0x13c>
 8002bee:	3501      	adds	r5, #1
 8002bf0:	68e3      	ldr	r3, [r4, #12]
 8002bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	42ab      	cmp	r3, r5
 8002bf8:	dcf0      	bgt.n	8002bdc <_printf_i+0x1f8>
 8002bfa:	e7e9      	b.n	8002bd0 <_printf_i+0x1ec>
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	e7f7      	b.n	8002bf0 <_printf_i+0x20c>
 8002c00:	08002fad 	.word	0x08002fad
 8002c04:	08002fbe 	.word	0x08002fbe

08002c08 <memchr>:
 8002c08:	b2c9      	uxtb	r1, r1
 8002c0a:	1882      	adds	r2, r0, r2
 8002c0c:	4290      	cmp	r0, r2
 8002c0e:	d101      	bne.n	8002c14 <memchr+0xc>
 8002c10:	2000      	movs	r0, #0
 8002c12:	4770      	bx	lr
 8002c14:	7803      	ldrb	r3, [r0, #0]
 8002c16:	428b      	cmp	r3, r1
 8002c18:	d0fb      	beq.n	8002c12 <memchr+0xa>
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	e7f6      	b.n	8002c0c <memchr+0x4>

08002c1e <memcpy>:
 8002c1e:	2300      	movs	r3, #0
 8002c20:	b510      	push	{r4, lr}
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d100      	bne.n	8002c28 <memcpy+0xa>
 8002c26:	bd10      	pop	{r4, pc}
 8002c28:	5ccc      	ldrb	r4, [r1, r3]
 8002c2a:	54c4      	strb	r4, [r0, r3]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	e7f8      	b.n	8002c22 <memcpy+0x4>

08002c30 <memmove>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4288      	cmp	r0, r1
 8002c34:	d902      	bls.n	8002c3c <memmove+0xc>
 8002c36:	188b      	adds	r3, r1, r2
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	d303      	bcc.n	8002c44 <memmove+0x14>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e007      	b.n	8002c50 <memmove+0x20>
 8002c40:	5c8b      	ldrb	r3, [r1, r2]
 8002c42:	5483      	strb	r3, [r0, r2]
 8002c44:	3a01      	subs	r2, #1
 8002c46:	d2fb      	bcs.n	8002c40 <memmove+0x10>
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	5ccc      	ldrb	r4, [r1, r3]
 8002c4c:	54c4      	strb	r4, [r0, r3]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1fa      	bne.n	8002c4a <memmove+0x1a>
 8002c54:	e7f8      	b.n	8002c48 <memmove+0x18>
	...

08002c58 <_free_r>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	0005      	movs	r5, r0
 8002c5c:	2900      	cmp	r1, #0
 8002c5e:	d010      	beq.n	8002c82 <_free_r+0x2a>
 8002c60:	1f0c      	subs	r4, r1, #4
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	da00      	bge.n	8002c6a <_free_r+0x12>
 8002c68:	18e4      	adds	r4, r4, r3
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	f000 f918 	bl	8002ea0 <__malloc_lock>
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <_free_r+0x90>)
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <_free_r+0x2c>
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	6014      	str	r4, [r2, #0]
 8002c7c:	0028      	movs	r0, r5
 8002c7e:	f000 f917 	bl	8002eb0 <__malloc_unlock>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d908      	bls.n	8002c9a <_free_r+0x42>
 8002c88:	6821      	ldr	r1, [r4, #0]
 8002c8a:	1860      	adds	r0, r4, r1
 8002c8c:	4283      	cmp	r3, r0
 8002c8e:	d1f3      	bne.n	8002c78 <_free_r+0x20>
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	1841      	adds	r1, r0, r1
 8002c96:	6021      	str	r1, [r4, #0]
 8002c98:	e7ee      	b.n	8002c78 <_free_r+0x20>
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <_free_r+0x4e>
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	d9f9      	bls.n	8002c9a <_free_r+0x42>
 8002ca6:	6811      	ldr	r1, [r2, #0]
 8002ca8:	1850      	adds	r0, r2, r1
 8002caa:	42a0      	cmp	r0, r4
 8002cac:	d10b      	bne.n	8002cc6 <_free_r+0x6e>
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	1809      	adds	r1, r1, r0
 8002cb2:	1850      	adds	r0, r2, r1
 8002cb4:	6011      	str	r1, [r2, #0]
 8002cb6:	4283      	cmp	r3, r0
 8002cb8:	d1e0      	bne.n	8002c7c <_free_r+0x24>
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	1841      	adds	r1, r0, r1
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	6053      	str	r3, [r2, #4]
 8002cc4:	e7da      	b.n	8002c7c <_free_r+0x24>
 8002cc6:	42a0      	cmp	r0, r4
 8002cc8:	d902      	bls.n	8002cd0 <_free_r+0x78>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	602b      	str	r3, [r5, #0]
 8002cce:	e7d5      	b.n	8002c7c <_free_r+0x24>
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	1860      	adds	r0, r4, r1
 8002cd4:	4283      	cmp	r3, r0
 8002cd6:	d103      	bne.n	8002ce0 <_free_r+0x88>
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	1841      	adds	r1, r0, r1
 8002cde:	6021      	str	r1, [r4, #0]
 8002ce0:	6063      	str	r3, [r4, #4]
 8002ce2:	6054      	str	r4, [r2, #4]
 8002ce4:	e7ca      	b.n	8002c7c <_free_r+0x24>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	200001b4 	.word	0x200001b4

08002cec <sbrk_aligned>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	4e0f      	ldr	r6, [pc, #60]	; (8002d2c <sbrk_aligned+0x40>)
 8002cf0:	000d      	movs	r5, r1
 8002cf2:	6831      	ldr	r1, [r6, #0]
 8002cf4:	0004      	movs	r4, r0
 8002cf6:	2900      	cmp	r1, #0
 8002cf8:	d102      	bne.n	8002d00 <sbrk_aligned+0x14>
 8002cfa:	f000 f8bf 	bl	8002e7c <_sbrk_r>
 8002cfe:	6030      	str	r0, [r6, #0]
 8002d00:	0029      	movs	r1, r5
 8002d02:	0020      	movs	r0, r4
 8002d04:	f000 f8ba 	bl	8002e7c <_sbrk_r>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d00a      	beq.n	8002d22 <sbrk_aligned+0x36>
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	1cc5      	adds	r5, r0, #3
 8002d10:	439d      	bics	r5, r3
 8002d12:	42a8      	cmp	r0, r5
 8002d14:	d007      	beq.n	8002d26 <sbrk_aligned+0x3a>
 8002d16:	1a29      	subs	r1, r5, r0
 8002d18:	0020      	movs	r0, r4
 8002d1a:	f000 f8af 	bl	8002e7c <_sbrk_r>
 8002d1e:	1c43      	adds	r3, r0, #1
 8002d20:	d101      	bne.n	8002d26 <sbrk_aligned+0x3a>
 8002d22:	2501      	movs	r5, #1
 8002d24:	426d      	negs	r5, r5
 8002d26:	0028      	movs	r0, r5
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	200001b8 	.word	0x200001b8

08002d30 <_malloc_r>:
 8002d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d32:	2203      	movs	r2, #3
 8002d34:	1ccb      	adds	r3, r1, #3
 8002d36:	4393      	bics	r3, r2
 8002d38:	3308      	adds	r3, #8
 8002d3a:	0006      	movs	r6, r0
 8002d3c:	001f      	movs	r7, r3
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d232      	bcs.n	8002da8 <_malloc_r+0x78>
 8002d42:	270c      	movs	r7, #12
 8002d44:	42b9      	cmp	r1, r7
 8002d46:	d831      	bhi.n	8002dac <_malloc_r+0x7c>
 8002d48:	0030      	movs	r0, r6
 8002d4a:	f000 f8a9 	bl	8002ea0 <__malloc_lock>
 8002d4e:	4d32      	ldr	r5, [pc, #200]	; (8002e18 <_malloc_r+0xe8>)
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	001c      	movs	r4, r3
 8002d54:	2c00      	cmp	r4, #0
 8002d56:	d12e      	bne.n	8002db6 <_malloc_r+0x86>
 8002d58:	0039      	movs	r1, r7
 8002d5a:	0030      	movs	r0, r6
 8002d5c:	f7ff ffc6 	bl	8002cec <sbrk_aligned>
 8002d60:	0004      	movs	r4, r0
 8002d62:	1c43      	adds	r3, r0, #1
 8002d64:	d11e      	bne.n	8002da4 <_malloc_r+0x74>
 8002d66:	682c      	ldr	r4, [r5, #0]
 8002d68:	0025      	movs	r5, r4
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d14a      	bne.n	8002e04 <_malloc_r+0xd4>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	0029      	movs	r1, r5
 8002d72:	18e3      	adds	r3, r4, r3
 8002d74:	0030      	movs	r0, r6
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	f000 f880 	bl	8002e7c <_sbrk_r>
 8002d7c:	9b01      	ldr	r3, [sp, #4]
 8002d7e:	4283      	cmp	r3, r0
 8002d80:	d143      	bne.n	8002e0a <_malloc_r+0xda>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	3703      	adds	r7, #3
 8002d86:	1aff      	subs	r7, r7, r3
 8002d88:	2303      	movs	r3, #3
 8002d8a:	439f      	bics	r7, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	2f0c      	cmp	r7, #12
 8002d90:	d200      	bcs.n	8002d94 <_malloc_r+0x64>
 8002d92:	270c      	movs	r7, #12
 8002d94:	0039      	movs	r1, r7
 8002d96:	0030      	movs	r0, r6
 8002d98:	f7ff ffa8 	bl	8002cec <sbrk_aligned>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d034      	beq.n	8002e0a <_malloc_r+0xda>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	19df      	adds	r7, r3, r7
 8002da4:	6027      	str	r7, [r4, #0]
 8002da6:	e013      	b.n	8002dd0 <_malloc_r+0xa0>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	dacb      	bge.n	8002d44 <_malloc_r+0x14>
 8002dac:	230c      	movs	r3, #12
 8002dae:	2500      	movs	r5, #0
 8002db0:	6033      	str	r3, [r6, #0]
 8002db2:	0028      	movs	r0, r5
 8002db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002db6:	6822      	ldr	r2, [r4, #0]
 8002db8:	1bd1      	subs	r1, r2, r7
 8002dba:	d420      	bmi.n	8002dfe <_malloc_r+0xce>
 8002dbc:	290b      	cmp	r1, #11
 8002dbe:	d917      	bls.n	8002df0 <_malloc_r+0xc0>
 8002dc0:	19e2      	adds	r2, r4, r7
 8002dc2:	6027      	str	r7, [r4, #0]
 8002dc4:	42a3      	cmp	r3, r4
 8002dc6:	d111      	bne.n	8002dec <_malloc_r+0xbc>
 8002dc8:	602a      	str	r2, [r5, #0]
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	6053      	str	r3, [r2, #4]
 8002dd0:	0030      	movs	r0, r6
 8002dd2:	0025      	movs	r5, r4
 8002dd4:	f000 f86c 	bl	8002eb0 <__malloc_unlock>
 8002dd8:	2207      	movs	r2, #7
 8002dda:	350b      	adds	r5, #11
 8002ddc:	1d23      	adds	r3, r4, #4
 8002dde:	4395      	bics	r5, r2
 8002de0:	1aea      	subs	r2, r5, r3
 8002de2:	429d      	cmp	r5, r3
 8002de4:	d0e5      	beq.n	8002db2 <_malloc_r+0x82>
 8002de6:	1b5b      	subs	r3, r3, r5
 8002de8:	50a3      	str	r3, [r4, r2]
 8002dea:	e7e2      	b.n	8002db2 <_malloc_r+0x82>
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e7ec      	b.n	8002dca <_malloc_r+0x9a>
 8002df0:	6862      	ldr	r2, [r4, #4]
 8002df2:	42a3      	cmp	r3, r4
 8002df4:	d101      	bne.n	8002dfa <_malloc_r+0xca>
 8002df6:	602a      	str	r2, [r5, #0]
 8002df8:	e7ea      	b.n	8002dd0 <_malloc_r+0xa0>
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	e7e8      	b.n	8002dd0 <_malloc_r+0xa0>
 8002dfe:	0023      	movs	r3, r4
 8002e00:	6864      	ldr	r4, [r4, #4]
 8002e02:	e7a7      	b.n	8002d54 <_malloc_r+0x24>
 8002e04:	002c      	movs	r4, r5
 8002e06:	686d      	ldr	r5, [r5, #4]
 8002e08:	e7af      	b.n	8002d6a <_malloc_r+0x3a>
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	0030      	movs	r0, r6
 8002e0e:	6033      	str	r3, [r6, #0]
 8002e10:	f000 f84e 	bl	8002eb0 <__malloc_unlock>
 8002e14:	e7cd      	b.n	8002db2 <_malloc_r+0x82>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	200001b4 	.word	0x200001b4

08002e1c <_realloc_r>:
 8002e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e1e:	0007      	movs	r7, r0
 8002e20:	000e      	movs	r6, r1
 8002e22:	0014      	movs	r4, r2
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d105      	bne.n	8002e34 <_realloc_r+0x18>
 8002e28:	0011      	movs	r1, r2
 8002e2a:	f7ff ff81 	bl	8002d30 <_malloc_r>
 8002e2e:	0005      	movs	r5, r0
 8002e30:	0028      	movs	r0, r5
 8002e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e34:	2a00      	cmp	r2, #0
 8002e36:	d103      	bne.n	8002e40 <_realloc_r+0x24>
 8002e38:	f7ff ff0e 	bl	8002c58 <_free_r>
 8002e3c:	0025      	movs	r5, r4
 8002e3e:	e7f7      	b.n	8002e30 <_realloc_r+0x14>
 8002e40:	f000 f83e 	bl	8002ec0 <_malloc_usable_size_r>
 8002e44:	9001      	str	r0, [sp, #4]
 8002e46:	4284      	cmp	r4, r0
 8002e48:	d803      	bhi.n	8002e52 <_realloc_r+0x36>
 8002e4a:	0035      	movs	r5, r6
 8002e4c:	0843      	lsrs	r3, r0, #1
 8002e4e:	42a3      	cmp	r3, r4
 8002e50:	d3ee      	bcc.n	8002e30 <_realloc_r+0x14>
 8002e52:	0021      	movs	r1, r4
 8002e54:	0038      	movs	r0, r7
 8002e56:	f7ff ff6b 	bl	8002d30 <_malloc_r>
 8002e5a:	1e05      	subs	r5, r0, #0
 8002e5c:	d0e8      	beq.n	8002e30 <_realloc_r+0x14>
 8002e5e:	9b01      	ldr	r3, [sp, #4]
 8002e60:	0022      	movs	r2, r4
 8002e62:	429c      	cmp	r4, r3
 8002e64:	d900      	bls.n	8002e68 <_realloc_r+0x4c>
 8002e66:	001a      	movs	r2, r3
 8002e68:	0031      	movs	r1, r6
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	f7ff fed7 	bl	8002c1e <memcpy>
 8002e70:	0031      	movs	r1, r6
 8002e72:	0038      	movs	r0, r7
 8002e74:	f7ff fef0 	bl	8002c58 <_free_r>
 8002e78:	e7da      	b.n	8002e30 <_realloc_r+0x14>
	...

08002e7c <_sbrk_r>:
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	b570      	push	{r4, r5, r6, lr}
 8002e80:	4d06      	ldr	r5, [pc, #24]	; (8002e9c <_sbrk_r+0x20>)
 8002e82:	0004      	movs	r4, r0
 8002e84:	0008      	movs	r0, r1
 8002e86:	602b      	str	r3, [r5, #0]
 8002e88:	f7fd fce8 	bl	800085c <_sbrk>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	d103      	bne.n	8002e98 <_sbrk_r+0x1c>
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d000      	beq.n	8002e98 <_sbrk_r+0x1c>
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	200001bc 	.word	0x200001bc

08002ea0 <__malloc_lock>:
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	4802      	ldr	r0, [pc, #8]	; (8002eac <__malloc_lock+0xc>)
 8002ea4:	f000 f814 	bl	8002ed0 <__retarget_lock_acquire_recursive>
 8002ea8:	bd10      	pop	{r4, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	200001c0 	.word	0x200001c0

08002eb0 <__malloc_unlock>:
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	4802      	ldr	r0, [pc, #8]	; (8002ebc <__malloc_unlock+0xc>)
 8002eb4:	f000 f80d 	bl	8002ed2 <__retarget_lock_release_recursive>
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	200001c0 	.word	0x200001c0

08002ec0 <_malloc_usable_size_r>:
 8002ec0:	1f0b      	subs	r3, r1, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1f18      	subs	r0, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da01      	bge.n	8002ece <_malloc_usable_size_r+0xe>
 8002eca:	580b      	ldr	r3, [r1, r0]
 8002ecc:	18c0      	adds	r0, r0, r3
 8002ece:	4770      	bx	lr

08002ed0 <__retarget_lock_acquire_recursive>:
 8002ed0:	4770      	bx	lr

08002ed2 <__retarget_lock_release_recursive>:
 8002ed2:	4770      	bx	lr

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
