
STM32 SDI programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe4  08002fe4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe4  08002fe4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  0800305c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800305c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0a7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be6  00000000  00000000  0002b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001541d  00000000  00000000  0002dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b32f  00000000  00000000  0004304d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008204d  00000000  00000000  0004e37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d03c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e38  00000000  00000000  000d041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000070 	.word	0x20000070
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08002eec 	.word	0x08002eec

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000074 	.word	0x20000074
 80000f8:	08002eec 	.word	0x08002eec

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_shi>:
 800010c:	b403      	push	{r0, r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0040      	lsls	r0, r0, #1
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	5e09      	ldrsh	r1, [r1, r0]
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	448e      	add	lr, r1
 800011c:	bc03      	pop	{r0, r1}
 800011e:	4770      	bx	lr

08000120 <__udivsi3>:
 8000120:	2200      	movs	r2, #0
 8000122:	0843      	lsrs	r3, r0, #1
 8000124:	428b      	cmp	r3, r1
 8000126:	d374      	bcc.n	8000212 <__udivsi3+0xf2>
 8000128:	0903      	lsrs	r3, r0, #4
 800012a:	428b      	cmp	r3, r1
 800012c:	d35f      	bcc.n	80001ee <__udivsi3+0xce>
 800012e:	0a03      	lsrs	r3, r0, #8
 8000130:	428b      	cmp	r3, r1
 8000132:	d344      	bcc.n	80001be <__udivsi3+0x9e>
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d328      	bcc.n	800018c <__udivsi3+0x6c>
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d30d      	bcc.n	800015c <__udivsi3+0x3c>
 8000140:	22ff      	movs	r2, #255	; 0xff
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	ba12      	rev	r2, r2
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d302      	bcc.n	8000152 <__udivsi3+0x32>
 800014c:	1212      	asrs	r2, r2, #8
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	d065      	beq.n	800021e <__udivsi3+0xfe>
 8000152:	0b03      	lsrs	r3, r0, #12
 8000154:	428b      	cmp	r3, r1
 8000156:	d319      	bcc.n	800018c <__udivsi3+0x6c>
 8000158:	e000      	b.n	800015c <__udivsi3+0x3c>
 800015a:	0a09      	lsrs	r1, r1, #8
 800015c:	0bc3      	lsrs	r3, r0, #15
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x46>
 8000162:	03cb      	lsls	r3, r1, #15
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b83      	lsrs	r3, r0, #14
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x52>
 800016e:	038b      	lsls	r3, r1, #14
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b43      	lsrs	r3, r0, #13
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x5e>
 800017a:	034b      	lsls	r3, r1, #13
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b03      	lsrs	r3, r0, #12
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x6a>
 8000186:	030b      	lsls	r3, r1, #12
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0ac3      	lsrs	r3, r0, #11
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x76>
 8000192:	02cb      	lsls	r3, r1, #11
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a83      	lsrs	r3, r0, #10
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x82>
 800019e:	028b      	lsls	r3, r1, #10
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a43      	lsrs	r3, r0, #9
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x8e>
 80001aa:	024b      	lsls	r3, r1, #9
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a03      	lsrs	r3, r0, #8
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x9a>
 80001b6:	020b      	lsls	r3, r1, #8
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	d2cd      	bcs.n	800015a <__udivsi3+0x3a>
 80001be:	09c3      	lsrs	r3, r0, #7
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xa8>
 80001c4:	01cb      	lsls	r3, r1, #7
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0983      	lsrs	r3, r0, #6
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xb4>
 80001d0:	018b      	lsls	r3, r1, #6
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0943      	lsrs	r3, r0, #5
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xc0>
 80001dc:	014b      	lsls	r3, r1, #5
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0903      	lsrs	r3, r0, #4
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xcc>
 80001e8:	010b      	lsls	r3, r1, #4
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	08c3      	lsrs	r3, r0, #3
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xd8>
 80001f4:	00cb      	lsls	r3, r1, #3
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0883      	lsrs	r3, r0, #2
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xe4>
 8000200:	008b      	lsls	r3, r1, #2
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0843      	lsrs	r3, r0, #1
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xf0>
 800020c:	004b      	lsls	r3, r1, #1
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	1a41      	subs	r1, r0, r1
 8000214:	d200      	bcs.n	8000218 <__udivsi3+0xf8>
 8000216:	4601      	mov	r1, r0
 8000218:	4152      	adcs	r2, r2
 800021a:	4610      	mov	r0, r2
 800021c:	4770      	bx	lr
 800021e:	e7ff      	b.n	8000220 <__udivsi3+0x100>
 8000220:	b501      	push	{r0, lr}
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8f0 	bl	8000408 <__aeabi_idiv0>
 8000228:	bd02      	pop	{r1, pc}
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uidivmod>:
 800022c:	2900      	cmp	r1, #0
 800022e:	d0f7      	beq.n	8000220 <__udivsi3+0x100>
 8000230:	e776      	b.n	8000120 <__udivsi3>
 8000232:	4770      	bx	lr

08000234 <__divsi3>:
 8000234:	4603      	mov	r3, r0
 8000236:	430b      	orrs	r3, r1
 8000238:	d47f      	bmi.n	800033a <__divsi3+0x106>
 800023a:	2200      	movs	r2, #0
 800023c:	0843      	lsrs	r3, r0, #1
 800023e:	428b      	cmp	r3, r1
 8000240:	d374      	bcc.n	800032c <__divsi3+0xf8>
 8000242:	0903      	lsrs	r3, r0, #4
 8000244:	428b      	cmp	r3, r1
 8000246:	d35f      	bcc.n	8000308 <__divsi3+0xd4>
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d344      	bcc.n	80002d8 <__divsi3+0xa4>
 800024e:	0b03      	lsrs	r3, r0, #12
 8000250:	428b      	cmp	r3, r1
 8000252:	d328      	bcc.n	80002a6 <__divsi3+0x72>
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d30d      	bcc.n	8000276 <__divsi3+0x42>
 800025a:	22ff      	movs	r2, #255	; 0xff
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	ba12      	rev	r2, r2
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d302      	bcc.n	800026c <__divsi3+0x38>
 8000266:	1212      	asrs	r2, r2, #8
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	d065      	beq.n	8000338 <__divsi3+0x104>
 800026c:	0b03      	lsrs	r3, r0, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d319      	bcc.n	80002a6 <__divsi3+0x72>
 8000272:	e000      	b.n	8000276 <__divsi3+0x42>
 8000274:	0a09      	lsrs	r1, r1, #8
 8000276:	0bc3      	lsrs	r3, r0, #15
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x4c>
 800027c:	03cb      	lsls	r3, r1, #15
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b83      	lsrs	r3, r0, #14
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x58>
 8000288:	038b      	lsls	r3, r1, #14
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b43      	lsrs	r3, r0, #13
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x64>
 8000294:	034b      	lsls	r3, r1, #13
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b03      	lsrs	r3, r0, #12
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x70>
 80002a0:	030b      	lsls	r3, r1, #12
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0ac3      	lsrs	r3, r0, #11
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x7c>
 80002ac:	02cb      	lsls	r3, r1, #11
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a83      	lsrs	r3, r0, #10
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x88>
 80002b8:	028b      	lsls	r3, r1, #10
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a43      	lsrs	r3, r0, #9
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x94>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a03      	lsrs	r3, r0, #8
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0xa0>
 80002d0:	020b      	lsls	r3, r1, #8
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	d2cd      	bcs.n	8000274 <__divsi3+0x40>
 80002d8:	09c3      	lsrs	r3, r0, #7
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xae>
 80002de:	01cb      	lsls	r3, r1, #7
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0983      	lsrs	r3, r0, #6
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xba>
 80002ea:	018b      	lsls	r3, r1, #6
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0943      	lsrs	r3, r0, #5
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xc6>
 80002f6:	014b      	lsls	r3, r1, #5
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0903      	lsrs	r3, r0, #4
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xd2>
 8000302:	010b      	lsls	r3, r1, #4
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	08c3      	lsrs	r3, r0, #3
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xde>
 800030e:	00cb      	lsls	r3, r1, #3
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0883      	lsrs	r3, r0, #2
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xea>
 800031a:	008b      	lsls	r3, r1, #2
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0843      	lsrs	r3, r0, #1
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xf6>
 8000326:	004b      	lsls	r3, r1, #1
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	1a41      	subs	r1, r0, r1
 800032e:	d200      	bcs.n	8000332 <__divsi3+0xfe>
 8000330:	4601      	mov	r1, r0
 8000332:	4152      	adcs	r2, r2
 8000334:	4610      	mov	r0, r2
 8000336:	4770      	bx	lr
 8000338:	e05d      	b.n	80003f6 <__divsi3+0x1c2>
 800033a:	0fca      	lsrs	r2, r1, #31
 800033c:	d000      	beq.n	8000340 <__divsi3+0x10c>
 800033e:	4249      	negs	r1, r1
 8000340:	1003      	asrs	r3, r0, #32
 8000342:	d300      	bcc.n	8000346 <__divsi3+0x112>
 8000344:	4240      	negs	r0, r0
 8000346:	4053      	eors	r3, r2
 8000348:	2200      	movs	r2, #0
 800034a:	469c      	mov	ip, r3
 800034c:	0903      	lsrs	r3, r0, #4
 800034e:	428b      	cmp	r3, r1
 8000350:	d32d      	bcc.n	80003ae <__divsi3+0x17a>
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d312      	bcc.n	800037e <__divsi3+0x14a>
 8000358:	22fc      	movs	r2, #252	; 0xfc
 800035a:	0189      	lsls	r1, r1, #6
 800035c:	ba12      	rev	r2, r2
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d30c      	bcc.n	800037e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d308      	bcc.n	800037e <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d304      	bcc.n	800037e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	d03a      	beq.n	80003ee <__divsi3+0x1ba>
 8000378:	1192      	asrs	r2, r2, #6
 800037a:	e000      	b.n	800037e <__divsi3+0x14a>
 800037c:	0989      	lsrs	r1, r1, #6
 800037e:	09c3      	lsrs	r3, r0, #7
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x154>
 8000384:	01cb      	lsls	r3, r1, #7
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0983      	lsrs	r3, r0, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x160>
 8000390:	018b      	lsls	r3, r1, #6
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0943      	lsrs	r3, r0, #5
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x16c>
 800039c:	014b      	lsls	r3, r1, #5
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0903      	lsrs	r3, r0, #4
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x178>
 80003a8:	010b      	lsls	r3, r1, #4
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	08c3      	lsrs	r3, r0, #3
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x184>
 80003b4:	00cb      	lsls	r3, r1, #3
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0883      	lsrs	r3, r0, #2
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x190>
 80003c0:	008b      	lsls	r3, r1, #2
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	d2d9      	bcs.n	800037c <__divsi3+0x148>
 80003c8:	0843      	lsrs	r3, r0, #1
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d301      	bcc.n	80003d2 <__divsi3+0x19e>
 80003ce:	004b      	lsls	r3, r1, #1
 80003d0:	1ac0      	subs	r0, r0, r3
 80003d2:	4152      	adcs	r2, r2
 80003d4:	1a41      	subs	r1, r0, r1
 80003d6:	d200      	bcs.n	80003da <__divsi3+0x1a6>
 80003d8:	4601      	mov	r1, r0
 80003da:	4663      	mov	r3, ip
 80003dc:	4152      	adcs	r2, r2
 80003de:	105b      	asrs	r3, r3, #1
 80003e0:	4610      	mov	r0, r2
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x1b4>
 80003e4:	4240      	negs	r0, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d500      	bpl.n	80003ec <__divsi3+0x1b8>
 80003ea:	4249      	negs	r1, r1
 80003ec:	4770      	bx	lr
 80003ee:	4663      	mov	r3, ip
 80003f0:	105b      	asrs	r3, r3, #1
 80003f2:	d300      	bcc.n	80003f6 <__divsi3+0x1c2>
 80003f4:	4240      	negs	r0, r0
 80003f6:	b501      	push	{r0, lr}
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f805 	bl	8000408 <__aeabi_idiv0>
 80003fe:	bd02      	pop	{r1, pc}

08000400 <__aeabi_idivmod>:
 8000400:	2900      	cmp	r1, #0
 8000402:	d0f8      	beq.n	80003f6 <__divsi3+0x1c2>
 8000404:	e716      	b.n	8000234 <__divsi3>
 8000406:	4770      	bx	lr

08000408 <__aeabi_idiv0>:
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08a      	sub	sp, #40	; 0x28
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  char MSG[35] = {'\0'};
 8000412:	003b      	movs	r3, r7
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	3304      	adds	r3, #4
 800041a:	221f      	movs	r2, #31
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f002 f8f2 	bl	8002608 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f000 fa8c 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f814 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042c:	f000 f8dc 	bl	80005e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000430:	f000 f858 	bl	80004e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000434:	f000 f8a4 	bl	8000580 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  int cycle = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
  printLog("SDI programmer initialized");
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <main+0x44>)
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f8ee 	bl	8000620 <printLog>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   HAL_Delay(500);
 8000444:	23fa      	movs	r3, #250	; 0xfa
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	0018      	movs	r0, r3
 800044a:	f000 faff 	bl	8000a4c <HAL_Delay>
 800044e:	e7f9      	b.n	8000444 <main+0x38>
 8000450:	08002f04 	.word	0x08002f04

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b093      	sub	sp, #76	; 0x4c
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	2414      	movs	r4, #20
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2334      	movs	r3, #52	; 0x34
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 f8cf 	bl	8002608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	0018      	movs	r0, r3
 800046e:	2310      	movs	r3, #16
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f002 f8c8 	bl	8002608 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fd21 	bl	8000ec4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2202      	movs	r2, #2
 8000486:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	0052      	lsls	r2, r2, #1
 800048e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2240      	movs	r2, #64	; 0x40
 800049a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fd59 	bl	8000f5c <HAL_RCC_OscConfig>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ae:	f000 f8b1 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2207      	movs	r2, #7
 80004b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2100      	movs	r1, #0
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f854 	bl	800157c <HAL_RCC_ClockConfig>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004d8:	f000 f89c 	bl	8000614 <Error_Handler>
  }
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b013      	add	sp, #76	; 0x4c
 80004e2:	bd90      	pop	{r4, r7, pc}

080004e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MX_USART1_UART_Init+0x94>)
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <MX_USART1_UART_Init+0x98>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <MX_USART1_UART_Init+0x94>)
 80004f0:	22e1      	movs	r2, #225	; 0xe1
 80004f2:	0252      	lsls	r2, r2, #9
 80004f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_USART1_UART_Init+0x94>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_USART1_UART_Init+0x94>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_USART1_UART_Init+0x94>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_USART1_UART_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_USART1_UART_Init+0x94>)
 800052e:	0018      	movs	r0, r3
 8000530:	f001 faf4 	bl	8001b1c <HAL_UART_Init>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000538:	f000 f86c 	bl	8000614 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_USART1_UART_Init+0x94>)
 800053e:	2100      	movs	r1, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f001 ff57 	bl	80023f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800054a:	f000 f863 	bl	8000614 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f001 ff8e 	bl	8002474 <HAL_UARTEx_SetRxFifoThreshold>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800055c:	f000 f85a 	bl	8000614 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_USART1_UART_Init+0x94>)
 8000562:	0018      	movs	r0, r3
 8000564:	f001 ff0c 	bl	8002380 <HAL_UARTEx_DisableFifoMode>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800056c:	f000 f852 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	2000008c 	.word	0x2000008c
 800057c:	40013800 	.word	0x40013800

08000580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 8000586:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <MX_USART2_UART_Init+0x64>)
 8000588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 800058c:	22e1      	movs	r2, #225	; 0xe1
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MX_USART2_UART_Init+0x60>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 faa6 	bl	8001b1c <HAL_UART_Init>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005d4:	f000 f81e 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	2000011c 	.word	0x2000011c
 80005e4:	40004400 	.word	0x40004400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_GPIO_Init+0x28>)
 80005f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_GPIO_Init+0x28>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	430a      	orrs	r2, r1
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <MX_GPIO_Init+0x28>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fe:	2201      	movs	r2, #1
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <printLog>:
#include <string.h>

extern UART_HandleTypeDef huart2;

void printLog(char* message)
{
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	46c6      	mov	lr, r8
 8000624:	b500      	push	{lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	61f8      	str	r0, [r7, #28]
 800062c:	466b      	mov	r3, sp
 800062e:	4698      	mov	r8, r3
    int msgLen = strlen(message);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fd62 	bl	80000fc <strlen>
 8000638:	0003      	movs	r3, r0
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char logMessage[msgLen + 3];
 800063c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800063e:	3303      	adds	r3, #3
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	62ba      	str	r2, [r7, #40]	; 0x28
 8000644:	001a      	movs	r2, r3
 8000646:	60ba      	str	r2, [r7, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	60fa      	str	r2, [r7, #12]
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	0002      	movs	r2, r0
 8000652:	0f52      	lsrs	r2, r2, #29
 8000654:	000e      	movs	r6, r1
 8000656:	00f6      	lsls	r6, r6, #3
 8000658:	617e      	str	r6, [r7, #20]
 800065a:	697e      	ldr	r6, [r7, #20]
 800065c:	4316      	orrs	r6, r2
 800065e:	617e      	str	r6, [r7, #20]
 8000660:	0002      	movs	r2, r0
 8000662:	00d2      	lsls	r2, r2, #3
 8000664:	613a      	str	r2, [r7, #16]
 8000666:	001a      	movs	r2, r3
 8000668:	603a      	str	r2, [r7, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	6838      	ldr	r0, [r7, #0]
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	0002      	movs	r2, r0
 8000674:	0f52      	lsrs	r2, r2, #29
 8000676:	000e      	movs	r6, r1
 8000678:	00f5      	lsls	r5, r6, #3
 800067a:	4315      	orrs	r5, r2
 800067c:	0002      	movs	r2, r0
 800067e:	00d4      	lsls	r4, r2, #3
 8000680:	3307      	adds	r3, #7
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	466a      	mov	r2, sp
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	469d      	mov	sp, r3
 800068c:	466b      	mov	r3, sp
 800068e:	3300      	adds	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    sprintf(logMessage, "%s\r\n", message);
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	490b      	ldr	r1, [pc, #44]	; (80006c4 <printLog+0xa4>)
 8000696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000698:	0018      	movs	r0, r3
 800069a:	f001 ffbd 	bl	8002618 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)logMessage, strlen(logMessage), 100);
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff fd2b 	bl	80000fc <strlen>
 80006a6:	0003      	movs	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <printLog+0xa8>)
 80006ae:	2364      	movs	r3, #100	; 0x64
 80006b0:	f001 fa8a 	bl	8001bc8 <HAL_UART_Transmit>
 80006b4:	46c5      	mov	sp, r8
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b00c      	add	sp, #48	; 0x30
 80006bc:	bc80      	pop	{r7}
 80006be:	46b8      	mov	r8, r7
 80006c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	08002f20 	.word	0x08002f20
 80006c8:	2000011c 	.word	0x2000011c

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x44>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_MspInit+0x44>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x44>)
 80006ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x44>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0549      	lsls	r1, r1, #21
 80006f4:	430a      	orrs	r2, r1
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_MspInit+0x44>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	055b      	lsls	r3, r3, #21
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b093      	sub	sp, #76	; 0x4c
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	2334      	movs	r3, #52	; 0x34
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	0018      	movs	r0, r3
 8000722:	2314      	movs	r3, #20
 8000724:	001a      	movs	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	f001 ff6e 	bl	8002608 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	241c      	movs	r4, #28
 800072e:	193b      	adds	r3, r7, r4
 8000730:	0018      	movs	r0, r3
 8000732:	2318      	movs	r3, #24
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f001 ff66 	bl	8002608 <memset>
  if(huart->Instance==USART1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a3d      	ldr	r2, [pc, #244]	; (8000838 <HAL_UART_MspInit+0x124>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d13d      	bne.n	80007c2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	193b      	adds	r3, r7, r4
 8000754:	0018      	movs	r0, r3
 8000756:	f001 f8bb 	bl	80018d0 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800075e:	f7ff ff59 	bl	8000614 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <HAL_UART_MspInit+0x128>)
 8000764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <HAL_UART_MspInit+0x128>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	01c9      	lsls	r1, r1, #7
 800076c:	430a      	orrs	r2, r1
 800076e:	641a      	str	r2, [r3, #64]	; 0x40
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <HAL_UART_MspInit+0x128>)
 8000772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	01db      	lsls	r3, r3, #7
 8000778:	4013      	ands	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <HAL_UART_MspInit+0x128>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <HAL_UART_MspInit+0x128>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <HAL_UART_MspInit+0x128>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000796:	2134      	movs	r1, #52	; 0x34
 8000798:	187b      	adds	r3, r7, r1
 800079a:	22c0      	movs	r2, #192	; 0xc0
 800079c:	00d2      	lsls	r2, r2, #3
 800079e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2202      	movs	r2, #2
 80007a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	187a      	adds	r2, r7, r1
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fa1e 	bl	8000bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c0:	e035      	b.n	800082e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <HAL_UART_MspInit+0x12c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d130      	bne.n	800082e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <HAL_UART_MspInit+0x128>)
 80007ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <HAL_UART_MspInit+0x128>)
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	0289      	lsls	r1, r1, #10
 80007d6:	430a      	orrs	r2, r1
 80007d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x128>)
 80007dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	4013      	ands	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_UART_MspInit+0x128>)
 80007ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_UART_MspInit+0x128>)
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x128>)
 80007f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f8:	2201      	movs	r2, #1
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000800:	2134      	movs	r1, #52	; 0x34
 8000802:	187b      	adds	r3, r7, r1
 8000804:	220c      	movs	r2, #12
 8000806:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2202      	movs	r2, #2
 800080c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	187a      	adds	r2, r7, r1
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 f9e7 	bl	8000bfc <HAL_GPIO_Init>
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b013      	add	sp, #76	; 0x4c
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40013800 	.word	0x40013800
 800083c:	40021000 	.word	0x40021000
 8000840:	40004400 	.word	0x40004400

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f8d4 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f001 fe86 	bl	80025b4 <__errno>
 80008a8:	0003      	movs	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	425b      	negs	r3, r3
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	18d2      	adds	r2, r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b006      	add	sp, #24
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20004800 	.word	0x20004800
 80008d4:	00000400 	.word	0x00000400
 80008d8:	200001ac 	.word	0x200001ac
 80008dc:	200001c8 	.word	0x200001c8

080008e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f7ff fff6 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f001 fe51 	bl	80025c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800091e:	f7ff fd75 	bl	800040c <main>

08000922 <LoopForever>:

LoopForever:
  b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000930:	08002fec 	.word	0x08002fec
  ldr r2, =_sbss
 8000934:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000938:	200001c4 	.word	0x200001c4

0800093c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>
	...

08000940 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_Init+0x3c>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_Init+0x3c>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0049      	lsls	r1, r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095a:	2003      	movs	r0, #3
 800095c:	f000 f810 	bl	8000980 <HAL_InitTick>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d003      	beq.n	800096c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e001      	b.n	8000970 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff feae 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_InitTick+0x88>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d02b      	beq.n	80009f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_InitTick+0x8c>)
 800099a:	681c      	ldr	r4, [r3, #0]
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_InitTick+0x88>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	0019      	movs	r1, r3
 80009a2:	23fa      	movs	r3, #250	; 0xfa
 80009a4:	0098      	lsls	r0, r3, #2
 80009a6:	f7ff fbbb 	bl	8000120 <__udivsi3>
 80009aa:	0003      	movs	r3, r0
 80009ac:	0019      	movs	r1, r3
 80009ae:	0020      	movs	r0, r4
 80009b0:	f7ff fbb6 	bl	8000120 <__udivsi3>
 80009b4:	0003      	movs	r3, r0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f913 	bl	8000be2 <HAL_SYSTICK_Config>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d112      	bne.n	80009e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d80a      	bhi.n	80009dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f8f2 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_InitTick+0x90>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e00d      	b.n	80009f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e008      	b.n	80009f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e6:	230f      	movs	r3, #15
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e003      	b.n	80009f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009f8:	230f      	movs	r3, #15
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	781b      	ldrb	r3, [r3, #0]
}
 80009fe:	0018      	movs	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b005      	add	sp, #20
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	18d2      	adds	r2, r2, r3
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200001b0 	.word	0x200001b0

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	200001b0 	.word	0x200001b0

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff fff0 	bl	8000a38 <HAL_GetTick>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	189b      	adds	r3, r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	f7ff ffe0 	bl	8000a38 <HAL_GetTick>
 8000a78:	0002      	movs	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa8:	d828      	bhi.n	8000afc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	; (8000b68 <__NVIC_SetPriority+0xd4>)
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	33c0      	adds	r3, #192	; 0xc0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	589b      	ldr	r3, [r3, r2]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	; 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	481f      	ldr	r0, [pc, #124]	; (8000b68 <__NVIC_SetPriority+0xd4>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	430a      	orrs	r2, r1
 8000af4:	33c0      	adds	r3, #192	; 0xc0
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000afa:	e031      	b.n	8000b60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <__NVIC_SetPriority+0xd8>)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	0019      	movs	r1, r3
 8000b04:	230f      	movs	r3, #15
 8000b06:	400b      	ands	r3, r1
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3306      	adds	r3, #6
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	18d3      	adds	r3, r2, r3
 8000b12:	3304      	adds	r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	400a      	ands	r2, r1
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	401a      	ands	r2, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	4003      	ands	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <__NVIC_SetPriority+0xd8>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	4023      	ands	r3, r4
 8000b50:	3b08      	subs	r3, #8
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	430a      	orrs	r2, r1
 8000b56:	3306      	adds	r3, #6
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	18c3      	adds	r3, r0, r3
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b003      	add	sp, #12
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	045b      	lsls	r3, r3, #17
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d301      	bcc.n	8000b88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b84:	2301      	movs	r3, #1
 8000b86:	e010      	b.n	8000baa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <SysTick_Config+0x44>)
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2103      	movs	r1, #3
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ff7c 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x44>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x44>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	1c02      	adds	r2, r0, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ffbf 	bl	8000b70 <SysTick_Config>
 8000bf2:	0003      	movs	r3, r0
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	e147      	b.n	8000e9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <HAL_GPIO_Init+0x28>
 8000c22:	e138      	b.n	8000e96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d005      	beq.n	8000c3c <HAL_GPIO_Init+0x40>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d130      	bne.n	8000c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	2201      	movs	r2, #1
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d017      	beq.n	8000cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2203      	movs	r2, #3
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d123      	bne.n	8000d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	58d3      	ldr	r3, [r2, r3]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	691a      	ldr	r2, [r3, #16]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2107      	movs	r1, #7
 8000d12:	400b      	ands	r3, r1
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	08da      	lsrs	r2, r3, #3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	6939      	ldr	r1, [r7, #16]
 8000d2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	23c0      	movs	r3, #192	; 0xc0
 8000d68:	029b      	lsls	r3, r3, #10
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d100      	bne.n	8000d70 <HAL_GPIO_Init+0x174>
 8000d6e:	e092      	b.n	8000e96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d70:	4a50      	ldr	r2, [pc, #320]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3318      	adds	r3, #24
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	589b      	ldr	r3, [r3, r2]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4013      	ands	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	220f      	movs	r2, #15
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x1ca>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <HAL_GPIO_Init+0x2bc>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x1c6>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_GPIO_Init+0x2c0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x1c2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <HAL_GPIO_Init+0x2c4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x1be>
 8000db6:	2303      	movs	r3, #3
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x1cc>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x1cc>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x1cc>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x1cc>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	2103      	movs	r1, #3
 8000dcc:	400a      	ands	r2, r1
 8000dce:	00d2      	lsls	r2, r2, #3
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000dd8:	4936      	ldr	r1, [pc, #216]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3318      	adds	r3, #24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43da      	mvns	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	035b      	lsls	r3, r3, #13
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43da      	mvns	r2, r3
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	039b      	lsls	r3, r3, #14
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e3c:	2384      	movs	r3, #132	; 0x84
 8000e3e:	58d3      	ldr	r3, [r2, r3]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	4013      	ands	r3, r2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e60:	4914      	ldr	r1, [pc, #80]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e62:	2284      	movs	r2, #132	; 0x84
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	58d3      	ldr	r3, [r2, r3]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	025b      	lsls	r3, r3, #9
 8000e82:	4013      	ands	r3, r2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8e:	4909      	ldr	r1, [pc, #36]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	d000      	beq.n	8000eaa <HAL_GPIO_Init+0x2ae>
 8000ea8:	e6b0      	b.n	8000c0c <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	50000400 	.word	0x50000400
 8000ebc:	50000800 	.word	0x50000800
 8000ec0:	50000c00 	.word	0x50000c00

08000ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d11f      	bne.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	0013      	movs	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	189b      	adds	r3, r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4912      	ldr	r1, [pc, #72]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff f912 	bl	8000120 <__udivsi3>
 8000efc:	0003      	movs	r3, r0
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f02:	e008      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e001      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e009      	b.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d0ed      	beq.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40007000 	.word	0x40007000
 8000f38:	fffff9ff 	.word	0xfffff9ff
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	000f4240 	.word	0x000f4240

08000f44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	23e0      	movs	r3, #224	; 0xe0
 8000f4e:	01db      	lsls	r3, r3, #7
 8000f50:	4013      	ands	r3, r2
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e2f3      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_RCC_OscConfig+0x1e>
 8000f78:	e07c      	b.n	8001074 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f7a:	4bc3      	ldr	r3, [pc, #780]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2238      	movs	r2, #56	; 0x38
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f84:	4bc0      	ldr	r3, [pc, #768]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b10      	cmp	r3, #16
 8000f92:	d102      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3e>
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d002      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	4bb9      	ldr	r3, [pc, #740]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	029b      	lsls	r3, r3, #10
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d062      	beq.n	8001072 <HAL_RCC_OscConfig+0x116>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d15e      	bne.n	8001072 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e2ce      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x78>
 8000fc4:	4bb0      	ldr	r3, [pc, #704]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4baf      	ldr	r3, [pc, #700]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0249      	lsls	r1, r1, #9
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e020      	b.n	8001016 <HAL_RCC_OscConfig+0xba>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	23a0      	movs	r3, #160	; 0xa0
 8000fda:	02db      	lsls	r3, r3, #11
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d10e      	bne.n	8000ffe <HAL_RCC_OscConfig+0xa2>
 8000fe0:	4ba9      	ldr	r3, [pc, #676]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4ba8      	ldr	r3, [pc, #672]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	02c9      	lsls	r1, r1, #11
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	4ba6      	ldr	r3, [pc, #664]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4ba5      	ldr	r3, [pc, #660]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e00b      	b.n	8001016 <HAL_RCC_OscConfig+0xba>
 8000ffe:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4ba1      	ldr	r3, [pc, #644]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001004:	49a1      	ldr	r1, [pc, #644]	; (800128c <HAL_RCC_OscConfig+0x330>)
 8001006:	400a      	ands	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	4b9f      	ldr	r3, [pc, #636]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b9e      	ldr	r3, [pc, #632]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001010:	499f      	ldr	r1, [pc, #636]	; (8001290 <HAL_RCC_OscConfig+0x334>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d014      	beq.n	8001048 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	f7ff fd0b 	bl	8000a38 <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fd06 	bl	8000a38 <HAL_GetTick>
 800102c:	0002      	movs	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e28d      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103a:	4b93      	ldr	r3, [pc, #588]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0xcc>
 8001046:	e015      	b.n	8001074 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fcf6 	bl	8000a38 <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001052:	f7ff fcf1 	bl	8000a38 <HAL_GetTick>
 8001056:	0002      	movs	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b64      	cmp	r3, #100	; 0x64
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e278      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001064:	4b88      	ldr	r3, [pc, #544]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	d1f0      	bne.n	8001052 <HAL_RCC_OscConfig+0xf6>
 8001070:	e000      	b.n	8001074 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2202      	movs	r2, #2
 800107a:	4013      	ands	r3, r2
 800107c:	d100      	bne.n	8001080 <HAL_RCC_OscConfig+0x124>
 800107e:	e099      	b.n	80011b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001080:	4b81      	ldr	r3, [pc, #516]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2238      	movs	r2, #56	; 0x38
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2203      	movs	r2, #3
 8001090:	4013      	ands	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b10      	cmp	r3, #16
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x144>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d002      	beq.n	80010a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d135      	bne.n	8001112 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	d005      	beq.n	80010be <HAL_RCC_OscConfig+0x162>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e24b      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a74      	ldr	r2, [pc, #464]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	021a      	lsls	r2, r3, #8
 80010ce:	4b6e      	ldr	r3, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80010d0:	430a      	orrs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d112      	bne.n	8001100 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010da:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x33c>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	4b67      	ldr	r3, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010ee:	4b66      	ldr	r3, [pc, #408]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0adb      	lsrs	r3, r3, #11
 80010f4:	2207      	movs	r2, #7
 80010f6:	4013      	ands	r3, r2
 80010f8:	4a68      	ldr	r2, [pc, #416]	; (800129c <HAL_RCC_OscConfig+0x340>)
 80010fa:	40da      	lsrs	r2, r3
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x344>)
 80010fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <HAL_RCC_OscConfig+0x348>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fc3b 	bl	8000980 <HAL_InitTick>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d051      	beq.n	80011b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e221      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d030      	beq.n	800117c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a5e      	ldr	r2, [pc, #376]	; (8001298 <HAL_RCC_OscConfig+0x33c>)
 8001120:	4013      	ands	r3, r2
 8001122:	0019      	movs	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800112e:	4b56      	ldr	r3, [pc, #344]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0049      	lsls	r1, r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113c:	f7ff fc7c 	bl	8000a38 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc77 	bl	8000a38 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1fe      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4013      	ands	r3, r2
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800116a:	4013      	ands	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	021a      	lsls	r2, r3, #8
 8001174:	4b44      	ldr	r3, [pc, #272]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	e01b      	b.n	80011b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800117c:	4b42      	ldr	r3, [pc, #264]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001182:	4949      	ldr	r1, [pc, #292]	; (80012a8 <HAL_RCC_OscConfig+0x34c>)
 8001184:	400a      	ands	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fc56 	bl	8000a38 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fc51 	bl	8000a38 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e1d8      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4013      	ands	r3, r2
 80011ae:	d1f0      	bne.n	8001192 <HAL_RCC_OscConfig+0x236>
 80011b0:	e000      	b.n	80011b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2208      	movs	r2, #8
 80011ba:	4013      	ands	r3, r2
 80011bc:	d047      	beq.n	800124e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2238      	movs	r2, #56	; 0x38
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b18      	cmp	r3, #24
 80011c8:	d10a      	bne.n	80011e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d03c      	beq.n	800124e <HAL_RCC_OscConfig+0x2f2>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d138      	bne.n	800124e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e1ba      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc20 	bl	8000a38 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc1b 	bl	8000a38 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1a2      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d0f1      	beq.n	80011fe <HAL_RCC_OscConfig+0x2a2>
 800121a:	e018      	b.n	800124e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 800121e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc06 	bl	8000a38 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff fc01 	bl	8000a38 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e188      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d1f1      	bne.n	8001232 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2204      	movs	r2, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x2fe>
 8001258:	e0c6      	b.n	80013e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	231f      	movs	r3, #31
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2238      	movs	r2, #56	; 0x38
 8001268:	4013      	ands	r3, r2
 800126a:	2b20      	cmp	r3, #32
 800126c:	d11e      	bne.n	80012ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_RCC_OscConfig+0x32c>)
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	2202      	movs	r2, #2
 8001274:	4013      	ands	r3, r2
 8001276:	d100      	bne.n	800127a <HAL_RCC_OscConfig+0x31e>
 8001278:	e0b6      	b.n	80013e8 <HAL_RCC_OscConfig+0x48c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d000      	beq.n	8001284 <HAL_RCC_OscConfig+0x328>
 8001282:	e0b1      	b.n	80013e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e166      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
 8001288:	40021000 	.word	0x40021000
 800128c:	fffeffff 	.word	0xfffeffff
 8001290:	fffbffff 	.word	0xfffbffff
 8001294:	ffff80ff 	.word	0xffff80ff
 8001298:	ffffc7ff 	.word	0xffffc7ff
 800129c:	00f42400 	.word	0x00f42400
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000004 	.word	0x20000004
 80012a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012ac:	4bac      	ldr	r3, [pc, #688]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80012ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	055b      	lsls	r3, r3, #21
 80012b4:	4013      	ands	r3, r2
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_OscConfig+0x360>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x362>
 80012bc:	2300      	movs	r3, #0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d011      	beq.n	80012e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4ba7      	ldr	r3, [pc, #668]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80012c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012c6:	4ba6      	ldr	r3, [pc, #664]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0549      	lsls	r1, r1, #21
 80012cc:	430a      	orrs	r2, r1
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80012d0:	4ba3      	ldr	r3, [pc, #652]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80012d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	055b      	lsls	r3, r3, #21
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012de:	231f      	movs	r3, #31
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e6:	4b9f      	ldr	r3, [pc, #636]	; (8001564 <HAL_RCC_OscConfig+0x608>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d11a      	bne.n	8001328 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f2:	4b9c      	ldr	r3, [pc, #624]	; (8001564 <HAL_RCC_OscConfig+0x608>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b9b      	ldr	r3, [pc, #620]	; (8001564 <HAL_RCC_OscConfig+0x608>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0049      	lsls	r1, r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb9a 	bl	8000a38 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fb95 	bl	8000a38 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e11c      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131c:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x608>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x3e2>
 8001330:	4b8b      	ldr	r3, [pc, #556]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001334:	4b8a      	ldr	r3, [pc, #552]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x41c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x404>
 8001346:	4b86      	ldr	r3, [pc, #536]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800134c:	2104      	movs	r1, #4
 800134e:	430a      	orrs	r2, r1
 8001350:	65da      	str	r2, [r3, #92]	; 0x5c
 8001352:	4b83      	ldr	r3, [pc, #524]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001358:	2101      	movs	r1, #1
 800135a:	430a      	orrs	r2, r1
 800135c:	65da      	str	r2, [r3, #92]	; 0x5c
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x41c>
 8001360:	4b7f      	ldr	r3, [pc, #508]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001364:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	65da      	str	r2, [r3, #92]	; 0x5c
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800136e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001370:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001372:	2104      	movs	r1, #4
 8001374:	438a      	bics	r2, r1
 8001376:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d014      	beq.n	80013aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fb5a 	bl	8000a38 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001388:	e009      	b.n	800139e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fb55 	bl	8000a38 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a74      	ldr	r2, [pc, #464]	; (8001568 <HAL_RCC_OscConfig+0x60c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0db      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800139e:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80013a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x42e>
 80013a8:	e013      	b.n	80013d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb45 	bl	8000a38 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013b2:	e009      	b.n	80013c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fb40 	bl	8000a38 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a6a      	ldr	r2, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x60c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0c6      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c8:	4b65      	ldr	r3, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013d2:	231f      	movs	r3, #31
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80013de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013e0:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80013e2:	4962      	ldr	r1, [pc, #392]	; (800156c <HAL_RCC_OscConfig+0x610>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d100      	bne.n	80013f2 <HAL_RCC_OscConfig+0x496>
 80013f0:	e0b0      	b.n	8001554 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2238      	movs	r2, #56	; 0x38
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d100      	bne.n	8001400 <HAL_RCC_OscConfig+0x4a4>
 80013fe:	e078      	b.n	80014f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d153      	bne.n	80014b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b54      	ldr	r3, [pc, #336]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800140e:	4958      	ldr	r1, [pc, #352]	; (8001570 <HAL_RCC_OscConfig+0x614>)
 8001410:	400a      	ands	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fb10 	bl	8000a38 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb0b 	bl	8000a38 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e092      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	049b      	lsls	r3, r3, #18
 8001438:	4013      	ands	r3, r2
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0x618>)
 8001442:	4013      	ands	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	431a      	orrs	r2, r3
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0449      	lsls	r1, r1, #17
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0549      	lsls	r1, r1, #21
 8001482:	430a      	orrs	r2, r1
 8001484:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fad7 	bl	8000a38 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fad2 	bl	8000a38 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e059      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	049b      	lsls	r3, r3, #18
 80014aa:	4013      	ands	r3, r2
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x534>
 80014ae:	e051      	b.n	8001554 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80014b6:	492e      	ldr	r1, [pc, #184]	; (8001570 <HAL_RCC_OscConfig+0x614>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fabc 	bl	8000a38 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fab7 	bl	8000a38 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e03e      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	049b      	lsls	r3, r3, #18
 80014e0:	4013      	ands	r3, r2
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 80014ea:	4923      	ldr	r1, [pc, #140]	; (8001578 <HAL_RCC_OscConfig+0x61c>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	e030      	b.n	8001554 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e02b      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_RCC_OscConfig+0x604>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2203      	movs	r2, #3
 8001508:	401a      	ands	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	429a      	cmp	r2, r3
 8001510:	d11e      	bne.n	8001550 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2270      	movs	r2, #112	; 0x70
 8001516:	401a      	ands	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d117      	bne.n	8001550 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	23fe      	movs	r3, #254	; 0xfe
 8001524:	01db      	lsls	r3, r3, #7
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d10e      	bne.n	8001550 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	23f8      	movs	r3, #248	; 0xf8
 8001536:	039b      	lsls	r3, r3, #14
 8001538:	401a      	ands	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d106      	bne.n	8001550 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	0f5b      	lsrs	r3, r3, #29
 8001546:	075a      	lsls	r2, r3, #29
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b008      	add	sp, #32
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	40021000 	.word	0x40021000
 8001564:	40007000 	.word	0x40007000
 8001568:	00001388 	.word	0x00001388
 800156c:	efffffff 	.word	0xefffffff
 8001570:	feffffff 	.word	0xfeffffff
 8001574:	1fc1808c 	.word	0x1fc1808c
 8001578:	effefffc 	.word	0xeffefffc

0800157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0e9      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2207      	movs	r2, #7
 8001596:	4013      	ands	r3, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d91e      	bls.n	80015dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b73      	ldr	r3, [pc, #460]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2207      	movs	r2, #7
 80015a4:	4393      	bics	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fa42 	bl	8000a38 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b8:	e009      	b.n	80015ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff fa3d 	bl	8000a38 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_RCC_ClockConfig+0x1f4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0ca      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d1ee      	bne.n	80015ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d015      	beq.n	8001612 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d006      	beq.n	80015fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015f0:	4b60      	ldr	r3, [pc, #384]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 80015f6:	21e0      	movs	r1, #224	; 0xe0
 80015f8:	01c9      	lsls	r1, r1, #7
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	4a5d      	ldr	r2, [pc, #372]	; (8001778 <HAL_RCC_ClockConfig+0x1fc>)
 8001604:	4013      	ands	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d057      	beq.n	80016cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4013      	ands	r3, r2
 800162e:	d12b      	bne.n	8001688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e097      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d107      	bne.n	800164c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	049b      	lsls	r3, r3, #18
 8001644:	4013      	ands	r3, r2
 8001646:	d11f      	bne.n	8001688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e08b      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4013      	ands	r3, r2
 800165e:	d113      	bne.n	8001688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e07f      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d106      	bne.n	800167a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d108      	bne.n	8001688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e074      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167a:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e06d      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2207      	movs	r2, #7
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 8001698:	430a      	orrs	r2, r1
 800169a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169c:	f7ff f9cc 	bl	8000a38 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f9c7 	bl	8000a38 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_RCC_ClockConfig+0x1f4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e054      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2238      	movs	r2, #56	; 0x38
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1ec      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2207      	movs	r2, #7
 80016d2:	4013      	ands	r3, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d21e      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2207      	movs	r2, #7
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016ec:	f7ff f9a4 	bl	8000a38 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f4:	e009      	b.n	800170a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f6:	f7ff f99f 	bl	8000a38 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_RCC_ClockConfig+0x1f4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e02c      	b.n	8001764 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2207      	movs	r2, #7
 8001710:	4013      	ands	r3, r2
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_RCC_ClockConfig+0x200>)
 8001728:	4013      	ands	r3, r2
 800172a:	0019      	movs	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001736:	f000 f829 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800173a:	0001      	movs	r1, r0
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RCC_ClockConfig+0x1f8>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	220f      	movs	r2, #15
 8001744:	401a      	ands	r2, r3
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_RCC_ClockConfig+0x204>)
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	58d3      	ldr	r3, [r2, r3]
 800174c:	221f      	movs	r2, #31
 800174e:	4013      	ands	r3, r2
 8001750:	000a      	movs	r2, r1
 8001752:	40da      	lsrs	r2, r3
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x208>)
 8001756:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_RCC_ClockConfig+0x20c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff f90f 	bl	8000980 <HAL_InitTick>
 8001762:	0003      	movs	r3, r0
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40022000 	.word	0x40022000
 8001770:	00001388 	.word	0x00001388
 8001774:	40021000 	.word	0x40021000
 8001778:	fffff0ff 	.word	0xfffff0ff
 800177c:	ffff8fff 	.word	0xffff8fff
 8001780:	08002f28 	.word	0x08002f28
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001792:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2238      	movs	r2, #56	; 0x38
 8001798:	4013      	ands	r3, r2
 800179a:	d10f      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0adb      	lsrs	r3, r3, #11
 80017a2:	2207      	movs	r2, #7
 80017a4:	4013      	ands	r3, r2
 80017a6:	2201      	movs	r2, #1
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	4835      	ldr	r0, [pc, #212]	; (8001888 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017b2:	f7fe fcb5 	bl	8000120 <__udivsi3>
 80017b6:	0003      	movs	r3, r0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e05d      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2238      	movs	r2, #56	; 0x38
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_GetSysClockFreq+0x100>)
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	e054      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2238      	movs	r2, #56	; 0x38
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d138      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2203      	movs	r2, #3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	2207      	movs	r2, #7
 80017ec:	4013      	ands	r3, r2
 80017ee:	3301      	adds	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d10d      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	4824      	ldr	r0, [pc, #144]	; (800188c <HAL_RCC_GetSysClockFreq+0x100>)
 80017fc:	f7fe fc90 	bl	8000120 <__udivsi3>
 8001800:	0003      	movs	r3, r0
 8001802:	0019      	movs	r1, r3
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	227f      	movs	r2, #127	; 0x7f
 800180c:	4013      	ands	r3, r2
 800180e:	434b      	muls	r3, r1
 8001810:	617b      	str	r3, [r7, #20]
        break;
 8001812:	e00d      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	481c      	ldr	r0, [pc, #112]	; (8001888 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001818:	f7fe fc82 	bl	8000120 <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	0019      	movs	r1, r3
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	227f      	movs	r2, #127	; 0x7f
 8001828:	4013      	ands	r3, r2
 800182a:	434b      	muls	r3, r1
 800182c:	617b      	str	r3, [r7, #20]
        break;
 800182e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0f5b      	lsrs	r3, r3, #29
 8001836:	2207      	movs	r2, #7
 8001838:	4013      	ands	r3, r2
 800183a:	3301      	adds	r3, #1
 800183c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	6978      	ldr	r0, [r7, #20]
 8001842:	f7fe fc6d 	bl	8000120 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e015      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2238      	movs	r2, #56	; 0x38
 8001852:	4013      	ands	r3, r2
 8001854:	2b20      	cmp	r3, #32
 8001856:	d103      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2238      	movs	r2, #56	; 0x38
 8001866:	4013      	ands	r3, r2
 8001868:	2b18      	cmp	r3, #24
 800186a:	d103      	bne.n	8001874 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800186c:	23fa      	movs	r3, #250	; 0xfa
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	e001      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001878:	693b      	ldr	r3, [r7, #16]
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b006      	add	sp, #24
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40021000 	.word	0x40021000
 8001888:	00f42400 	.word	0x00f42400
 800188c:	007a1200 	.word	0x007a1200

08001890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80018a8:	f7ff fff2 	bl	8001890 <HAL_RCC_GetHCLKFreq>
 80018ac:	0004      	movs	r4, r0
 80018ae:	f7ff fb49 	bl	8000f44 <LL_RCC_GetAPB1Prescaler>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0b1a      	lsrs	r2, r3, #12
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	58d3      	ldr	r3, [r2, r3]
 80018bc:	221f      	movs	r2, #31
 80018be:	4013      	ands	r3, r2
 80018c0:	40dc      	lsrs	r4, r3
 80018c2:	0023      	movs	r3, r4
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	08002f68 	.word	0x08002f68

080018d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80018d8:	2313      	movs	r3, #19
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018e0:	2312      	movs	r3, #18
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	029b      	lsls	r3, r3, #10
 80018f0:	4013      	ands	r3, r2
 80018f2:	d100      	bne.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018f4:	e0a3      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	2011      	movs	r0, #17
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fe:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	055b      	lsls	r3, r3, #21
 8001906:	4013      	ands	r3, r2
 8001908:	d110      	bne.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800190c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800190e:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0549      	lsls	r1, r1, #21
 8001914:	430a      	orrs	r2, r1
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800191a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	055b      	lsls	r3, r3, #21
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	183b      	adds	r3, r7, r0
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800192c:	4b74      	ldr	r3, [pc, #464]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800193a:	f7ff f87d 	bl	8000a38 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001942:	e00b      	b.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001944:	f7ff f878 	bl	8000a38 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d904      	bls.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001952:	2313      	movs	r3, #19
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2203      	movs	r2, #3
 8001958:	701a      	strb	r2, [r3, #0]
        break;
 800195a:	e005      	b.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4013      	ands	r3, r2
 8001966:	d0ed      	beq.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001968:	2313      	movs	r3, #19
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d154      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4013      	ands	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d019      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	429a      	cmp	r2, r3
 800198c:	d014      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800198e:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	4a5c      	ldr	r2, [pc, #368]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001998:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800199a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800199c:	4b57      	ldr	r3, [pc, #348]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	0249      	lsls	r1, r1, #9
 80019a2:	430a      	orrs	r2, r1
 80019a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019a6:	4b55      	ldr	r3, [pc, #340]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019ac:	4956      	ldr	r1, [pc, #344]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019b2:	4b52      	ldr	r3, [pc, #328]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4013      	ands	r3, r2
 80019be:	d016      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f83a 	bl	8000a38 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c8:	e00c      	b.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f835 	bl	8000a38 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4a4d      	ldr	r2, [pc, #308]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d904      	bls.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80019da:	2313      	movs	r3, #19
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2203      	movs	r2, #3
 80019e0:	701a      	strb	r2, [r3, #0]
            break;
 80019e2:	e004      	b.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e4:	4b45      	ldr	r3, [pc, #276]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d0ed      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80019ee:	2313      	movs	r3, #19
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	4a41      	ldr	r2, [pc, #260]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a0c:	e00c      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2213      	movs	r2, #19
 8001a14:	18ba      	adds	r2, r7, r2
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	e005      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2213      	movs	r2, #19
 8001a22:	18ba      	adds	r2, r7, r2
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a28:	2311      	movs	r3, #17
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d009      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2220      	movs	r2, #32
 8001a62:	4013      	ands	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	d015      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	0899      	lsrs	r1, r3, #2
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	0249      	lsls	r1, r1, #9
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d016      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	01db      	lsls	r3, r3, #7
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d106      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001aec:	2312      	movs	r3, #18
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	781b      	ldrb	r3, [r3, #0]
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b006      	add	sp, #24
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40007000 	.word	0x40007000
 8001b04:	fffffcff 	.word	0xfffffcff
 8001b08:	fffeffff 	.word	0xfffeffff
 8001b0c:	00001388 	.word	0x00001388
 8001b10:	efffffff 	.word	0xefffffff
 8001b14:	ffffcfff 	.word	0xffffcfff
 8001b18:	ffff3fff 	.word	0xffff3fff

08001b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e046      	b.n	8001bbc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2284      	movs	r2, #132	; 0x84
 8001b32:	589b      	ldr	r3, [r3, r2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7fe fde6 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2284      	movs	r2, #132	; 0x84
 8001b4c:	2124      	movs	r1, #36	; 0x24
 8001b4e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f8dc 	bl	8001d20 <UART_SetConfig>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e024      	b.n	8001bbc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 fa39 	bl	8001ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <HAL_UART_Init+0xa8>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	212a      	movs	r1, #42	; 0x2a
 8001b9e:	438a      	bics	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 fad1 	bl	800215c <UART_CheckIdleState>
 8001bba:	0003      	movs	r3, r0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	ffffb7ff 	.word	0xffffb7ff

08001bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	1dbb      	adds	r3, r7, #6
 8001bd6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2284      	movs	r2, #132	; 0x84
 8001bdc:	589b      	ldr	r3, [r3, r2]
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d000      	beq.n	8001be4 <HAL_UART_Transmit+0x1c>
 8001be2:	e097      	b.n	8001d14 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_UART_Transmit+0x2a>
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e08f      	b.n	8001d16 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	015b      	lsls	r3, r3, #5
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d109      	bne.n	8001c16 <HAL_UART_Transmit+0x4e>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d001      	beq.n	8001c16 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	5c9b      	ldrb	r3, [r3, r2]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_UART_Transmit+0x5c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e078      	b.n	8001d16 <HAL_UART_Transmit+0x14e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	2101      	movs	r1, #1
 8001c2a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	228c      	movs	r2, #140	; 0x8c
 8001c30:	2100      	movs	r1, #0
 8001c32:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2284      	movs	r2, #132	; 0x84
 8001c38:	2121      	movs	r1, #33	; 0x21
 8001c3a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe fefc 	bl	8000a38 <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1dba      	adds	r2, r7, #6
 8001c48:	2154      	movs	r1, #84	; 0x54
 8001c4a:	8812      	ldrh	r2, [r2, #0]
 8001c4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1dba      	adds	r2, r7, #6
 8001c52:	2156      	movs	r1, #86	; 0x56
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	015b      	lsls	r3, r3, #5
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d108      	bne.n	8001c76 <HAL_UART_Transmit+0xae>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d104      	bne.n	8001c76 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e003      	b.n	8001c7e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001c86:	e02c      	b.n	8001ce2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	0013      	movs	r3, r2
 8001c92:	2200      	movs	r2, #0
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	f000 faab 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e039      	b.n	8001d16 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	05d2      	lsls	r2, r2, #23
 8001cb4:	0dd2      	lsrs	r2, r2, #23
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	e007      	b.n	8001cd0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2256      	movs	r2, #86	; 0x56
 8001cd4:	5a9b      	ldrh	r3, [r3, r2]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2256      	movs	r2, #86	; 0x56
 8001ce0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2256      	movs	r2, #86	; 0x56
 8001ce6:	5a9b      	ldrh	r3, [r3, r2]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1cc      	bne.n	8001c88 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	f000 fa78 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e006      	b.n	8001d16 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2284      	movs	r2, #132	; 0x84
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b008      	add	sp, #32
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d28:	231a      	movs	r3, #26
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4aa1      	ldr	r2, [pc, #644]	; (8001fd4 <UART_SetConfig+0x2b4>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a9c      	ldr	r2, [pc, #624]	; (8001fd8 <UART_SetConfig+0x2b8>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a93      	ldr	r2, [pc, #588]	; (8001fdc <UART_SetConfig+0x2bc>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	220f      	movs	r2, #15
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a89      	ldr	r2, [pc, #548]	; (8001fe0 <UART_SetConfig+0x2c0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d127      	bne.n	8001e0e <UART_SetConfig+0xee>
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <UART_SetConfig+0x2c4>)
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d017      	beq.n	8001dfa <UART_SetConfig+0xda>
 8001dca:	d81b      	bhi.n	8001e04 <UART_SetConfig+0xe4>
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d00a      	beq.n	8001de6 <UART_SetConfig+0xc6>
 8001dd0:	d818      	bhi.n	8001e04 <UART_SetConfig+0xe4>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <UART_SetConfig+0xbc>
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d00a      	beq.n	8001df0 <UART_SetConfig+0xd0>
 8001dda:	e013      	b.n	8001e04 <UART_SetConfig+0xe4>
 8001ddc:	231b      	movs	r3, #27
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e021      	b.n	8001e2a <UART_SetConfig+0x10a>
 8001de6:	231b      	movs	r3, #27
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2202      	movs	r2, #2
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e01c      	b.n	8001e2a <UART_SetConfig+0x10a>
 8001df0:	231b      	movs	r3, #27
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2204      	movs	r2, #4
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e017      	b.n	8001e2a <UART_SetConfig+0x10a>
 8001dfa:	231b      	movs	r3, #27
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2208      	movs	r2, #8
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e012      	b.n	8001e2a <UART_SetConfig+0x10a>
 8001e04:	231b      	movs	r3, #27
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2210      	movs	r2, #16
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e00d      	b.n	8001e2a <UART_SetConfig+0x10a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a75      	ldr	r2, [pc, #468]	; (8001fe8 <UART_SetConfig+0x2c8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d104      	bne.n	8001e22 <UART_SetConfig+0x102>
 8001e18:	231b      	movs	r3, #27
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e003      	b.n	8001e2a <UART_SetConfig+0x10a>
 8001e22:	231b      	movs	r3, #27
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2210      	movs	r2, #16
 8001e28:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d000      	beq.n	8001e38 <UART_SetConfig+0x118>
 8001e36:	e065      	b.n	8001f04 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8001e38:	231b      	movs	r3, #27
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d015      	beq.n	8001e6e <UART_SetConfig+0x14e>
 8001e42:	dc18      	bgt.n	8001e76 <UART_SetConfig+0x156>
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00d      	beq.n	8001e64 <UART_SetConfig+0x144>
 8001e48:	dc15      	bgt.n	8001e76 <UART_SetConfig+0x156>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <UART_SetConfig+0x134>
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d005      	beq.n	8001e5e <UART_SetConfig+0x13e>
 8001e52:	e010      	b.n	8001e76 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e54:	f7ff fd26 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	617b      	str	r3, [r7, #20]
        break;
 8001e5c:	e012      	b.n	8001e84 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <UART_SetConfig+0x2cc>)
 8001e60:	617b      	str	r3, [r7, #20]
        break;
 8001e62:	e00f      	b.n	8001e84 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e64:	f7ff fc92 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	617b      	str	r3, [r7, #20]
        break;
 8001e6c:	e00a      	b.n	8001e84 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	617b      	str	r3, [r7, #20]
        break;
 8001e74:	e006      	b.n	8001e84 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001e7a:	231a      	movs	r3, #26
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
        break;
 8001e82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d100      	bne.n	8001e8c <UART_SetConfig+0x16c>
 8001e8a:	e08d      	b.n	8001fa8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <UART_SetConfig+0x2d0>)
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	5ad3      	ldrh	r3, [r2, r3]
 8001e96:	0019      	movs	r1, r3
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f7fe f941 	bl	8000120 <__udivsi3>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	005a      	lsls	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	18d2      	adds	r2, r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0019      	movs	r1, r3
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	f7fe f935 	bl	8000120 <__udivsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d91c      	bls.n	8001efa <UART_SetConfig+0x1da>
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d217      	bcs.n	8001efa <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	200e      	movs	r0, #14
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	183b      	adds	r3, r7, r0
 8001ee6:	183a      	adds	r2, r7, r0
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	183a      	adds	r2, r7, r0
 8001ef4:	8812      	ldrh	r2, [r2, #0]
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	e056      	b.n	8001fa8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001efa:	231a      	movs	r3, #26
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e051      	b.n	8001fa8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f04:	231b      	movs	r3, #27
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d015      	beq.n	8001f3a <UART_SetConfig+0x21a>
 8001f0e:	dc18      	bgt.n	8001f42 <UART_SetConfig+0x222>
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d00d      	beq.n	8001f30 <UART_SetConfig+0x210>
 8001f14:	dc15      	bgt.n	8001f42 <UART_SetConfig+0x222>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <UART_SetConfig+0x200>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d005      	beq.n	8001f2a <UART_SetConfig+0x20a>
 8001f1e:	e010      	b.n	8001f42 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f20:	f7ff fcc0 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 8001f24:	0003      	movs	r3, r0
 8001f26:	617b      	str	r3, [r7, #20]
        break;
 8001f28:	e012      	b.n	8001f50 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <UART_SetConfig+0x2cc>)
 8001f2c:	617b      	str	r3, [r7, #20]
        break;
 8001f2e:	e00f      	b.n	8001f50 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f30:	f7ff fc2c 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8001f34:	0003      	movs	r3, r0
 8001f36:	617b      	str	r3, [r7, #20]
        break;
 8001f38:	e00a      	b.n	8001f50 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	617b      	str	r3, [r7, #20]
        break;
 8001f40:	e006      	b.n	8001f50 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001f46:	231a      	movs	r3, #26
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
        break;
 8001f4e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d028      	beq.n	8001fa8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <UART_SetConfig+0x2d0>)
 8001f5c:	0052      	lsls	r2, r2, #1
 8001f5e:	5ad3      	ldrh	r3, [r2, r3]
 8001f60:	0019      	movs	r1, r3
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7fe f8dc 	bl	8000120 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	18d2      	adds	r2, r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0019      	movs	r1, r3
 8001f7a:	0010      	movs	r0, r2
 8001f7c:	f7fe f8d0 	bl	8000120 <__udivsi3>
 8001f80:	0003      	movs	r3, r0
 8001f82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	d90a      	bls.n	8001fa0 <UART_SetConfig+0x280>
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d205      	bcs.n	8001fa0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	e003      	b.n	8001fa8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001fa0:	231a      	movs	r3, #26
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	226a      	movs	r2, #106	; 0x6a
 8001fac:	2101      	movs	r1, #1
 8001fae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2268      	movs	r2, #104	; 0x68
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8001fc4:	231a      	movs	r3, #26
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b008      	add	sp, #32
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	cfff69f3 	.word	0xcfff69f3
 8001fd8:	ffffcfff 	.word	0xffffcfff
 8001fdc:	11fff4ff 	.word	0x11fff4ff
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40004400 	.word	0x40004400
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	08002f88 	.word	0x08002f88

08001ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2201      	movs	r2, #1
 8002002:	4013      	ands	r3, r2
 8002004:	d00b      	beq.n	800201e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	; (8002138 <UART_AdvFeatureConfig+0x144>)
 800200e:	4013      	ands	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d00b      	beq.n	8002040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a43      	ldr	r2, [pc, #268]	; (800213c <UART_AdvFeatureConfig+0x148>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	d00b      	beq.n	8002062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <UART_AdvFeatureConfig+0x14c>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2208      	movs	r2, #8
 8002068:	4013      	ands	r3, r2
 800206a:	d00b      	beq.n	8002084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <UART_AdvFeatureConfig+0x150>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	2210      	movs	r2, #16
 800208a:	4013      	ands	r3, r2
 800208c:	d00b      	beq.n	80020a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <UART_AdvFeatureConfig+0x154>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	2220      	movs	r2, #32
 80020ac:	4013      	ands	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a25      	ldr	r2, [pc, #148]	; (800214c <UART_AdvFeatureConfig+0x158>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	4013      	ands	r3, r2
 80020d0:	d01d      	beq.n	800210e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <UART_AdvFeatureConfig+0x15c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	035b      	lsls	r3, r3, #13
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10b      	bne.n	800210e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <UART_AdvFeatureConfig+0x160>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	4013      	ands	r3, r2
 8002116:	d00b      	beq.n	8002130 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <UART_AdvFeatureConfig+0x164>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
  }
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	fffdffff 	.word	0xfffdffff
 800213c:	fffeffff 	.word	0xfffeffff
 8002140:	fffbffff 	.word	0xfffbffff
 8002144:	ffff7fff 	.word	0xffff7fff
 8002148:	ffffefff 	.word	0xffffefff
 800214c:	ffffdfff 	.word	0xffffdfff
 8002150:	ffefffff 	.word	0xffefffff
 8002154:	ff9fffff 	.word	0xff9fffff
 8002158:	fff7ffff 	.word	0xfff7ffff

0800215c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	228c      	movs	r2, #140	; 0x8c
 8002168:	2100      	movs	r1, #0
 800216a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800216c:	f7fe fc64 	bl	8000a38 <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2208      	movs	r2, #8
 800217c:	4013      	ands	r3, r2
 800217e:	2b08      	cmp	r3, #8
 8002180:	d10c      	bne.n	800219c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	0391      	lsls	r1, r2, #14
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <UART_CheckIdleState+0x90>)
 800218c:	9200      	str	r2, [sp, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	f000 f82e 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d001      	beq.n	800219c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e023      	b.n	80021e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2204      	movs	r2, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d10c      	bne.n	80021c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	03d1      	lsls	r1, r2, #15
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <UART_CheckIdleState+0x90>)
 80021b4:	9200      	str	r2, [sp, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f000 f81a 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 80021bc:	1e03      	subs	r3, r0, #0
 80021be:	d001      	beq.n	80021c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e00f      	b.n	80021e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2284      	movs	r2, #132	; 0x84
 80021c8:	2120      	movs	r1, #32
 80021ca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2288      	movs	r2, #136	; 0x88
 80021d0:	2120      	movs	r1, #32
 80021d2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	2100      	movs	r1, #0
 80021e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	01ffffff 	.word	0x01ffffff

080021f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	; 0x50
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002200:	e0a7      	b.n	8002352 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002204:	3301      	adds	r3, #1
 8002206:	d100      	bne.n	800220a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002208:	e0a3      	b.n	8002352 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7fe fc15 	bl	8000a38 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <UART_WaitOnFlagUntilTimeout+0x30>
 800221a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221c:	2b00      	cmp	r3, #0
 800221e:	d13f      	bne.n	80022a0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002220:	f3ef 8310 	mrs	r3, PRIMASK
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
 800222a:	2301      	movs	r3, #1
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	f383 8810 	msr	PRIMASK, r3
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	494e      	ldr	r1, [pc, #312]	; (800237c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002242:	400a      	ands	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	f383 8810 	msr	PRIMASK, r3
}
 8002250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002252:	f3ef 8310 	mrs	r3, PRIMASK
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225a:	643b      	str	r3, [r7, #64]	; 0x40
 800225c:	2301      	movs	r3, #1
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	f383 8810 	msr	PRIMASK, r3
}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227e:	f383 8810 	msr	PRIMASK, r3
}
 8002282:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2284      	movs	r2, #132	; 0x84
 8002288:	2120      	movs	r1, #32
 800228a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2288      	movs	r2, #136	; 0x88
 8002290:	2120      	movs	r1, #32
 8002292:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e069      	b.n	8002374 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d052      	beq.n	8002352 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	401a      	ands	r2, r3
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	429a      	cmp	r2, r3
 80022be:	d148      	bne.n	8002352 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ca:	f3ef 8310 	mrs	r3, PRIMASK
 80022ce:	613b      	str	r3, [r7, #16]
  return(result);
 80022d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4924      	ldr	r1, [pc, #144]	; (800237c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f383 8810 	msr	PRIMASK, r3
}
 80022fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002300:	61fb      	str	r3, [r7, #28]
  return(result);
 8002302:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002304:	64bb      	str	r3, [r7, #72]	; 0x48
 8002306:	2301      	movs	r3, #1
 8002308:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2284      	movs	r2, #132	; 0x84
 8002332:	2120      	movs	r1, #32
 8002334:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2288      	movs	r2, #136	; 0x88
 800233a:	2120      	movs	r1, #32
 800233c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	228c      	movs	r2, #140	; 0x8c
 8002342:	2120      	movs	r1, #32
 8002344:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	2100      	movs	r1, #0
 800234c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e010      	b.n	8002374 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	4013      	ands	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	425a      	negs	r2, r3
 8002362:	4153      	adcs	r3, r2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	001a      	movs	r2, r3
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d100      	bne.n	8002372 <UART_WaitOnFlagUntilTimeout+0x182>
 8002370:	e747      	b.n	8002202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b014      	add	sp, #80	; 0x50
 800237a:	bd80      	pop	{r7, pc}
 800237c:	fffffe5f 	.word	0xfffffe5f

08002380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	5c9b      	ldrb	r3, [r3, r2]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_UARTEx_DisableFifoMode+0x16>
 8002392:	2302      	movs	r3, #2
 8002394:	e027      	b.n	80023e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2284      	movs	r2, #132	; 0x84
 80023a2:	2124      	movs	r1, #36	; 0x24
 80023a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2101      	movs	r1, #1
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2284      	movs	r2, #132	; 0x84
 80023d8:	2120      	movs	r1, #32
 80023da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	2100      	movs	r1, #0
 80023e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	dfffffff 	.word	0xdfffffff

080023f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002408:	2302      	movs	r3, #2
 800240a:	e02e      	b.n	800246a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	2101      	movs	r1, #1
 8002412:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2284      	movs	r2, #132	; 0x84
 8002418:	2124      	movs	r1, #36	; 0x24
 800241a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	08d9      	lsrs	r1, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f854 	bl	80024f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2284      	movs	r2, #132	; 0x84
 800245c:	2120      	movs	r1, #32
 800245e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002488:	2302      	movs	r3, #2
 800248a:	e02f      	b.n	80024ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2284      	movs	r2, #132	; 0x84
 8002498:	2124      	movs	r1, #36	; 0x24
 800249a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80024bc:	4013      	ands	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f813 	bl	80024f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2284      	movs	r2, #132	; 0x84
 80024de:	2120      	movs	r1, #32
 80024e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	f1ffffff 	.word	0xf1ffffff

080024f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002504:	2b00      	cmp	r3, #0
 8002506:	d108      	bne.n	800251a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	226a      	movs	r2, #106	; 0x6a
 800250c:	2101      	movs	r1, #1
 800250e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2268      	movs	r2, #104	; 0x68
 8002514:	2101      	movs	r1, #1
 8002516:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002518:	e043      	b.n	80025a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800251a:	260f      	movs	r6, #15
 800251c:	19bb      	adds	r3, r7, r6
 800251e:	2208      	movs	r2, #8
 8002520:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002522:	200e      	movs	r0, #14
 8002524:	183b      	adds	r3, r7, r0
 8002526:	2208      	movs	r2, #8
 8002528:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	b2da      	uxtb	r2, r3
 8002534:	240d      	movs	r4, #13
 8002536:	193b      	adds	r3, r7, r4
 8002538:	2107      	movs	r1, #7
 800253a:	400a      	ands	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	0f5b      	lsrs	r3, r3, #29
 8002546:	b2da      	uxtb	r2, r3
 8002548:	250c      	movs	r5, #12
 800254a:	197b      	adds	r3, r7, r5
 800254c:	2107      	movs	r1, #7
 800254e:	400a      	ands	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002552:	183b      	adds	r3, r7, r0
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	197a      	adds	r2, r7, r5
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4914      	ldr	r1, [pc, #80]	; (80025ac <UARTEx_SetNbDataToProcess+0xb4>)
 800255c:	5c8a      	ldrb	r2, [r1, r2]
 800255e:	435a      	muls	r2, r3
 8002560:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002562:	197b      	adds	r3, r7, r5
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800256a:	0019      	movs	r1, r3
 800256c:	f7fd fe62 	bl	8000234 <__divsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	b299      	uxth	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	226a      	movs	r2, #106	; 0x6a
 8002578:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800257a:	19bb      	adds	r3, r7, r6
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	193a      	adds	r2, r7, r4
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <UARTEx_SetNbDataToProcess+0xb4>)
 8002584:	5c8a      	ldrb	r2, [r1, r2]
 8002586:	435a      	muls	r2, r3
 8002588:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800258a:	193b      	adds	r3, r7, r4
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002592:	0019      	movs	r1, r3
 8002594:	f7fd fe4e 	bl	8000234 <__divsi3>
 8002598:	0003      	movs	r3, r0
 800259a:	b299      	uxth	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2268      	movs	r2, #104	; 0x68
 80025a0:	5299      	strh	r1, [r3, r2]
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b005      	add	sp, #20
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	08002fa0 	.word	0x08002fa0
 80025b0:	08002fa8 	.word	0x08002fa8

080025b4 <__errno>:
 80025b4:	4b01      	ldr	r3, [pc, #4]	; (80025bc <__errno+0x8>)
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	4770      	bx	lr
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <__libc_init_array>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	2600      	movs	r6, #0
 80025c4:	4d0c      	ldr	r5, [pc, #48]	; (80025f8 <__libc_init_array+0x38>)
 80025c6:	4c0d      	ldr	r4, [pc, #52]	; (80025fc <__libc_init_array+0x3c>)
 80025c8:	1b64      	subs	r4, r4, r5
 80025ca:	10a4      	asrs	r4, r4, #2
 80025cc:	42a6      	cmp	r6, r4
 80025ce:	d109      	bne.n	80025e4 <__libc_init_array+0x24>
 80025d0:	2600      	movs	r6, #0
 80025d2:	f000 fc8b 	bl	8002eec <_init>
 80025d6:	4d0a      	ldr	r5, [pc, #40]	; (8002600 <__libc_init_array+0x40>)
 80025d8:	4c0a      	ldr	r4, [pc, #40]	; (8002604 <__libc_init_array+0x44>)
 80025da:	1b64      	subs	r4, r4, r5
 80025dc:	10a4      	asrs	r4, r4, #2
 80025de:	42a6      	cmp	r6, r4
 80025e0:	d105      	bne.n	80025ee <__libc_init_array+0x2e>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	00b3      	lsls	r3, r6, #2
 80025e6:	58eb      	ldr	r3, [r5, r3]
 80025e8:	4798      	blx	r3
 80025ea:	3601      	adds	r6, #1
 80025ec:	e7ee      	b.n	80025cc <__libc_init_array+0xc>
 80025ee:	00b3      	lsls	r3, r6, #2
 80025f0:	58eb      	ldr	r3, [r5, r3]
 80025f2:	4798      	blx	r3
 80025f4:	3601      	adds	r6, #1
 80025f6:	e7f2      	b.n	80025de <__libc_init_array+0x1e>
 80025f8:	08002fe4 	.word	0x08002fe4
 80025fc:	08002fe4 	.word	0x08002fe4
 8002600:	08002fe4 	.word	0x08002fe4
 8002604:	08002fe8 	.word	0x08002fe8

08002608 <memset>:
 8002608:	0003      	movs	r3, r0
 800260a:	1882      	adds	r2, r0, r2
 800260c:	4293      	cmp	r3, r2
 800260e:	d100      	bne.n	8002612 <memset+0xa>
 8002610:	4770      	bx	lr
 8002612:	7019      	strb	r1, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	e7f9      	b.n	800260c <memset+0x4>

08002618 <siprintf>:
 8002618:	b40e      	push	{r1, r2, r3}
 800261a:	b500      	push	{lr}
 800261c:	490b      	ldr	r1, [pc, #44]	; (800264c <siprintf+0x34>)
 800261e:	b09c      	sub	sp, #112	; 0x70
 8002620:	ab1d      	add	r3, sp, #116	; 0x74
 8002622:	9002      	str	r0, [sp, #8]
 8002624:	9006      	str	r0, [sp, #24]
 8002626:	9107      	str	r1, [sp, #28]
 8002628:	9104      	str	r1, [sp, #16]
 800262a:	4809      	ldr	r0, [pc, #36]	; (8002650 <siprintf+0x38>)
 800262c:	4909      	ldr	r1, [pc, #36]	; (8002654 <siprintf+0x3c>)
 800262e:	cb04      	ldmia	r3!, {r2}
 8002630:	9105      	str	r1, [sp, #20]
 8002632:	6800      	ldr	r0, [r0, #0]
 8002634:	a902      	add	r1, sp, #8
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	f000 f870 	bl	800271c <_svfiprintf_r>
 800263c:	2300      	movs	r3, #0
 800263e:	9a02      	ldr	r2, [sp, #8]
 8002640:	7013      	strb	r3, [r2, #0]
 8002642:	b01c      	add	sp, #112	; 0x70
 8002644:	bc08      	pop	{r3}
 8002646:	b003      	add	sp, #12
 8002648:	4718      	bx	r3
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	7fffffff 	.word	0x7fffffff
 8002650:	2000000c 	.word	0x2000000c
 8002654:	ffff0208 	.word	0xffff0208

08002658 <__ssputs_r>:
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	688e      	ldr	r6, [r1, #8]
 800265c:	b085      	sub	sp, #20
 800265e:	0007      	movs	r7, r0
 8002660:	000c      	movs	r4, r1
 8002662:	9203      	str	r2, [sp, #12]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	429e      	cmp	r6, r3
 8002668:	d83c      	bhi.n	80026e4 <__ssputs_r+0x8c>
 800266a:	2390      	movs	r3, #144	; 0x90
 800266c:	898a      	ldrh	r2, [r1, #12]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	421a      	tst	r2, r3
 8002672:	d034      	beq.n	80026de <__ssputs_r+0x86>
 8002674:	6909      	ldr	r1, [r1, #16]
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	6960      	ldr	r0, [r4, #20]
 800267a:	1a5b      	subs	r3, r3, r1
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2303      	movs	r3, #3
 8002680:	4343      	muls	r3, r0
 8002682:	0fdd      	lsrs	r5, r3, #31
 8002684:	18ed      	adds	r5, r5, r3
 8002686:	9b01      	ldr	r3, [sp, #4]
 8002688:	9802      	ldr	r0, [sp, #8]
 800268a:	3301      	adds	r3, #1
 800268c:	181b      	adds	r3, r3, r0
 800268e:	106d      	asrs	r5, r5, #1
 8002690:	42ab      	cmp	r3, r5
 8002692:	d900      	bls.n	8002696 <__ssputs_r+0x3e>
 8002694:	001d      	movs	r5, r3
 8002696:	0553      	lsls	r3, r2, #21
 8002698:	d532      	bpl.n	8002700 <__ssputs_r+0xa8>
 800269a:	0029      	movs	r1, r5
 800269c:	0038      	movs	r0, r7
 800269e:	f000 fb53 	bl	8002d48 <_malloc_r>
 80026a2:	1e06      	subs	r6, r0, #0
 80026a4:	d109      	bne.n	80026ba <__ssputs_r+0x62>
 80026a6:	230c      	movs	r3, #12
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	2001      	movs	r0, #1
 80026ae:	89a2      	ldrh	r2, [r4, #12]
 80026b0:	4240      	negs	r0, r0
 80026b2:	4313      	orrs	r3, r2
 80026b4:	81a3      	strh	r3, [r4, #12]
 80026b6:	b005      	add	sp, #20
 80026b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ba:	9a02      	ldr	r2, [sp, #8]
 80026bc:	6921      	ldr	r1, [r4, #16]
 80026be:	f000 faba 	bl	8002c36 <memcpy>
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <__ssputs_r+0xc0>)
 80026c6:	401a      	ands	r2, r3
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	4313      	orrs	r3, r2
 80026cc:	81a3      	strh	r3, [r4, #12]
 80026ce:	9b02      	ldr	r3, [sp, #8]
 80026d0:	6126      	str	r6, [r4, #16]
 80026d2:	18f6      	adds	r6, r6, r3
 80026d4:	6026      	str	r6, [r4, #0]
 80026d6:	6165      	str	r5, [r4, #20]
 80026d8:	9e01      	ldr	r6, [sp, #4]
 80026da:	1aed      	subs	r5, r5, r3
 80026dc:	60a5      	str	r5, [r4, #8]
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	429e      	cmp	r6, r3
 80026e2:	d900      	bls.n	80026e6 <__ssputs_r+0x8e>
 80026e4:	9e01      	ldr	r6, [sp, #4]
 80026e6:	0032      	movs	r2, r6
 80026e8:	9903      	ldr	r1, [sp, #12]
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	f000 faac 	bl	8002c48 <memmove>
 80026f0:	68a3      	ldr	r3, [r4, #8]
 80026f2:	2000      	movs	r0, #0
 80026f4:	1b9b      	subs	r3, r3, r6
 80026f6:	60a3      	str	r3, [r4, #8]
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	199e      	adds	r6, r3, r6
 80026fc:	6026      	str	r6, [r4, #0]
 80026fe:	e7da      	b.n	80026b6 <__ssputs_r+0x5e>
 8002700:	002a      	movs	r2, r5
 8002702:	0038      	movs	r0, r7
 8002704:	f000 fb96 	bl	8002e34 <_realloc_r>
 8002708:	1e06      	subs	r6, r0, #0
 800270a:	d1e0      	bne.n	80026ce <__ssputs_r+0x76>
 800270c:	0038      	movs	r0, r7
 800270e:	6921      	ldr	r1, [r4, #16]
 8002710:	f000 faae 	bl	8002c70 <_free_r>
 8002714:	e7c7      	b.n	80026a6 <__ssputs_r+0x4e>
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	fffffb7f 	.word	0xfffffb7f

0800271c <_svfiprintf_r>:
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	b0a1      	sub	sp, #132	; 0x84
 8002720:	9003      	str	r0, [sp, #12]
 8002722:	001d      	movs	r5, r3
 8002724:	898b      	ldrh	r3, [r1, #12]
 8002726:	000f      	movs	r7, r1
 8002728:	0016      	movs	r6, r2
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	d511      	bpl.n	8002752 <_svfiprintf_r+0x36>
 800272e:	690b      	ldr	r3, [r1, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10e      	bne.n	8002752 <_svfiprintf_r+0x36>
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	f000 fb07 	bl	8002d48 <_malloc_r>
 800273a:	6038      	str	r0, [r7, #0]
 800273c:	6138      	str	r0, [r7, #16]
 800273e:	2800      	cmp	r0, #0
 8002740:	d105      	bne.n	800274e <_svfiprintf_r+0x32>
 8002742:	230c      	movs	r3, #12
 8002744:	9a03      	ldr	r2, [sp, #12]
 8002746:	3801      	subs	r0, #1
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	b021      	add	sp, #132	; 0x84
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274e:	2340      	movs	r3, #64	; 0x40
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	2300      	movs	r3, #0
 8002754:	ac08      	add	r4, sp, #32
 8002756:	6163      	str	r3, [r4, #20]
 8002758:	3320      	adds	r3, #32
 800275a:	7663      	strb	r3, [r4, #25]
 800275c:	3310      	adds	r3, #16
 800275e:	76a3      	strb	r3, [r4, #26]
 8002760:	9507      	str	r5, [sp, #28]
 8002762:	0035      	movs	r5, r6
 8002764:	782b      	ldrb	r3, [r5, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <_svfiprintf_r+0x52>
 800276a:	2b25      	cmp	r3, #37	; 0x25
 800276c:	d147      	bne.n	80027fe <_svfiprintf_r+0xe2>
 800276e:	1bab      	subs	r3, r5, r6
 8002770:	9305      	str	r3, [sp, #20]
 8002772:	42b5      	cmp	r5, r6
 8002774:	d00c      	beq.n	8002790 <_svfiprintf_r+0x74>
 8002776:	0032      	movs	r2, r6
 8002778:	0039      	movs	r1, r7
 800277a:	9803      	ldr	r0, [sp, #12]
 800277c:	f7ff ff6c 	bl	8002658 <__ssputs_r>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d100      	bne.n	8002786 <_svfiprintf_r+0x6a>
 8002784:	e0ae      	b.n	80028e4 <_svfiprintf_r+0x1c8>
 8002786:	6962      	ldr	r2, [r4, #20]
 8002788:	9b05      	ldr	r3, [sp, #20]
 800278a:	4694      	mov	ip, r2
 800278c:	4463      	add	r3, ip
 800278e:	6163      	str	r3, [r4, #20]
 8002790:	782b      	ldrb	r3, [r5, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d100      	bne.n	8002798 <_svfiprintf_r+0x7c>
 8002796:	e0a5      	b.n	80028e4 <_svfiprintf_r+0x1c8>
 8002798:	2201      	movs	r2, #1
 800279a:	2300      	movs	r3, #0
 800279c:	4252      	negs	r2, r2
 800279e:	6062      	str	r2, [r4, #4]
 80027a0:	a904      	add	r1, sp, #16
 80027a2:	3254      	adds	r2, #84	; 0x54
 80027a4:	1852      	adds	r2, r2, r1
 80027a6:	1c6e      	adds	r6, r5, #1
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	60e3      	str	r3, [r4, #12]
 80027ac:	60a3      	str	r3, [r4, #8]
 80027ae:	7013      	strb	r3, [r2, #0]
 80027b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80027b2:	2205      	movs	r2, #5
 80027b4:	7831      	ldrb	r1, [r6, #0]
 80027b6:	4854      	ldr	r0, [pc, #336]	; (8002908 <_svfiprintf_r+0x1ec>)
 80027b8:	f000 fa32 	bl	8002c20 <memchr>
 80027bc:	1c75      	adds	r5, r6, #1
 80027be:	2800      	cmp	r0, #0
 80027c0:	d11f      	bne.n	8002802 <_svfiprintf_r+0xe6>
 80027c2:	6822      	ldr	r2, [r4, #0]
 80027c4:	06d3      	lsls	r3, r2, #27
 80027c6:	d504      	bpl.n	80027d2 <_svfiprintf_r+0xb6>
 80027c8:	2353      	movs	r3, #83	; 0x53
 80027ca:	a904      	add	r1, sp, #16
 80027cc:	185b      	adds	r3, r3, r1
 80027ce:	2120      	movs	r1, #32
 80027d0:	7019      	strb	r1, [r3, #0]
 80027d2:	0713      	lsls	r3, r2, #28
 80027d4:	d504      	bpl.n	80027e0 <_svfiprintf_r+0xc4>
 80027d6:	2353      	movs	r3, #83	; 0x53
 80027d8:	a904      	add	r1, sp, #16
 80027da:	185b      	adds	r3, r3, r1
 80027dc:	212b      	movs	r1, #43	; 0x2b
 80027de:	7019      	strb	r1, [r3, #0]
 80027e0:	7833      	ldrb	r3, [r6, #0]
 80027e2:	2b2a      	cmp	r3, #42	; 0x2a
 80027e4:	d016      	beq.n	8002814 <_svfiprintf_r+0xf8>
 80027e6:	0035      	movs	r5, r6
 80027e8:	2100      	movs	r1, #0
 80027ea:	200a      	movs	r0, #10
 80027ec:	68e3      	ldr	r3, [r4, #12]
 80027ee:	782a      	ldrb	r2, [r5, #0]
 80027f0:	1c6e      	adds	r6, r5, #1
 80027f2:	3a30      	subs	r2, #48	; 0x30
 80027f4:	2a09      	cmp	r2, #9
 80027f6:	d94e      	bls.n	8002896 <_svfiprintf_r+0x17a>
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d111      	bne.n	8002820 <_svfiprintf_r+0x104>
 80027fc:	e017      	b.n	800282e <_svfiprintf_r+0x112>
 80027fe:	3501      	adds	r5, #1
 8002800:	e7b0      	b.n	8002764 <_svfiprintf_r+0x48>
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <_svfiprintf_r+0x1ec>)
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	1ac0      	subs	r0, r0, r3
 8002808:	2301      	movs	r3, #1
 800280a:	4083      	lsls	r3, r0
 800280c:	4313      	orrs	r3, r2
 800280e:	002e      	movs	r6, r5
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	e7ce      	b.n	80027b2 <_svfiprintf_r+0x96>
 8002814:	9b07      	ldr	r3, [sp, #28]
 8002816:	1d19      	adds	r1, r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	9107      	str	r1, [sp, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db01      	blt.n	8002824 <_svfiprintf_r+0x108>
 8002820:	930b      	str	r3, [sp, #44]	; 0x2c
 8002822:	e004      	b.n	800282e <_svfiprintf_r+0x112>
 8002824:	425b      	negs	r3, r3
 8002826:	60e3      	str	r3, [r4, #12]
 8002828:	2302      	movs	r3, #2
 800282a:	4313      	orrs	r3, r2
 800282c:	6023      	str	r3, [r4, #0]
 800282e:	782b      	ldrb	r3, [r5, #0]
 8002830:	2b2e      	cmp	r3, #46	; 0x2e
 8002832:	d10a      	bne.n	800284a <_svfiprintf_r+0x12e>
 8002834:	786b      	ldrb	r3, [r5, #1]
 8002836:	2b2a      	cmp	r3, #42	; 0x2a
 8002838:	d135      	bne.n	80028a6 <_svfiprintf_r+0x18a>
 800283a:	9b07      	ldr	r3, [sp, #28]
 800283c:	3502      	adds	r5, #2
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	9207      	str	r2, [sp, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db2b      	blt.n	80028a0 <_svfiprintf_r+0x184>
 8002848:	9309      	str	r3, [sp, #36]	; 0x24
 800284a:	4e30      	ldr	r6, [pc, #192]	; (800290c <_svfiprintf_r+0x1f0>)
 800284c:	2203      	movs	r2, #3
 800284e:	0030      	movs	r0, r6
 8002850:	7829      	ldrb	r1, [r5, #0]
 8002852:	f000 f9e5 	bl	8002c20 <memchr>
 8002856:	2800      	cmp	r0, #0
 8002858:	d006      	beq.n	8002868 <_svfiprintf_r+0x14c>
 800285a:	2340      	movs	r3, #64	; 0x40
 800285c:	1b80      	subs	r0, r0, r6
 800285e:	4083      	lsls	r3, r0
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	3501      	adds	r5, #1
 8002864:	4313      	orrs	r3, r2
 8002866:	6023      	str	r3, [r4, #0]
 8002868:	7829      	ldrb	r1, [r5, #0]
 800286a:	2206      	movs	r2, #6
 800286c:	4828      	ldr	r0, [pc, #160]	; (8002910 <_svfiprintf_r+0x1f4>)
 800286e:	1c6e      	adds	r6, r5, #1
 8002870:	7621      	strb	r1, [r4, #24]
 8002872:	f000 f9d5 	bl	8002c20 <memchr>
 8002876:	2800      	cmp	r0, #0
 8002878:	d03c      	beq.n	80028f4 <_svfiprintf_r+0x1d8>
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <_svfiprintf_r+0x1f8>)
 800287c:	2b00      	cmp	r3, #0
 800287e:	d125      	bne.n	80028cc <_svfiprintf_r+0x1b0>
 8002880:	2207      	movs	r2, #7
 8002882:	9b07      	ldr	r3, [sp, #28]
 8002884:	3307      	adds	r3, #7
 8002886:	4393      	bics	r3, r2
 8002888:	3308      	adds	r3, #8
 800288a:	9307      	str	r3, [sp, #28]
 800288c:	6963      	ldr	r3, [r4, #20]
 800288e:	9a04      	ldr	r2, [sp, #16]
 8002890:	189b      	adds	r3, r3, r2
 8002892:	6163      	str	r3, [r4, #20]
 8002894:	e765      	b.n	8002762 <_svfiprintf_r+0x46>
 8002896:	4343      	muls	r3, r0
 8002898:	0035      	movs	r5, r6
 800289a:	2101      	movs	r1, #1
 800289c:	189b      	adds	r3, r3, r2
 800289e:	e7a6      	b.n	80027ee <_svfiprintf_r+0xd2>
 80028a0:	2301      	movs	r3, #1
 80028a2:	425b      	negs	r3, r3
 80028a4:	e7d0      	b.n	8002848 <_svfiprintf_r+0x12c>
 80028a6:	2300      	movs	r3, #0
 80028a8:	200a      	movs	r0, #10
 80028aa:	001a      	movs	r2, r3
 80028ac:	3501      	adds	r5, #1
 80028ae:	6063      	str	r3, [r4, #4]
 80028b0:	7829      	ldrb	r1, [r5, #0]
 80028b2:	1c6e      	adds	r6, r5, #1
 80028b4:	3930      	subs	r1, #48	; 0x30
 80028b6:	2909      	cmp	r1, #9
 80028b8:	d903      	bls.n	80028c2 <_svfiprintf_r+0x1a6>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0c5      	beq.n	800284a <_svfiprintf_r+0x12e>
 80028be:	9209      	str	r2, [sp, #36]	; 0x24
 80028c0:	e7c3      	b.n	800284a <_svfiprintf_r+0x12e>
 80028c2:	4342      	muls	r2, r0
 80028c4:	0035      	movs	r5, r6
 80028c6:	2301      	movs	r3, #1
 80028c8:	1852      	adds	r2, r2, r1
 80028ca:	e7f1      	b.n	80028b0 <_svfiprintf_r+0x194>
 80028cc:	ab07      	add	r3, sp, #28
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	003a      	movs	r2, r7
 80028d2:	0021      	movs	r1, r4
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_svfiprintf_r+0x1fc>)
 80028d6:	9803      	ldr	r0, [sp, #12]
 80028d8:	e000      	b.n	80028dc <_svfiprintf_r+0x1c0>
 80028da:	bf00      	nop
 80028dc:	9004      	str	r0, [sp, #16]
 80028de:	9b04      	ldr	r3, [sp, #16]
 80028e0:	3301      	adds	r3, #1
 80028e2:	d1d3      	bne.n	800288c <_svfiprintf_r+0x170>
 80028e4:	89bb      	ldrh	r3, [r7, #12]
 80028e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80028e8:	065b      	lsls	r3, r3, #25
 80028ea:	d400      	bmi.n	80028ee <_svfiprintf_r+0x1d2>
 80028ec:	e72d      	b.n	800274a <_svfiprintf_r+0x2e>
 80028ee:	2001      	movs	r0, #1
 80028f0:	4240      	negs	r0, r0
 80028f2:	e72a      	b.n	800274a <_svfiprintf_r+0x2e>
 80028f4:	ab07      	add	r3, sp, #28
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	003a      	movs	r2, r7
 80028fa:	0021      	movs	r1, r4
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <_svfiprintf_r+0x1fc>)
 80028fe:	9803      	ldr	r0, [sp, #12]
 8002900:	f000 f87c 	bl	80029fc <_printf_i>
 8002904:	e7ea      	b.n	80028dc <_svfiprintf_r+0x1c0>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	08002fb0 	.word	0x08002fb0
 800290c:	08002fb6 	.word	0x08002fb6
 8002910:	08002fba 	.word	0x08002fba
 8002914:	00000000 	.word	0x00000000
 8002918:	08002659 	.word	0x08002659

0800291c <_printf_common>:
 800291c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800291e:	0015      	movs	r5, r2
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	688a      	ldr	r2, [r1, #8]
 8002924:	690b      	ldr	r3, [r1, #16]
 8002926:	000c      	movs	r4, r1
 8002928:	9000      	str	r0, [sp, #0]
 800292a:	4293      	cmp	r3, r2
 800292c:	da00      	bge.n	8002930 <_printf_common+0x14>
 800292e:	0013      	movs	r3, r2
 8002930:	0022      	movs	r2, r4
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	3243      	adds	r2, #67	; 0x43
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	2a00      	cmp	r2, #0
 800293a:	d001      	beq.n	8002940 <_printf_common+0x24>
 800293c:	3301      	adds	r3, #1
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	069b      	lsls	r3, r3, #26
 8002944:	d502      	bpl.n	800294c <_printf_common+0x30>
 8002946:	682b      	ldr	r3, [r5, #0]
 8002948:	3302      	adds	r3, #2
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	6822      	ldr	r2, [r4, #0]
 800294e:	2306      	movs	r3, #6
 8002950:	0017      	movs	r7, r2
 8002952:	401f      	ands	r7, r3
 8002954:	421a      	tst	r2, r3
 8002956:	d027      	beq.n	80029a8 <_printf_common+0x8c>
 8002958:	0023      	movs	r3, r4
 800295a:	3343      	adds	r3, #67	; 0x43
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	4193      	sbcs	r3, r2
 8002962:	6822      	ldr	r2, [r4, #0]
 8002964:	0692      	lsls	r2, r2, #26
 8002966:	d430      	bmi.n	80029ca <_printf_common+0xae>
 8002968:	0022      	movs	r2, r4
 800296a:	9901      	ldr	r1, [sp, #4]
 800296c:	9800      	ldr	r0, [sp, #0]
 800296e:	9e08      	ldr	r6, [sp, #32]
 8002970:	3243      	adds	r2, #67	; 0x43
 8002972:	47b0      	blx	r6
 8002974:	1c43      	adds	r3, r0, #1
 8002976:	d025      	beq.n	80029c4 <_printf_common+0xa8>
 8002978:	2306      	movs	r3, #6
 800297a:	6820      	ldr	r0, [r4, #0]
 800297c:	682a      	ldr	r2, [r5, #0]
 800297e:	68e1      	ldr	r1, [r4, #12]
 8002980:	2500      	movs	r5, #0
 8002982:	4003      	ands	r3, r0
 8002984:	2b04      	cmp	r3, #4
 8002986:	d103      	bne.n	8002990 <_printf_common+0x74>
 8002988:	1a8d      	subs	r5, r1, r2
 800298a:	43eb      	mvns	r3, r5
 800298c:	17db      	asrs	r3, r3, #31
 800298e:	401d      	ands	r5, r3
 8002990:	68a3      	ldr	r3, [r4, #8]
 8002992:	6922      	ldr	r2, [r4, #16]
 8002994:	4293      	cmp	r3, r2
 8002996:	dd01      	ble.n	800299c <_printf_common+0x80>
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	18ed      	adds	r5, r5, r3
 800299c:	2700      	movs	r7, #0
 800299e:	42bd      	cmp	r5, r7
 80029a0:	d120      	bne.n	80029e4 <_printf_common+0xc8>
 80029a2:	2000      	movs	r0, #0
 80029a4:	e010      	b.n	80029c8 <_printf_common+0xac>
 80029a6:	3701      	adds	r7, #1
 80029a8:	68e3      	ldr	r3, [r4, #12]
 80029aa:	682a      	ldr	r2, [r5, #0]
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	42bb      	cmp	r3, r7
 80029b0:	ddd2      	ble.n	8002958 <_printf_common+0x3c>
 80029b2:	0022      	movs	r2, r4
 80029b4:	2301      	movs	r3, #1
 80029b6:	9901      	ldr	r1, [sp, #4]
 80029b8:	9800      	ldr	r0, [sp, #0]
 80029ba:	9e08      	ldr	r6, [sp, #32]
 80029bc:	3219      	adds	r2, #25
 80029be:	47b0      	blx	r6
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d1f0      	bne.n	80029a6 <_printf_common+0x8a>
 80029c4:	2001      	movs	r0, #1
 80029c6:	4240      	negs	r0, r0
 80029c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	18e1      	adds	r1, r4, r3
 80029ce:	3143      	adds	r1, #67	; 0x43
 80029d0:	7008      	strb	r0, [r1, #0]
 80029d2:	0021      	movs	r1, r4
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	3145      	adds	r1, #69	; 0x45
 80029d8:	7809      	ldrb	r1, [r1, #0]
 80029da:	18a2      	adds	r2, r4, r2
 80029dc:	3243      	adds	r2, #67	; 0x43
 80029de:	3302      	adds	r3, #2
 80029e0:	7011      	strb	r1, [r2, #0]
 80029e2:	e7c1      	b.n	8002968 <_printf_common+0x4c>
 80029e4:	0022      	movs	r2, r4
 80029e6:	2301      	movs	r3, #1
 80029e8:	9901      	ldr	r1, [sp, #4]
 80029ea:	9800      	ldr	r0, [sp, #0]
 80029ec:	9e08      	ldr	r6, [sp, #32]
 80029ee:	321a      	adds	r2, #26
 80029f0:	47b0      	blx	r6
 80029f2:	1c43      	adds	r3, r0, #1
 80029f4:	d0e6      	beq.n	80029c4 <_printf_common+0xa8>
 80029f6:	3701      	adds	r7, #1
 80029f8:	e7d1      	b.n	800299e <_printf_common+0x82>
	...

080029fc <_printf_i>:
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b08b      	sub	sp, #44	; 0x2c
 8002a00:	9206      	str	r2, [sp, #24]
 8002a02:	000a      	movs	r2, r1
 8002a04:	3243      	adds	r2, #67	; 0x43
 8002a06:	9307      	str	r3, [sp, #28]
 8002a08:	9005      	str	r0, [sp, #20]
 8002a0a:	9204      	str	r2, [sp, #16]
 8002a0c:	7e0a      	ldrb	r2, [r1, #24]
 8002a0e:	000c      	movs	r4, r1
 8002a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a12:	2a78      	cmp	r2, #120	; 0x78
 8002a14:	d807      	bhi.n	8002a26 <_printf_i+0x2a>
 8002a16:	2a62      	cmp	r2, #98	; 0x62
 8002a18:	d809      	bhi.n	8002a2e <_printf_i+0x32>
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	d100      	bne.n	8002a20 <_printf_i+0x24>
 8002a1e:	e0c1      	b.n	8002ba4 <_printf_i+0x1a8>
 8002a20:	2a58      	cmp	r2, #88	; 0x58
 8002a22:	d100      	bne.n	8002a26 <_printf_i+0x2a>
 8002a24:	e08c      	b.n	8002b40 <_printf_i+0x144>
 8002a26:	0026      	movs	r6, r4
 8002a28:	3642      	adds	r6, #66	; 0x42
 8002a2a:	7032      	strb	r2, [r6, #0]
 8002a2c:	e022      	b.n	8002a74 <_printf_i+0x78>
 8002a2e:	0010      	movs	r0, r2
 8002a30:	3863      	subs	r0, #99	; 0x63
 8002a32:	2815      	cmp	r0, #21
 8002a34:	d8f7      	bhi.n	8002a26 <_printf_i+0x2a>
 8002a36:	f7fd fb69 	bl	800010c <__gnu_thumb1_case_shi>
 8002a3a:	0016      	.short	0x0016
 8002a3c:	fff6001f 	.word	0xfff6001f
 8002a40:	fff6fff6 	.word	0xfff6fff6
 8002a44:	001ffff6 	.word	0x001ffff6
 8002a48:	fff6fff6 	.word	0xfff6fff6
 8002a4c:	fff6fff6 	.word	0xfff6fff6
 8002a50:	003600a8 	.word	0x003600a8
 8002a54:	fff6009a 	.word	0xfff6009a
 8002a58:	00b9fff6 	.word	0x00b9fff6
 8002a5c:	0036fff6 	.word	0x0036fff6
 8002a60:	fff6fff6 	.word	0xfff6fff6
 8002a64:	009e      	.short	0x009e
 8002a66:	0026      	movs	r6, r4
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	3642      	adds	r6, #66	; 0x42
 8002a6c:	1d11      	adds	r1, r2, #4
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	6813      	ldr	r3, [r2, #0]
 8002a72:	7033      	strb	r3, [r6, #0]
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0a7      	b.n	8002bc8 <_printf_i+0x1cc>
 8002a78:	6808      	ldr	r0, [r1, #0]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	1d0a      	adds	r2, r1, #4
 8002a7e:	0605      	lsls	r5, r0, #24
 8002a80:	d50b      	bpl.n	8002a9a <_printf_i+0x9e>
 8002a82:	680d      	ldr	r5, [r1, #0]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	2d00      	cmp	r5, #0
 8002a88:	da03      	bge.n	8002a92 <_printf_i+0x96>
 8002a8a:	232d      	movs	r3, #45	; 0x2d
 8002a8c:	9a04      	ldr	r2, [sp, #16]
 8002a8e:	426d      	negs	r5, r5
 8002a90:	7013      	strb	r3, [r2, #0]
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <_printf_i+0x21c>)
 8002a94:	270a      	movs	r7, #10
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	e01b      	b.n	8002ad2 <_printf_i+0xd6>
 8002a9a:	680d      	ldr	r5, [r1, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	0641      	lsls	r1, r0, #25
 8002aa0:	d5f1      	bpl.n	8002a86 <_printf_i+0x8a>
 8002aa2:	b22d      	sxth	r5, r5
 8002aa4:	e7ef      	b.n	8002a86 <_printf_i+0x8a>
 8002aa6:	680d      	ldr	r5, [r1, #0]
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	1d08      	adds	r0, r1, #4
 8002aac:	6018      	str	r0, [r3, #0]
 8002aae:	062e      	lsls	r6, r5, #24
 8002ab0:	d501      	bpl.n	8002ab6 <_printf_i+0xba>
 8002ab2:	680d      	ldr	r5, [r1, #0]
 8002ab4:	e003      	b.n	8002abe <_printf_i+0xc2>
 8002ab6:	066d      	lsls	r5, r5, #25
 8002ab8:	d5fb      	bpl.n	8002ab2 <_printf_i+0xb6>
 8002aba:	680d      	ldr	r5, [r1, #0]
 8002abc:	b2ad      	uxth	r5, r5
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <_printf_i+0x21c>)
 8002ac0:	2708      	movs	r7, #8
 8002ac2:	9303      	str	r3, [sp, #12]
 8002ac4:	2a6f      	cmp	r2, #111	; 0x6f
 8002ac6:	d000      	beq.n	8002aca <_printf_i+0xce>
 8002ac8:	3702      	adds	r7, #2
 8002aca:	0023      	movs	r3, r4
 8002acc:	2200      	movs	r2, #0
 8002ace:	3343      	adds	r3, #67	; 0x43
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	6863      	ldr	r3, [r4, #4]
 8002ad4:	60a3      	str	r3, [r4, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	db03      	blt.n	8002ae2 <_printf_i+0xe6>
 8002ada:	2204      	movs	r2, #4
 8002adc:	6821      	ldr	r1, [r4, #0]
 8002ade:	4391      	bics	r1, r2
 8002ae0:	6021      	str	r1, [r4, #0]
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	d102      	bne.n	8002aec <_printf_i+0xf0>
 8002ae6:	9e04      	ldr	r6, [sp, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <_printf_i+0x10a>
 8002aec:	9e04      	ldr	r6, [sp, #16]
 8002aee:	0028      	movs	r0, r5
 8002af0:	0039      	movs	r1, r7
 8002af2:	f7fd fb9b 	bl	800022c <__aeabi_uidivmod>
 8002af6:	9b03      	ldr	r3, [sp, #12]
 8002af8:	3e01      	subs	r6, #1
 8002afa:	5c5b      	ldrb	r3, [r3, r1]
 8002afc:	7033      	strb	r3, [r6, #0]
 8002afe:	002b      	movs	r3, r5
 8002b00:	0005      	movs	r5, r0
 8002b02:	429f      	cmp	r7, r3
 8002b04:	d9f3      	bls.n	8002aee <_printf_i+0xf2>
 8002b06:	2f08      	cmp	r7, #8
 8002b08:	d109      	bne.n	8002b1e <_printf_i+0x122>
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	07db      	lsls	r3, r3, #31
 8002b0e:	d506      	bpl.n	8002b1e <_printf_i+0x122>
 8002b10:	6863      	ldr	r3, [r4, #4]
 8002b12:	6922      	ldr	r2, [r4, #16]
 8002b14:	4293      	cmp	r3, r2
 8002b16:	dc02      	bgt.n	8002b1e <_printf_i+0x122>
 8002b18:	2330      	movs	r3, #48	; 0x30
 8002b1a:	3e01      	subs	r6, #1
 8002b1c:	7033      	strb	r3, [r6, #0]
 8002b1e:	9b04      	ldr	r3, [sp, #16]
 8002b20:	1b9b      	subs	r3, r3, r6
 8002b22:	6123      	str	r3, [r4, #16]
 8002b24:	9b07      	ldr	r3, [sp, #28]
 8002b26:	0021      	movs	r1, r4
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	9805      	ldr	r0, [sp, #20]
 8002b2c:	9b06      	ldr	r3, [sp, #24]
 8002b2e:	aa09      	add	r2, sp, #36	; 0x24
 8002b30:	f7ff fef4 	bl	800291c <_printf_common>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d14c      	bne.n	8002bd2 <_printf_i+0x1d6>
 8002b38:	2001      	movs	r0, #1
 8002b3a:	4240      	negs	r0, r0
 8002b3c:	b00b      	add	sp, #44	; 0x2c
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b40:	3145      	adds	r1, #69	; 0x45
 8002b42:	700a      	strb	r2, [r1, #0]
 8002b44:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <_printf_i+0x21c>)
 8002b46:	9203      	str	r2, [sp, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	6821      	ldr	r1, [r4, #0]
 8002b4c:	ca20      	ldmia	r2!, {r5}
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	0608      	lsls	r0, r1, #24
 8002b52:	d516      	bpl.n	8002b82 <_printf_i+0x186>
 8002b54:	07cb      	lsls	r3, r1, #31
 8002b56:	d502      	bpl.n	8002b5e <_printf_i+0x162>
 8002b58:	2320      	movs	r3, #32
 8002b5a:	4319      	orrs	r1, r3
 8002b5c:	6021      	str	r1, [r4, #0]
 8002b5e:	2710      	movs	r7, #16
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d1b2      	bne.n	8002aca <_printf_i+0xce>
 8002b64:	2320      	movs	r3, #32
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	439a      	bics	r2, r3
 8002b6a:	6022      	str	r2, [r4, #0]
 8002b6c:	e7ad      	b.n	8002aca <_printf_i+0xce>
 8002b6e:	2220      	movs	r2, #32
 8002b70:	6809      	ldr	r1, [r1, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	6022      	str	r2, [r4, #0]
 8002b76:	0022      	movs	r2, r4
 8002b78:	2178      	movs	r1, #120	; 0x78
 8002b7a:	3245      	adds	r2, #69	; 0x45
 8002b7c:	7011      	strb	r1, [r2, #0]
 8002b7e:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <_printf_i+0x220>)
 8002b80:	e7e1      	b.n	8002b46 <_printf_i+0x14a>
 8002b82:	0648      	lsls	r0, r1, #25
 8002b84:	d5e6      	bpl.n	8002b54 <_printf_i+0x158>
 8002b86:	b2ad      	uxth	r5, r5
 8002b88:	e7e4      	b.n	8002b54 <_printf_i+0x158>
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	680d      	ldr	r5, [r1, #0]
 8002b8e:	1d10      	adds	r0, r2, #4
 8002b90:	6949      	ldr	r1, [r1, #20]
 8002b92:	6018      	str	r0, [r3, #0]
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	062e      	lsls	r6, r5, #24
 8002b98:	d501      	bpl.n	8002b9e <_printf_i+0x1a2>
 8002b9a:	6019      	str	r1, [r3, #0]
 8002b9c:	e002      	b.n	8002ba4 <_printf_i+0x1a8>
 8002b9e:	066d      	lsls	r5, r5, #25
 8002ba0:	d5fb      	bpl.n	8002b9a <_printf_i+0x19e>
 8002ba2:	8019      	strh	r1, [r3, #0]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9e04      	ldr	r6, [sp, #16]
 8002ba8:	6123      	str	r3, [r4, #16]
 8002baa:	e7bb      	b.n	8002b24 <_printf_i+0x128>
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	1d11      	adds	r1, r2, #4
 8002bb0:	6019      	str	r1, [r3, #0]
 8002bb2:	6816      	ldr	r6, [r2, #0]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	0030      	movs	r0, r6
 8002bb8:	6862      	ldr	r2, [r4, #4]
 8002bba:	f000 f831 	bl	8002c20 <memchr>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <_printf_i+0x1ca>
 8002bc2:	1b80      	subs	r0, r0, r6
 8002bc4:	6060      	str	r0, [r4, #4]
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	6123      	str	r3, [r4, #16]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9a04      	ldr	r2, [sp, #16]
 8002bce:	7013      	strb	r3, [r2, #0]
 8002bd0:	e7a8      	b.n	8002b24 <_printf_i+0x128>
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	0032      	movs	r2, r6
 8002bd6:	9906      	ldr	r1, [sp, #24]
 8002bd8:	9805      	ldr	r0, [sp, #20]
 8002bda:	9d07      	ldr	r5, [sp, #28]
 8002bdc:	47a8      	blx	r5
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d0aa      	beq.n	8002b38 <_printf_i+0x13c>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	079b      	lsls	r3, r3, #30
 8002be6:	d415      	bmi.n	8002c14 <_printf_i+0x218>
 8002be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bea:	68e0      	ldr	r0, [r4, #12]
 8002bec:	4298      	cmp	r0, r3
 8002bee:	daa5      	bge.n	8002b3c <_printf_i+0x140>
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	e7a3      	b.n	8002b3c <_printf_i+0x140>
 8002bf4:	0022      	movs	r2, r4
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	9906      	ldr	r1, [sp, #24]
 8002bfa:	9805      	ldr	r0, [sp, #20]
 8002bfc:	9e07      	ldr	r6, [sp, #28]
 8002bfe:	3219      	adds	r2, #25
 8002c00:	47b0      	blx	r6
 8002c02:	1c43      	adds	r3, r0, #1
 8002c04:	d098      	beq.n	8002b38 <_printf_i+0x13c>
 8002c06:	3501      	adds	r5, #1
 8002c08:	68e3      	ldr	r3, [r4, #12]
 8002c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	42ab      	cmp	r3, r5
 8002c10:	dcf0      	bgt.n	8002bf4 <_printf_i+0x1f8>
 8002c12:	e7e9      	b.n	8002be8 <_printf_i+0x1ec>
 8002c14:	2500      	movs	r5, #0
 8002c16:	e7f7      	b.n	8002c08 <_printf_i+0x20c>
 8002c18:	08002fc1 	.word	0x08002fc1
 8002c1c:	08002fd2 	.word	0x08002fd2

08002c20 <memchr>:
 8002c20:	b2c9      	uxtb	r1, r1
 8002c22:	1882      	adds	r2, r0, r2
 8002c24:	4290      	cmp	r0, r2
 8002c26:	d101      	bne.n	8002c2c <memchr+0xc>
 8002c28:	2000      	movs	r0, #0
 8002c2a:	4770      	bx	lr
 8002c2c:	7803      	ldrb	r3, [r0, #0]
 8002c2e:	428b      	cmp	r3, r1
 8002c30:	d0fb      	beq.n	8002c2a <memchr+0xa>
 8002c32:	3001      	adds	r0, #1
 8002c34:	e7f6      	b.n	8002c24 <memchr+0x4>

08002c36 <memcpy>:
 8002c36:	2300      	movs	r3, #0
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d100      	bne.n	8002c40 <memcpy+0xa>
 8002c3e:	bd10      	pop	{r4, pc}
 8002c40:	5ccc      	ldrb	r4, [r1, r3]
 8002c42:	54c4      	strb	r4, [r0, r3]
 8002c44:	3301      	adds	r3, #1
 8002c46:	e7f8      	b.n	8002c3a <memcpy+0x4>

08002c48 <memmove>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	4288      	cmp	r0, r1
 8002c4c:	d902      	bls.n	8002c54 <memmove+0xc>
 8002c4e:	188b      	adds	r3, r1, r2
 8002c50:	4298      	cmp	r0, r3
 8002c52:	d303      	bcc.n	8002c5c <memmove+0x14>
 8002c54:	2300      	movs	r3, #0
 8002c56:	e007      	b.n	8002c68 <memmove+0x20>
 8002c58:	5c8b      	ldrb	r3, [r1, r2]
 8002c5a:	5483      	strb	r3, [r0, r2]
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	d2fb      	bcs.n	8002c58 <memmove+0x10>
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	5ccc      	ldrb	r4, [r1, r3]
 8002c64:	54c4      	strb	r4, [r0, r3]
 8002c66:	3301      	adds	r3, #1
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1fa      	bne.n	8002c62 <memmove+0x1a>
 8002c6c:	e7f8      	b.n	8002c60 <memmove+0x18>
	...

08002c70 <_free_r>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	0005      	movs	r5, r0
 8002c74:	2900      	cmp	r1, #0
 8002c76:	d010      	beq.n	8002c9a <_free_r+0x2a>
 8002c78:	1f0c      	subs	r4, r1, #4
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da00      	bge.n	8002c82 <_free_r+0x12>
 8002c80:	18e4      	adds	r4, r4, r3
 8002c82:	0028      	movs	r0, r5
 8002c84:	f000 f918 	bl	8002eb8 <__malloc_lock>
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <_free_r+0x90>)
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <_free_r+0x2c>
 8002c90:	6063      	str	r3, [r4, #4]
 8002c92:	6014      	str	r4, [r2, #0]
 8002c94:	0028      	movs	r0, r5
 8002c96:	f000 f917 	bl	8002ec8 <__malloc_unlock>
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	d908      	bls.n	8002cb2 <_free_r+0x42>
 8002ca0:	6821      	ldr	r1, [r4, #0]
 8002ca2:	1860      	adds	r0, r4, r1
 8002ca4:	4283      	cmp	r3, r0
 8002ca6:	d1f3      	bne.n	8002c90 <_free_r+0x20>
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	1841      	adds	r1, r0, r1
 8002cae:	6021      	str	r1, [r4, #0]
 8002cb0:	e7ee      	b.n	8002c90 <_free_r+0x20>
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <_free_r+0x4e>
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	d9f9      	bls.n	8002cb2 <_free_r+0x42>
 8002cbe:	6811      	ldr	r1, [r2, #0]
 8002cc0:	1850      	adds	r0, r2, r1
 8002cc2:	42a0      	cmp	r0, r4
 8002cc4:	d10b      	bne.n	8002cde <_free_r+0x6e>
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	1809      	adds	r1, r1, r0
 8002cca:	1850      	adds	r0, r2, r1
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	4283      	cmp	r3, r0
 8002cd0:	d1e0      	bne.n	8002c94 <_free_r+0x24>
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	1841      	adds	r1, r0, r1
 8002cd8:	6011      	str	r1, [r2, #0]
 8002cda:	6053      	str	r3, [r2, #4]
 8002cdc:	e7da      	b.n	8002c94 <_free_r+0x24>
 8002cde:	42a0      	cmp	r0, r4
 8002ce0:	d902      	bls.n	8002ce8 <_free_r+0x78>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	602b      	str	r3, [r5, #0]
 8002ce6:	e7d5      	b.n	8002c94 <_free_r+0x24>
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	1860      	adds	r0, r4, r1
 8002cec:	4283      	cmp	r3, r0
 8002cee:	d103      	bne.n	8002cf8 <_free_r+0x88>
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	1841      	adds	r1, r0, r1
 8002cf6:	6021      	str	r1, [r4, #0]
 8002cf8:	6063      	str	r3, [r4, #4]
 8002cfa:	6054      	str	r4, [r2, #4]
 8002cfc:	e7ca      	b.n	8002c94 <_free_r+0x24>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	200001b4 	.word	0x200001b4

08002d04 <sbrk_aligned>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	4e0f      	ldr	r6, [pc, #60]	; (8002d44 <sbrk_aligned+0x40>)
 8002d08:	000d      	movs	r5, r1
 8002d0a:	6831      	ldr	r1, [r6, #0]
 8002d0c:	0004      	movs	r4, r0
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d102      	bne.n	8002d18 <sbrk_aligned+0x14>
 8002d12:	f000 f8bf 	bl	8002e94 <_sbrk_r>
 8002d16:	6030      	str	r0, [r6, #0]
 8002d18:	0029      	movs	r1, r5
 8002d1a:	0020      	movs	r0, r4
 8002d1c:	f000 f8ba 	bl	8002e94 <_sbrk_r>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d00a      	beq.n	8002d3a <sbrk_aligned+0x36>
 8002d24:	2303      	movs	r3, #3
 8002d26:	1cc5      	adds	r5, r0, #3
 8002d28:	439d      	bics	r5, r3
 8002d2a:	42a8      	cmp	r0, r5
 8002d2c:	d007      	beq.n	8002d3e <sbrk_aligned+0x3a>
 8002d2e:	1a29      	subs	r1, r5, r0
 8002d30:	0020      	movs	r0, r4
 8002d32:	f000 f8af 	bl	8002e94 <_sbrk_r>
 8002d36:	1c43      	adds	r3, r0, #1
 8002d38:	d101      	bne.n	8002d3e <sbrk_aligned+0x3a>
 8002d3a:	2501      	movs	r5, #1
 8002d3c:	426d      	negs	r5, r5
 8002d3e:	0028      	movs	r0, r5
 8002d40:	bd70      	pop	{r4, r5, r6, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	200001b8 	.word	0x200001b8

08002d48 <_malloc_r>:
 8002d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	1ccb      	adds	r3, r1, #3
 8002d4e:	4393      	bics	r3, r2
 8002d50:	3308      	adds	r3, #8
 8002d52:	0006      	movs	r6, r0
 8002d54:	001f      	movs	r7, r3
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d232      	bcs.n	8002dc0 <_malloc_r+0x78>
 8002d5a:	270c      	movs	r7, #12
 8002d5c:	42b9      	cmp	r1, r7
 8002d5e:	d831      	bhi.n	8002dc4 <_malloc_r+0x7c>
 8002d60:	0030      	movs	r0, r6
 8002d62:	f000 f8a9 	bl	8002eb8 <__malloc_lock>
 8002d66:	4d32      	ldr	r5, [pc, #200]	; (8002e30 <_malloc_r+0xe8>)
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	001c      	movs	r4, r3
 8002d6c:	2c00      	cmp	r4, #0
 8002d6e:	d12e      	bne.n	8002dce <_malloc_r+0x86>
 8002d70:	0039      	movs	r1, r7
 8002d72:	0030      	movs	r0, r6
 8002d74:	f7ff ffc6 	bl	8002d04 <sbrk_aligned>
 8002d78:	0004      	movs	r4, r0
 8002d7a:	1c43      	adds	r3, r0, #1
 8002d7c:	d11e      	bne.n	8002dbc <_malloc_r+0x74>
 8002d7e:	682c      	ldr	r4, [r5, #0]
 8002d80:	0025      	movs	r5, r4
 8002d82:	2d00      	cmp	r5, #0
 8002d84:	d14a      	bne.n	8002e1c <_malloc_r+0xd4>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	0029      	movs	r1, r5
 8002d8a:	18e3      	adds	r3, r4, r3
 8002d8c:	0030      	movs	r0, r6
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	f000 f880 	bl	8002e94 <_sbrk_r>
 8002d94:	9b01      	ldr	r3, [sp, #4]
 8002d96:	4283      	cmp	r3, r0
 8002d98:	d143      	bne.n	8002e22 <_malloc_r+0xda>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	3703      	adds	r7, #3
 8002d9e:	1aff      	subs	r7, r7, r3
 8002da0:	2303      	movs	r3, #3
 8002da2:	439f      	bics	r7, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	2f0c      	cmp	r7, #12
 8002da8:	d200      	bcs.n	8002dac <_malloc_r+0x64>
 8002daa:	270c      	movs	r7, #12
 8002dac:	0039      	movs	r1, r7
 8002dae:	0030      	movs	r0, r6
 8002db0:	f7ff ffa8 	bl	8002d04 <sbrk_aligned>
 8002db4:	1c43      	adds	r3, r0, #1
 8002db6:	d034      	beq.n	8002e22 <_malloc_r+0xda>
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	19df      	adds	r7, r3, r7
 8002dbc:	6027      	str	r7, [r4, #0]
 8002dbe:	e013      	b.n	8002de8 <_malloc_r+0xa0>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	dacb      	bge.n	8002d5c <_malloc_r+0x14>
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	6033      	str	r3, [r6, #0]
 8002dca:	0028      	movs	r0, r5
 8002dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	1bd1      	subs	r1, r2, r7
 8002dd2:	d420      	bmi.n	8002e16 <_malloc_r+0xce>
 8002dd4:	290b      	cmp	r1, #11
 8002dd6:	d917      	bls.n	8002e08 <_malloc_r+0xc0>
 8002dd8:	19e2      	adds	r2, r4, r7
 8002dda:	6027      	str	r7, [r4, #0]
 8002ddc:	42a3      	cmp	r3, r4
 8002dde:	d111      	bne.n	8002e04 <_malloc_r+0xbc>
 8002de0:	602a      	str	r2, [r5, #0]
 8002de2:	6863      	ldr	r3, [r4, #4]
 8002de4:	6011      	str	r1, [r2, #0]
 8002de6:	6053      	str	r3, [r2, #4]
 8002de8:	0030      	movs	r0, r6
 8002dea:	0025      	movs	r5, r4
 8002dec:	f000 f86c 	bl	8002ec8 <__malloc_unlock>
 8002df0:	2207      	movs	r2, #7
 8002df2:	350b      	adds	r5, #11
 8002df4:	1d23      	adds	r3, r4, #4
 8002df6:	4395      	bics	r5, r2
 8002df8:	1aea      	subs	r2, r5, r3
 8002dfa:	429d      	cmp	r5, r3
 8002dfc:	d0e5      	beq.n	8002dca <_malloc_r+0x82>
 8002dfe:	1b5b      	subs	r3, r3, r5
 8002e00:	50a3      	str	r3, [r4, r2]
 8002e02:	e7e2      	b.n	8002dca <_malloc_r+0x82>
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e7ec      	b.n	8002de2 <_malloc_r+0x9a>
 8002e08:	6862      	ldr	r2, [r4, #4]
 8002e0a:	42a3      	cmp	r3, r4
 8002e0c:	d101      	bne.n	8002e12 <_malloc_r+0xca>
 8002e0e:	602a      	str	r2, [r5, #0]
 8002e10:	e7ea      	b.n	8002de8 <_malloc_r+0xa0>
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	e7e8      	b.n	8002de8 <_malloc_r+0xa0>
 8002e16:	0023      	movs	r3, r4
 8002e18:	6864      	ldr	r4, [r4, #4]
 8002e1a:	e7a7      	b.n	8002d6c <_malloc_r+0x24>
 8002e1c:	002c      	movs	r4, r5
 8002e1e:	686d      	ldr	r5, [r5, #4]
 8002e20:	e7af      	b.n	8002d82 <_malloc_r+0x3a>
 8002e22:	230c      	movs	r3, #12
 8002e24:	0030      	movs	r0, r6
 8002e26:	6033      	str	r3, [r6, #0]
 8002e28:	f000 f84e 	bl	8002ec8 <__malloc_unlock>
 8002e2c:	e7cd      	b.n	8002dca <_malloc_r+0x82>
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	200001b4 	.word	0x200001b4

08002e34 <_realloc_r>:
 8002e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e36:	0007      	movs	r7, r0
 8002e38:	000e      	movs	r6, r1
 8002e3a:	0014      	movs	r4, r2
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	d105      	bne.n	8002e4c <_realloc_r+0x18>
 8002e40:	0011      	movs	r1, r2
 8002e42:	f7ff ff81 	bl	8002d48 <_malloc_r>
 8002e46:	0005      	movs	r5, r0
 8002e48:	0028      	movs	r0, r5
 8002e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d103      	bne.n	8002e58 <_realloc_r+0x24>
 8002e50:	f7ff ff0e 	bl	8002c70 <_free_r>
 8002e54:	0025      	movs	r5, r4
 8002e56:	e7f7      	b.n	8002e48 <_realloc_r+0x14>
 8002e58:	f000 f83e 	bl	8002ed8 <_malloc_usable_size_r>
 8002e5c:	9001      	str	r0, [sp, #4]
 8002e5e:	4284      	cmp	r4, r0
 8002e60:	d803      	bhi.n	8002e6a <_realloc_r+0x36>
 8002e62:	0035      	movs	r5, r6
 8002e64:	0843      	lsrs	r3, r0, #1
 8002e66:	42a3      	cmp	r3, r4
 8002e68:	d3ee      	bcc.n	8002e48 <_realloc_r+0x14>
 8002e6a:	0021      	movs	r1, r4
 8002e6c:	0038      	movs	r0, r7
 8002e6e:	f7ff ff6b 	bl	8002d48 <_malloc_r>
 8002e72:	1e05      	subs	r5, r0, #0
 8002e74:	d0e8      	beq.n	8002e48 <_realloc_r+0x14>
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	0022      	movs	r2, r4
 8002e7a:	429c      	cmp	r4, r3
 8002e7c:	d900      	bls.n	8002e80 <_realloc_r+0x4c>
 8002e7e:	001a      	movs	r2, r3
 8002e80:	0031      	movs	r1, r6
 8002e82:	0028      	movs	r0, r5
 8002e84:	f7ff fed7 	bl	8002c36 <memcpy>
 8002e88:	0031      	movs	r1, r6
 8002e8a:	0038      	movs	r0, r7
 8002e8c:	f7ff fef0 	bl	8002c70 <_free_r>
 8002e90:	e7da      	b.n	8002e48 <_realloc_r+0x14>
	...

08002e94 <_sbrk_r>:
 8002e94:	2300      	movs	r3, #0
 8002e96:	b570      	push	{r4, r5, r6, lr}
 8002e98:	4d06      	ldr	r5, [pc, #24]	; (8002eb4 <_sbrk_r+0x20>)
 8002e9a:	0004      	movs	r4, r0
 8002e9c:	0008      	movs	r0, r1
 8002e9e:	602b      	str	r3, [r5, #0]
 8002ea0:	f7fd fce8 	bl	8000874 <_sbrk>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d103      	bne.n	8002eb0 <_sbrk_r+0x1c>
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d000      	beq.n	8002eb0 <_sbrk_r+0x1c>
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	200001bc 	.word	0x200001bc

08002eb8 <__malloc_lock>:
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <__malloc_lock+0xc>)
 8002ebc:	f000 f814 	bl	8002ee8 <__retarget_lock_acquire_recursive>
 8002ec0:	bd10      	pop	{r4, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	200001c0 	.word	0x200001c0

08002ec8 <__malloc_unlock>:
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <__malloc_unlock+0xc>)
 8002ecc:	f000 f80d 	bl	8002eea <__retarget_lock_release_recursive>
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	200001c0 	.word	0x200001c0

08002ed8 <_malloc_usable_size_r>:
 8002ed8:	1f0b      	subs	r3, r1, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1f18      	subs	r0, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da01      	bge.n	8002ee6 <_malloc_usable_size_r+0xe>
 8002ee2:	580b      	ldr	r3, [r1, r0]
 8002ee4:	18c0      	adds	r0, r0, r3
 8002ee6:	4770      	bx	lr

08002ee8 <__retarget_lock_acquire_recursive>:
 8002ee8:	4770      	bx	lr

08002eea <__retarget_lock_release_recursive>:
 8002eea:	4770      	bx	lr

08002eec <_init>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr

08002ef8 <_fini>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr
